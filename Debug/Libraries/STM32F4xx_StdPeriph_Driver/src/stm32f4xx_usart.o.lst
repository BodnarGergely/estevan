   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_usart.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	USART_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	USART_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.0
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    30-September-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  26              		.loc 1 179 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  42              		.loc 1 183 0
  43 0008 7A68     		ldr	r2, [r7, #4]
  44 000a 344B     		ldr	r3, .L8
  45 000c 9A42     		cmp	r2, r3
  46 000e 0CD1     		bne	.L2
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  47              		.loc 1 185 0
  48 0010 4FF01000 		mov	r0, #16
  49 0014 4FF00101 		mov	r1, #1
  50 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  51              		.loc 1 186 0
  52 001c 4FF01000 		mov	r0, #16
  53 0020 4FF00001 		mov	r1, #0
  54 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  55 0028 53E0     		b	.L1
  56              	.L2:
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  57              		.loc 1 188 0
  58 002a 7A68     		ldr	r2, [r7, #4]
  59 002c 2C4B     		ldr	r3, .L8+4
  60 002e 9A42     		cmp	r2, r3
  61 0030 0CD1     		bne	.L4
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  62              		.loc 1 190 0
  63 0032 4FF40030 		mov	r0, #131072
  64 0036 4FF00101 		mov	r1, #1
  65 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  66              		.loc 1 191 0
  67 003e 4FF40030 		mov	r0, #131072
  68 0042 4FF00001 		mov	r1, #0
  69 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  70 004a 42E0     		b	.L1
  71              	.L4:
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  72              		.loc 1 193 0
  73 004c 7A68     		ldr	r2, [r7, #4]
  74 004e 254B     		ldr	r3, .L8+8
  75 0050 9A42     		cmp	r2, r3
  76 0052 0CD1     		bne	.L5
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  77              		.loc 1 195 0
  78 0054 4FF48020 		mov	r0, #262144
  79 0058 4FF00101 		mov	r1, #1
  80 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  81              		.loc 1 196 0
  82 0060 4FF48020 		mov	r0, #262144
  83 0064 4FF00001 		mov	r1, #0
  84 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  85 006c 31E0     		b	.L1
  86              	.L5:
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  87              		.loc 1 198 0
  88 006e 7A68     		ldr	r2, [r7, #4]
  89 0070 1D4B     		ldr	r3, .L8+12
  90 0072 9A42     		cmp	r2, r3
  91 0074 0CD1     		bne	.L6
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
  92              		.loc 1 200 0
  93 0076 4FF40020 		mov	r0, #524288
  94 007a 4FF00101 		mov	r1, #1
  95 007e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  96              		.loc 1 201 0
  97 0082 4FF40020 		mov	r0, #524288
  98 0086 4FF00001 		mov	r1, #0
  99 008a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 100 008e 20E0     		b	.L1
 101              	.L6:
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 102              		.loc 1 203 0
 103 0090 7A68     		ldr	r2, [r7, #4]
 104 0092 164B     		ldr	r3, .L8+16
 105 0094 9A42     		cmp	r2, r3
 106 0096 0CD1     		bne	.L7
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 107              		.loc 1 205 0
 108 0098 4FF48010 		mov	r0, #1048576
 109 009c 4FF00101 		mov	r1, #1
 110 00a0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 111              		.loc 1 206 0
 112 00a4 4FF48010 		mov	r0, #1048576
 113 00a8 4FF00001 		mov	r1, #0
 114 00ac FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 115 00b0 0FE0     		b	.L1
 116              	.L7:
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 117              		.loc 1 210 0
 118 00b2 7A68     		ldr	r2, [r7, #4]
 119 00b4 0E4B     		ldr	r3, .L8+20
 120 00b6 9A42     		cmp	r2, r3
 121 00b8 0BD1     		bne	.L1
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 122              		.loc 1 212 0
 123 00ba 4FF02000 		mov	r0, #32
 124 00be 4FF00101 		mov	r1, #1
 125 00c2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 126              		.loc 1 213 0
 127 00c6 4FF02000 		mov	r0, #32
 128 00ca 4FF00001 		mov	r1, #0
 129 00ce FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 130              	.L1:
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 131              		.loc 1 216 0
 132 00d2 07F10807 		add	r7, r7, #8
 133 00d6 BD46     		mov	sp, r7
 134 00d8 80BD     		pop	{r7, pc}
 135              	.L9:
 136 00da 00BF     		.align	2
 137              	.L8:
 138 00dc 00100140 		.word	1073811456
 139 00e0 00440040 		.word	1073759232
 140 00e4 00480040 		.word	1073760256
 141 00e8 004C0040 		.word	1073761280
 142 00ec 00500040 		.word	1073762304
 143 00f0 00140140 		.word	1073812480
 144              		.cfi_endproc
 145              	.LFE110:
 147              		.align	2
 148              		.global	USART_Init
 149              		.thumb
 150              		.thumb_func
 152              	USART_Init:
 153              	.LFB111:
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 154              		.loc 1 228 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 40
 157              		@ frame_needed = 1, uses_anonymous_args = 0
 158 00f4 80B5     		push	{r7, lr}
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 8
 161              		.cfi_offset 7, -8
 162              		.cfi_offset 14, -4
 163 00f6 8AB0     		sub	sp, sp, #40
 164              	.LCFI4:
 165              		.cfi_def_cfa_offset 48
 166 00f8 00AF     		add	r7, sp, #0
 167              	.LCFI5:
 168              		.cfi_def_cfa_register 7
 169 00fa 7860     		str	r0, [r7, #4]
 170 00fc 3960     		str	r1, [r7, #0]
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 171              		.loc 1 229 0
 172 00fe 4FF00003 		mov	r3, #0
 173 0102 7B62     		str	r3, [r7, #36]
 174 0104 4FF00003 		mov	r3, #0
 175 0108 3B62     		str	r3, [r7, #32]
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 176              		.loc 1 230 0
 177 010a 4FF00003 		mov	r3, #0
 178 010e FB61     		str	r3, [r7, #28]
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 179              		.loc 1 231 0
 180 0110 4FF00003 		mov	r3, #0
 181 0114 BB61     		str	r3, [r7, #24]
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 182              		.loc 1 250 0
 183 0116 7B68     		ldr	r3, [r7, #4]
 184 0118 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 185 011a 9BB2     		uxth	r3, r3
 186 011c 7B62     		str	r3, [r7, #36]
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 187              		.loc 1 253 0
 188 011e 7B6A     		ldr	r3, [r7, #36]
 189 0120 23F44053 		bic	r3, r3, #12288
 190 0124 7B62     		str	r3, [r7, #36]
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 191              		.loc 1 257 0
 192 0126 3B68     		ldr	r3, [r7, #0]
 193 0128 DB88     		ldrh	r3, [r3, #6]
 194 012a 7A6A     		ldr	r2, [r7, #36]
 195 012c 1343     		orrs	r3, r3, r2
 196 012e 7B62     		str	r3, [r7, #36]
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 197              		.loc 1 260 0
 198 0130 7B6A     		ldr	r3, [r7, #36]
 199 0132 9AB2     		uxth	r2, r3
 200 0134 7B68     		ldr	r3, [r7, #4]
 201 0136 1A82     		strh	r2, [r3, #16]	@ movhi
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 202              		.loc 1 263 0
 203 0138 7B68     		ldr	r3, [r7, #4]
 204 013a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 205 013c 9BB2     		uxth	r3, r3
 206 013e 7B62     		str	r3, [r7, #36]
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 207              		.loc 1 266 0
 208 0140 7B6A     		ldr	r3, [r7, #36]
 209 0142 23F4B053 		bic	r3, r3, #5632
 210 0146 23F00C03 		bic	r3, r3, #12
 211 014a 7B62     		str	r3, [r7, #36]
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 212              		.loc 1 272 0
 213 014c 3B68     		ldr	r3, [r7, #0]
 214 014e 9A88     		ldrh	r2, [r3, #4]
 215 0150 3B68     		ldr	r3, [r7, #0]
 216 0152 1B89     		ldrh	r3, [r3, #8]
 217 0154 1343     		orrs	r3, r3, r2
 218 0156 9AB2     		uxth	r2, r3
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 219              		.loc 1 273 0
 220 0158 3B68     		ldr	r3, [r7, #0]
 221 015a 5B89     		ldrh	r3, [r3, #10]
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 222              		.loc 1 272 0
 223 015c 1343     		orrs	r3, r3, r2
 224 015e 9BB2     		uxth	r3, r3
 225 0160 7A6A     		ldr	r2, [r7, #36]
 226 0162 1343     		orrs	r3, r3, r2
 227 0164 7B62     		str	r3, [r7, #36]
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 228              		.loc 1 276 0
 229 0166 7B6A     		ldr	r3, [r7, #36]
 230 0168 9AB2     		uxth	r2, r3
 231 016a 7B68     		ldr	r3, [r7, #4]
 232 016c 9A81     		strh	r2, [r3, #12]	@ movhi
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 233              		.loc 1 279 0
 234 016e 7B68     		ldr	r3, [r7, #4]
 235 0170 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 236 0172 9BB2     		uxth	r3, r3
 237 0174 7B62     		str	r3, [r7, #36]
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 238              		.loc 1 282 0
 239 0176 7B6A     		ldr	r3, [r7, #36]
 240 0178 23F44073 		bic	r3, r3, #768
 241 017c 7B62     		str	r3, [r7, #36]
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 242              		.loc 1 286 0
 243 017e 3B68     		ldr	r3, [r7, #0]
 244 0180 9B89     		ldrh	r3, [r3, #12]
 245 0182 7A6A     		ldr	r2, [r7, #36]
 246 0184 1343     		orrs	r3, r3, r2
 247 0186 7B62     		str	r3, [r7, #36]
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 248              		.loc 1 289 0
 249 0188 7B6A     		ldr	r3, [r7, #36]
 250 018a 9AB2     		uxth	r2, r3
 251 018c 7B68     		ldr	r3, [r7, #4]
 252 018e 9A82     		strh	r2, [r3, #20]	@ movhi
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 253              		.loc 1 293 0
 254 0190 07F10803 		add	r3, r7, #8
 255 0194 1846     		mov	r0, r3
 256 0196 FFF7FEFF 		bl	RCC_GetClocksFreq
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 257              		.loc 1 295 0
 258 019a 7A68     		ldr	r2, [r7, #4]
 259 019c 394B     		ldr	r3, .L18
 260 019e 9A42     		cmp	r2, r3
 261 01a0 03D0     		beq	.L11
 262              		.loc 1 295 0 is_stmt 0 discriminator 1
 263 01a2 7A68     		ldr	r2, [r7, #4]
 264 01a4 384B     		ldr	r3, .L18+4
 265 01a6 9A42     		cmp	r2, r3
 266 01a8 02D1     		bne	.L12
 267              	.L11:
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 268              		.loc 1 297 0 is_stmt 1
 269 01aa 7B69     		ldr	r3, [r7, #20]
 270 01ac 3B62     		str	r3, [r7, #32]
 271 01ae 01E0     		b	.L13
 272              	.L12:
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 273              		.loc 1 301 0
 274 01b0 3B69     		ldr	r3, [r7, #16]
 275 01b2 3B62     		str	r3, [r7, #32]
 276              	.L13:
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 277              		.loc 1 305 0
 278 01b4 7B68     		ldr	r3, [r7, #4]
 279 01b6 9B89     		ldrh	r3, [r3, #12]	@ movhi
 280 01b8 9BB2     		uxth	r3, r3
 281 01ba 9BB2     		uxth	r3, r3
 282 01bc 1BB2     		sxth	r3, r3
 283 01be 002B     		cmp	r3, #0
 284 01c0 0FDA     		bge	.L14
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 285              		.loc 1 308 0
 286 01c2 3A6A     		ldr	r2, [r7, #32]
 287 01c4 1346     		mov	r3, r2
 288 01c6 4FEA8303 		lsl	r3, r3, #2
 289 01ca 9B18     		adds	r3, r3, r2
 290 01cc 4FEA8302 		lsl	r2, r3, #2
 291 01d0 9A18     		adds	r2, r3, r2
 292 01d2 3B68     		ldr	r3, [r7, #0]
 293 01d4 1B68     		ldr	r3, [r3, #0]
 294 01d6 4FEA4303 		lsl	r3, r3, #1
 295 01da B2FBF3F3 		udiv	r3, r2, r3
 296 01de FB61     		str	r3, [r7, #28]
 297 01e0 0EE0     		b	.L15
 298              	.L14:
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 299              		.loc 1 313 0
 300 01e2 3A6A     		ldr	r2, [r7, #32]
 301 01e4 1346     		mov	r3, r2
 302 01e6 4FEA8303 		lsl	r3, r3, #2
 303 01ea 9B18     		adds	r3, r3, r2
 304 01ec 4FEA8302 		lsl	r2, r3, #2
 305 01f0 9A18     		adds	r2, r3, r2
 306 01f2 3B68     		ldr	r3, [r7, #0]
 307 01f4 1B68     		ldr	r3, [r3, #0]
 308 01f6 4FEA8303 		lsl	r3, r3, #2
 309 01fa B2FBF3F3 		udiv	r3, r2, r3
 310 01fe FB61     		str	r3, [r7, #28]
 311              	.L15:
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 312              		.loc 1 315 0
 313 0200 FA69     		ldr	r2, [r7, #28]
 314 0202 224B     		ldr	r3, .L18+8
 315 0204 A3FB0213 		umull	r1, r3, r3, r2
 316 0208 4FEA5313 		lsr	r3, r3, #5
 317 020c 4FEA0313 		lsl	r3, r3, #4
 318 0210 7B62     		str	r3, [r7, #36]
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 319              		.loc 1 318 0
 320 0212 7B6A     		ldr	r3, [r7, #36]
 321 0214 4FEA1313 		lsr	r3, r3, #4
 322 0218 4FF06402 		mov	r2, #100
 323 021c 02FB03F3 		mul	r3, r2, r3
 324 0220 FA69     		ldr	r2, [r7, #28]
 325 0222 D31A     		subs	r3, r2, r3
 326 0224 BB61     		str	r3, [r7, #24]
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 327              		.loc 1 321 0
 328 0226 7B68     		ldr	r3, [r7, #4]
 329 0228 9B89     		ldrh	r3, [r3, #12]	@ movhi
 330 022a 9BB2     		uxth	r3, r3
 331 022c 9BB2     		uxth	r3, r3
 332 022e 1BB2     		sxth	r3, r3
 333 0230 002B     		cmp	r3, #0
 334 0232 0FDA     		bge	.L16
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 335              		.loc 1 323 0
 336 0234 BB69     		ldr	r3, [r7, #24]
 337 0236 4FEAC303 		lsl	r3, r3, #3
 338 023a 03F13202 		add	r2, r3, #50
 339 023e 134B     		ldr	r3, .L18+8
 340 0240 A3FB0213 		umull	r1, r3, r3, r2
 341 0244 4FEA5313 		lsr	r3, r3, #5
 342 0248 03F00703 		and	r3, r3, #7
 343 024c 7A6A     		ldr	r2, [r7, #36]
 344 024e 1343     		orrs	r3, r3, r2
 345 0250 7B62     		str	r3, [r7, #36]
 346 0252 0EE0     		b	.L17
 347              	.L16:
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 348              		.loc 1 327 0
 349 0254 BB69     		ldr	r3, [r7, #24]
 350 0256 4FEA0313 		lsl	r3, r3, #4
 351 025a 03F13202 		add	r2, r3, #50
 352 025e 0B4B     		ldr	r3, .L18+8
 353 0260 A3FB0213 		umull	r1, r3, r3, r2
 354 0264 4FEA5313 		lsr	r3, r3, #5
 355 0268 03F00F03 		and	r3, r3, #15
 356 026c 7A6A     		ldr	r2, [r7, #36]
 357 026e 1343     		orrs	r3, r3, r2
 358 0270 7B62     		str	r3, [r7, #36]
 359              	.L17:
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 360              		.loc 1 331 0
 361 0272 7B6A     		ldr	r3, [r7, #36]
 362 0274 9AB2     		uxth	r2, r3
 363 0276 7B68     		ldr	r3, [r7, #4]
 364 0278 1A81     		strh	r2, [r3, #8]	@ movhi
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 365              		.loc 1 332 0
 366 027a 07F12807 		add	r7, r7, #40
 367 027e BD46     		mov	sp, r7
 368 0280 80BD     		pop	{r7, pc}
 369              	.L19:
 370 0282 00BF     		.align	2
 371              	.L18:
 372 0284 00100140 		.word	1073811456
 373 0288 00140140 		.word	1073812480
 374 028c 1F85EB51 		.word	1374389535
 375              		.cfi_endproc
 376              	.LFE111:
 378              		.align	2
 379              		.global	USART_StructInit
 380              		.thumb
 381              		.thumb_func
 383              	USART_StructInit:
 384              	.LFB112:
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 385              		.loc 1 341 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 8
 388              		@ frame_needed = 1, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 390 0290 80B4     		push	{r7}
 391              	.LCFI6:
 392              		.cfi_def_cfa_offset 4
 393              		.cfi_offset 7, -4
 394 0292 83B0     		sub	sp, sp, #12
 395              	.LCFI7:
 396              		.cfi_def_cfa_offset 16
 397 0294 00AF     		add	r7, sp, #0
 398              	.LCFI8:
 399              		.cfi_def_cfa_register 7
 400 0296 7860     		str	r0, [r7, #4]
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 401              		.loc 1 343 0
 402 0298 7B68     		ldr	r3, [r7, #4]
 403 029a 4FF41652 		mov	r2, #9600
 404 029e 1A60     		str	r2, [r3, #0]
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 405              		.loc 1 344 0
 406 02a0 7B68     		ldr	r3, [r7, #4]
 407 02a2 4FF00002 		mov	r2, #0
 408 02a6 9A80     		strh	r2, [r3, #4]	@ movhi
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 409              		.loc 1 345 0
 410 02a8 7B68     		ldr	r3, [r7, #4]
 411 02aa 4FF00002 		mov	r2, #0
 412 02ae DA80     		strh	r2, [r3, #6]	@ movhi
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 413              		.loc 1 346 0
 414 02b0 7B68     		ldr	r3, [r7, #4]
 415 02b2 4FF00002 		mov	r2, #0
 416 02b6 1A81     		strh	r2, [r3, #8]	@ movhi
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 417              		.loc 1 347 0
 418 02b8 7B68     		ldr	r3, [r7, #4]
 419 02ba 4FF00C02 		mov	r2, #12
 420 02be 5A81     		strh	r2, [r3, #10]	@ movhi
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 421              		.loc 1 348 0
 422 02c0 7B68     		ldr	r3, [r7, #4]
 423 02c2 4FF00002 		mov	r2, #0
 424 02c6 9A81     		strh	r2, [r3, #12]	@ movhi
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 425              		.loc 1 349 0
 426 02c8 07F10C07 		add	r7, r7, #12
 427 02cc BD46     		mov	sp, r7
 428 02ce 80BC     		pop	{r7}
 429 02d0 7047     		bx	lr
 430              		.cfi_endproc
 431              	.LFE112:
 433 02d2 00BF     		.align	2
 434              		.global	USART_ClockInit
 435              		.thumb
 436              		.thumb_func
 438              	USART_ClockInit:
 439              	.LFB113:
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 440              		.loc 1 361 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 16
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 445 02d4 80B4     		push	{r7}
 446              	.LCFI9:
 447              		.cfi_def_cfa_offset 4
 448              		.cfi_offset 7, -4
 449 02d6 85B0     		sub	sp, sp, #20
 450              	.LCFI10:
 451              		.cfi_def_cfa_offset 24
 452 02d8 00AF     		add	r7, sp, #0
 453              	.LCFI11:
 454              		.cfi_def_cfa_register 7
 455 02da 7860     		str	r0, [r7, #4]
 456 02dc 3960     		str	r1, [r7, #0]
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 457              		.loc 1 362 0
 458 02de 4FF00003 		mov	r3, #0
 459 02e2 FB60     		str	r3, [r7, #12]
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 460              		.loc 1 371 0
 461 02e4 7B68     		ldr	r3, [r7, #4]
 462 02e6 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 463 02e8 9BB2     		uxth	r3, r3
 464 02ea FB60     		str	r3, [r7, #12]
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 465              		.loc 1 373 0
 466 02ec FB68     		ldr	r3, [r7, #12]
 467 02ee 23F47063 		bic	r3, r3, #3840
 468 02f2 FB60     		str	r3, [r7, #12]
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 469              		.loc 1 379 0
 470 02f4 3B68     		ldr	r3, [r7, #0]
 471 02f6 1A88     		ldrh	r2, [r3, #0]
 472 02f8 3B68     		ldr	r3, [r7, #0]
 473 02fa 5B88     		ldrh	r3, [r3, #2]
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 474              		.loc 1 380 0
 475 02fc 1343     		orrs	r3, r3, r2
 476 02fe 9AB2     		uxth	r2, r3
 477 0300 3B68     		ldr	r3, [r7, #0]
 478 0302 9B88     		ldrh	r3, [r3, #4]
 479 0304 1343     		orrs	r3, r3, r2
 480 0306 9AB2     		uxth	r2, r3
 481 0308 3B68     		ldr	r3, [r7, #0]
 482 030a DB88     		ldrh	r3, [r3, #6]
 483 030c 1343     		orrs	r3, r3, r2
 484 030e 9BB2     		uxth	r3, r3
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 485              		.loc 1 379 0
 486 0310 FA68     		ldr	r2, [r7, #12]
 487 0312 1343     		orrs	r3, r3, r2
 488 0314 FB60     		str	r3, [r7, #12]
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 489              		.loc 1 382 0
 490 0316 FB68     		ldr	r3, [r7, #12]
 491 0318 9AB2     		uxth	r2, r3
 492 031a 7B68     		ldr	r3, [r7, #4]
 493 031c 1A82     		strh	r2, [r3, #16]	@ movhi
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 494              		.loc 1 383 0
 495 031e 07F11407 		add	r7, r7, #20
 496 0322 BD46     		mov	sp, r7
 497 0324 80BC     		pop	{r7}
 498 0326 7047     		bx	lr
 499              		.cfi_endproc
 500              	.LFE113:
 502              		.align	2
 503              		.global	USART_ClockStructInit
 504              		.thumb
 505              		.thumb_func
 507              	USART_ClockStructInit:
 508              	.LFB114:
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 509              		.loc 1 392 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 8
 512              		@ frame_needed = 1, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514 0328 80B4     		push	{r7}
 515              	.LCFI12:
 516              		.cfi_def_cfa_offset 4
 517              		.cfi_offset 7, -4
 518 032a 83B0     		sub	sp, sp, #12
 519              	.LCFI13:
 520              		.cfi_def_cfa_offset 16
 521 032c 00AF     		add	r7, sp, #0
 522              	.LCFI14:
 523              		.cfi_def_cfa_register 7
 524 032e 7860     		str	r0, [r7, #4]
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 525              		.loc 1 394 0
 526 0330 7B68     		ldr	r3, [r7, #4]
 527 0332 4FF00002 		mov	r2, #0
 528 0336 1A80     		strh	r2, [r3, #0]	@ movhi
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 529              		.loc 1 395 0
 530 0338 7B68     		ldr	r3, [r7, #4]
 531 033a 4FF00002 		mov	r2, #0
 532 033e 5A80     		strh	r2, [r3, #2]	@ movhi
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 533              		.loc 1 396 0
 534 0340 7B68     		ldr	r3, [r7, #4]
 535 0342 4FF00002 		mov	r2, #0
 536 0346 9A80     		strh	r2, [r3, #4]	@ movhi
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 537              		.loc 1 397 0
 538 0348 7B68     		ldr	r3, [r7, #4]
 539 034a 4FF00002 		mov	r2, #0
 540 034e DA80     		strh	r2, [r3, #6]	@ movhi
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 541              		.loc 1 398 0
 542 0350 07F10C07 		add	r7, r7, #12
 543 0354 BD46     		mov	sp, r7
 544 0356 80BC     		pop	{r7}
 545 0358 7047     		bx	lr
 546              		.cfi_endproc
 547              	.LFE114:
 549 035a 00BF     		.align	2
 550              		.global	USART_Cmd
 551              		.thumb
 552              		.thumb_func
 554              	USART_Cmd:
 555              	.LFB115:
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 556              		.loc 1 409 0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 8
 559              		@ frame_needed = 1, uses_anonymous_args = 0
 560              		@ link register save eliminated.
 561 035c 80B4     		push	{r7}
 562              	.LCFI15:
 563              		.cfi_def_cfa_offset 4
 564              		.cfi_offset 7, -4
 565 035e 83B0     		sub	sp, sp, #12
 566              	.LCFI16:
 567              		.cfi_def_cfa_offset 16
 568 0360 00AF     		add	r7, sp, #0
 569              	.LCFI17:
 570              		.cfi_def_cfa_register 7
 571 0362 7860     		str	r0, [r7, #4]
 572 0364 0B46     		mov	r3, r1
 573 0366 FB70     		strb	r3, [r7, #3]
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 574              		.loc 1 414 0
 575 0368 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 576 036a 002B     		cmp	r3, #0
 577 036c 08D0     		beq	.L24
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 578              		.loc 1 417 0
 579 036e 7B68     		ldr	r3, [r7, #4]
 580 0370 9B89     		ldrh	r3, [r3, #12]	@ movhi
 581 0372 9BB2     		uxth	r3, r3
 582 0374 43F40053 		orr	r3, r3, #8192
 583 0378 9AB2     		uxth	r2, r3
 584 037a 7B68     		ldr	r3, [r7, #4]
 585 037c 9A81     		strh	r2, [r3, #12]	@ movhi
 586 037e 07E0     		b	.L23
 587              	.L24:
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 588              		.loc 1 422 0
 589 0380 7B68     		ldr	r3, [r7, #4]
 590 0382 9B89     		ldrh	r3, [r3, #12]	@ movhi
 591 0384 9BB2     		uxth	r3, r3
 592 0386 23F40053 		bic	r3, r3, #8192
 593 038a 9AB2     		uxth	r2, r3
 594 038c 7B68     		ldr	r3, [r7, #4]
 595 038e 9A81     		strh	r2, [r3, #12]	@ movhi
 596              	.L23:
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 597              		.loc 1 424 0
 598 0390 07F10C07 		add	r7, r7, #12
 599 0394 BD46     		mov	sp, r7
 600 0396 80BC     		pop	{r7}
 601 0398 7047     		bx	lr
 602              		.cfi_endproc
 603              	.LFE115:
 605 039a 00BF     		.align	2
 606              		.global	USART_SetPrescaler
 607              		.thumb
 608              		.thumb_func
 610              	USART_SetPrescaler:
 611              	.LFB116:
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 612              		.loc 1 435 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 8
 615              		@ frame_needed = 1, uses_anonymous_args = 0
 616              		@ link register save eliminated.
 617 039c 80B4     		push	{r7}
 618              	.LCFI18:
 619              		.cfi_def_cfa_offset 4
 620              		.cfi_offset 7, -4
 621 039e 83B0     		sub	sp, sp, #12
 622              	.LCFI19:
 623              		.cfi_def_cfa_offset 16
 624 03a0 00AF     		add	r7, sp, #0
 625              	.LCFI20:
 626              		.cfi_def_cfa_register 7
 627 03a2 7860     		str	r0, [r7, #4]
 628 03a4 0B46     		mov	r3, r1
 629 03a6 FB70     		strb	r3, [r7, #3]
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 630              		.loc 1 440 0
 631 03a8 7B68     		ldr	r3, [r7, #4]
 632 03aa 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 633 03ac 9BB2     		uxth	r3, r3
 634 03ae 23F0FF03 		bic	r3, r3, #255
 635 03b2 9AB2     		uxth	r2, r3
 636 03b4 7B68     		ldr	r3, [r7, #4]
 637 03b6 1A83     		strh	r2, [r3, #24]	@ movhi
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 638              		.loc 1 442 0
 639 03b8 7B68     		ldr	r3, [r7, #4]
 640 03ba 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 641 03bc 9AB2     		uxth	r2, r3
 642 03be FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 643 03c0 9BB2     		uxth	r3, r3
 644 03c2 1343     		orrs	r3, r3, r2
 645 03c4 9AB2     		uxth	r2, r3
 646 03c6 7B68     		ldr	r3, [r7, #4]
 647 03c8 1A83     		strh	r2, [r3, #24]	@ movhi
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 648              		.loc 1 443 0
 649 03ca 07F10C07 		add	r7, r7, #12
 650 03ce BD46     		mov	sp, r7
 651 03d0 80BC     		pop	{r7}
 652 03d2 7047     		bx	lr
 653              		.cfi_endproc
 654              	.LFE116:
 656              		.align	2
 657              		.global	USART_OverSampling8Cmd
 658              		.thumb
 659              		.thumb_func
 661              	USART_OverSampling8Cmd:
 662              	.LFB117:
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 663              		.loc 1 456 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 8
 666              		@ frame_needed = 1, uses_anonymous_args = 0
 667              		@ link register save eliminated.
 668 03d4 80B4     		push	{r7}
 669              	.LCFI21:
 670              		.cfi_def_cfa_offset 4
 671              		.cfi_offset 7, -4
 672 03d6 83B0     		sub	sp, sp, #12
 673              	.LCFI22:
 674              		.cfi_def_cfa_offset 16
 675 03d8 00AF     		add	r7, sp, #0
 676              	.LCFI23:
 677              		.cfi_def_cfa_register 7
 678 03da 7860     		str	r0, [r7, #4]
 679 03dc 0B46     		mov	r3, r1
 680 03de FB70     		strb	r3, [r7, #3]
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 681              		.loc 1 461 0
 682 03e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 683 03e2 002B     		cmp	r3, #0
 684 03e4 0AD0     		beq	.L28
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 685              		.loc 1 464 0
 686 03e6 7B68     		ldr	r3, [r7, #4]
 687 03e8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 688 03ea 9BB2     		uxth	r3, r3
 689 03ec 6FEA4343 		mvn	r3, r3, lsl #17
 690 03f0 6FEA5343 		mvn	r3, r3, lsr #17
 691 03f4 9AB2     		uxth	r2, r3
 692 03f6 7B68     		ldr	r3, [r7, #4]
 693 03f8 9A81     		strh	r2, [r3, #12]	@ movhi
 694 03fa 09E0     		b	.L27
 695              	.L28:
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 696              		.loc 1 469 0
 697 03fc 7B68     		ldr	r3, [r7, #4]
 698 03fe 9B89     		ldrh	r3, [r3, #12]	@ movhi
 699 0400 9BB2     		uxth	r3, r3
 700 0402 4FEA4343 		lsl	r3, r3, #17
 701 0406 4FEA5343 		lsr	r3, r3, #17
 702 040a 9AB2     		uxth	r2, r3
 703 040c 7B68     		ldr	r3, [r7, #4]
 704 040e 9A81     		strh	r2, [r3, #12]	@ movhi
 705              	.L27:
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 706              		.loc 1 471 0
 707 0410 07F10C07 		add	r7, r7, #12
 708 0414 BD46     		mov	sp, r7
 709 0416 80BC     		pop	{r7}
 710 0418 7047     		bx	lr
 711              		.cfi_endproc
 712              	.LFE117:
 714 041a 00BF     		.align	2
 715              		.global	USART_OneBitMethodCmd
 716              		.thumb
 717              		.thumb_func
 719              	USART_OneBitMethodCmd:
 720              	.LFB118:
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 721              		.loc 1 482 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 8
 724              		@ frame_needed = 1, uses_anonymous_args = 0
 725              		@ link register save eliminated.
 726 041c 80B4     		push	{r7}
 727              	.LCFI24:
 728              		.cfi_def_cfa_offset 4
 729              		.cfi_offset 7, -4
 730 041e 83B0     		sub	sp, sp, #12
 731              	.LCFI25:
 732              		.cfi_def_cfa_offset 16
 733 0420 00AF     		add	r7, sp, #0
 734              	.LCFI26:
 735              		.cfi_def_cfa_register 7
 736 0422 7860     		str	r0, [r7, #4]
 737 0424 0B46     		mov	r3, r1
 738 0426 FB70     		strb	r3, [r7, #3]
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 739              		.loc 1 487 0
 740 0428 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 741 042a 002B     		cmp	r3, #0
 742 042c 08D0     		beq	.L31
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 743              		.loc 1 490 0
 744 042e 7B68     		ldr	r3, [r7, #4]
 745 0430 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 746 0432 9BB2     		uxth	r3, r3
 747 0434 43F40063 		orr	r3, r3, #2048
 748 0438 9AB2     		uxth	r2, r3
 749 043a 7B68     		ldr	r3, [r7, #4]
 750 043c 9A82     		strh	r2, [r3, #20]	@ movhi
 751 043e 07E0     		b	.L30
 752              	.L31:
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 753              		.loc 1 495 0
 754 0440 7B68     		ldr	r3, [r7, #4]
 755 0442 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 756 0444 9BB2     		uxth	r3, r3
 757 0446 23F40063 		bic	r3, r3, #2048
 758 044a 9AB2     		uxth	r2, r3
 759 044c 7B68     		ldr	r3, [r7, #4]
 760 044e 9A82     		strh	r2, [r3, #20]	@ movhi
 761              	.L30:
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 762              		.loc 1 497 0
 763 0450 07F10C07 		add	r7, r7, #12
 764 0454 BD46     		mov	sp, r7
 765 0456 80BC     		pop	{r7}
 766 0458 7047     		bx	lr
 767              		.cfi_endproc
 768              	.LFE118:
 770 045a 00BF     		.align	2
 771              		.global	USART_SendData
 772              		.thumb
 773              		.thumb_func
 775              	USART_SendData:
 776              	.LFB119:
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 777              		.loc 1 539 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 8
 780              		@ frame_needed = 1, uses_anonymous_args = 0
 781              		@ link register save eliminated.
 782 045c 80B4     		push	{r7}
 783              	.LCFI27:
 784              		.cfi_def_cfa_offset 4
 785              		.cfi_offset 7, -4
 786 045e 83B0     		sub	sp, sp, #12
 787              	.LCFI28:
 788              		.cfi_def_cfa_offset 16
 789 0460 00AF     		add	r7, sp, #0
 790              	.LCFI29:
 791              		.cfi_def_cfa_register 7
 792 0462 7860     		str	r0, [r7, #4]
 793 0464 0B46     		mov	r3, r1
 794 0466 7B80     		strh	r3, [r7, #2]	@ movhi
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 795              		.loc 1 545 0
 796 0468 7B88     		ldrh	r3, [r7, #2]	@ movhi
 797 046a 4FEAC353 		lsl	r3, r3, #23
 798 046e 4FEAD353 		lsr	r3, r3, #23
 799 0472 9AB2     		uxth	r2, r3
 800 0474 7B68     		ldr	r3, [r7, #4]
 801 0476 9A80     		strh	r2, [r3, #4]	@ movhi
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 802              		.loc 1 546 0
 803 0478 07F10C07 		add	r7, r7, #12
 804 047c BD46     		mov	sp, r7
 805 047e 80BC     		pop	{r7}
 806 0480 7047     		bx	lr
 807              		.cfi_endproc
 808              	.LFE119:
 810 0482 00BF     		.align	2
 811              		.global	USART_ReceiveData
 812              		.thumb
 813              		.thumb_func
 815              	USART_ReceiveData:
 816              	.LFB120:
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 817              		.loc 1 555 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 8
 820              		@ frame_needed = 1, uses_anonymous_args = 0
 821              		@ link register save eliminated.
 822 0484 80B4     		push	{r7}
 823              	.LCFI30:
 824              		.cfi_def_cfa_offset 4
 825              		.cfi_offset 7, -4
 826 0486 83B0     		sub	sp, sp, #12
 827              	.LCFI31:
 828              		.cfi_def_cfa_offset 16
 829 0488 00AF     		add	r7, sp, #0
 830              	.LCFI32:
 831              		.cfi_def_cfa_register 7
 832 048a 7860     		str	r0, [r7, #4]
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 833              		.loc 1 560 0
 834 048c 7B68     		ldr	r3, [r7, #4]
 835 048e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 836 0490 9BB2     		uxth	r3, r3
 837 0492 4FEAC353 		lsl	r3, r3, #23
 838 0496 4FEAD353 		lsr	r3, r3, #23
 839 049a 9BB2     		uxth	r3, r3
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 840              		.loc 1 561 0
 841 049c 1846     		mov	r0, r3
 842 049e 07F10C07 		add	r7, r7, #12
 843 04a2 BD46     		mov	sp, r7
 844 04a4 80BC     		pop	{r7}
 845 04a6 7047     		bx	lr
 846              		.cfi_endproc
 847              	.LFE120:
 849              		.align	2
 850              		.global	USART_SetAddress
 851              		.thumb
 852              		.thumb_func
 854              	USART_SetAddress:
 855              	.LFB121:
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 856              		.loc 1 606 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 8
 859              		@ frame_needed = 1, uses_anonymous_args = 0
 860              		@ link register save eliminated.
 861 04a8 80B4     		push	{r7}
 862              	.LCFI33:
 863              		.cfi_def_cfa_offset 4
 864              		.cfi_offset 7, -4
 865 04aa 83B0     		sub	sp, sp, #12
 866              	.LCFI34:
 867              		.cfi_def_cfa_offset 16
 868 04ac 00AF     		add	r7, sp, #0
 869              	.LCFI35:
 870              		.cfi_def_cfa_register 7
 871 04ae 7860     		str	r0, [r7, #4]
 872 04b0 0B46     		mov	r3, r1
 873 04b2 FB70     		strb	r3, [r7, #3]
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 874              		.loc 1 612 0
 875 04b4 7B68     		ldr	r3, [r7, #4]
 876 04b6 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 877 04b8 9BB2     		uxth	r3, r3
 878 04ba 23F00F03 		bic	r3, r3, #15
 879 04be 9AB2     		uxth	r2, r3
 880 04c0 7B68     		ldr	r3, [r7, #4]
 881 04c2 1A82     		strh	r2, [r3, #16]	@ movhi
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 882              		.loc 1 614 0
 883 04c4 7B68     		ldr	r3, [r7, #4]
 884 04c6 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 885 04c8 9AB2     		uxth	r2, r3
 886 04ca FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 887 04cc 9BB2     		uxth	r3, r3
 888 04ce 1343     		orrs	r3, r3, r2
 889 04d0 9AB2     		uxth	r2, r3
 890 04d2 7B68     		ldr	r3, [r7, #4]
 891 04d4 1A82     		strh	r2, [r3, #16]	@ movhi
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 892              		.loc 1 615 0
 893 04d6 07F10C07 		add	r7, r7, #12
 894 04da BD46     		mov	sp, r7
 895 04dc 80BC     		pop	{r7}
 896 04de 7047     		bx	lr
 897              		.cfi_endproc
 898              	.LFE121:
 900              		.align	2
 901              		.global	USART_ReceiverWakeUpCmd
 902              		.thumb
 903              		.thumb_func
 905              	USART_ReceiverWakeUpCmd:
 906              	.LFB122:
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 907              		.loc 1 626 0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 8
 910              		@ frame_needed = 1, uses_anonymous_args = 0
 911              		@ link register save eliminated.
 912 04e0 80B4     		push	{r7}
 913              	.LCFI36:
 914              		.cfi_def_cfa_offset 4
 915              		.cfi_offset 7, -4
 916 04e2 83B0     		sub	sp, sp, #12
 917              	.LCFI37:
 918              		.cfi_def_cfa_offset 16
 919 04e4 00AF     		add	r7, sp, #0
 920              	.LCFI38:
 921              		.cfi_def_cfa_register 7
 922 04e6 7860     		str	r0, [r7, #4]
 923 04e8 0B46     		mov	r3, r1
 924 04ea FB70     		strb	r3, [r7, #3]
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 925              		.loc 1 631 0
 926 04ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 927 04ee 002B     		cmp	r3, #0
 928 04f0 08D0     		beq	.L38
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 929              		.loc 1 634 0
 930 04f2 7B68     		ldr	r3, [r7, #4]
 931 04f4 9B89     		ldrh	r3, [r3, #12]	@ movhi
 932 04f6 9BB2     		uxth	r3, r3
 933 04f8 43F00203 		orr	r3, r3, #2
 934 04fc 9AB2     		uxth	r2, r3
 935 04fe 7B68     		ldr	r3, [r7, #4]
 936 0500 9A81     		strh	r2, [r3, #12]	@ movhi
 937 0502 07E0     		b	.L37
 938              	.L38:
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 939              		.loc 1 639 0
 940 0504 7B68     		ldr	r3, [r7, #4]
 941 0506 9B89     		ldrh	r3, [r3, #12]	@ movhi
 942 0508 9BB2     		uxth	r3, r3
 943 050a 23F00203 		bic	r3, r3, #2
 944 050e 9AB2     		uxth	r2, r3
 945 0510 7B68     		ldr	r3, [r7, #4]
 946 0512 9A81     		strh	r2, [r3, #12]	@ movhi
 947              	.L37:
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 948              		.loc 1 641 0
 949 0514 07F10C07 		add	r7, r7, #12
 950 0518 BD46     		mov	sp, r7
 951 051a 80BC     		pop	{r7}
 952 051c 7047     		bx	lr
 953              		.cfi_endproc
 954              	.LFE122:
 956 051e 00BF     		.align	2
 957              		.global	USART_WakeUpConfig
 958              		.thumb
 959              		.thumb_func
 961              	USART_WakeUpConfig:
 962              	.LFB123:
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 963              		.loc 1 653 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 8
 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967              		@ link register save eliminated.
 968 0520 80B4     		push	{r7}
 969              	.LCFI39:
 970              		.cfi_def_cfa_offset 4
 971              		.cfi_offset 7, -4
 972 0522 83B0     		sub	sp, sp, #12
 973              	.LCFI40:
 974              		.cfi_def_cfa_offset 16
 975 0524 00AF     		add	r7, sp, #0
 976              	.LCFI41:
 977              		.cfi_def_cfa_register 7
 978 0526 7860     		str	r0, [r7, #4]
 979 0528 0B46     		mov	r3, r1
 980 052a 7B80     		strh	r3, [r7, #2]	@ movhi
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 981              		.loc 1 658 0
 982 052c 7B68     		ldr	r3, [r7, #4]
 983 052e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 984 0530 9BB2     		uxth	r3, r3
 985 0532 23F40063 		bic	r3, r3, #2048
 986 0536 9AB2     		uxth	r2, r3
 987 0538 7B68     		ldr	r3, [r7, #4]
 988 053a 9A81     		strh	r2, [r3, #12]	@ movhi
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 989              		.loc 1 659 0
 990 053c 7B68     		ldr	r3, [r7, #4]
 991 053e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 992 0540 9AB2     		uxth	r2, r3
 993 0542 7B88     		ldrh	r3, [r7, #2]	@ movhi
 994 0544 1343     		orrs	r3, r3, r2
 995 0546 9AB2     		uxth	r2, r3
 996 0548 7B68     		ldr	r3, [r7, #4]
 997 054a 9A81     		strh	r2, [r3, #12]	@ movhi
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 998              		.loc 1 660 0
 999 054c 07F10C07 		add	r7, r7, #12
 1000 0550 BD46     		mov	sp, r7
 1001 0552 80BC     		pop	{r7}
 1002 0554 7047     		bx	lr
 1003              		.cfi_endproc
 1004              	.LFE123:
 1006 0556 00BF     		.align	2
 1007              		.global	USART_LINBreakDetectLengthConfig
 1008              		.thumb
 1009              		.thumb_func
 1011              	USART_LINBreakDetectLengthConfig:
 1012              	.LFB124:
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1013              		.loc 1 722 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 8
 1016              		@ frame_needed = 1, uses_anonymous_args = 0
 1017              		@ link register save eliminated.
 1018 0558 80B4     		push	{r7}
 1019              	.LCFI42:
 1020              		.cfi_def_cfa_offset 4
 1021              		.cfi_offset 7, -4
 1022 055a 83B0     		sub	sp, sp, #12
 1023              	.LCFI43:
 1024              		.cfi_def_cfa_offset 16
 1025 055c 00AF     		add	r7, sp, #0
 1026              	.LCFI44:
 1027              		.cfi_def_cfa_register 7
 1028 055e 7860     		str	r0, [r7, #4]
 1029 0560 0B46     		mov	r3, r1
 1030 0562 7B80     		strh	r3, [r7, #2]	@ movhi
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 1031              		.loc 1 727 0
 1032 0564 7B68     		ldr	r3, [r7, #4]
 1033 0566 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1034 0568 9BB2     		uxth	r3, r3
 1035 056a 23F02003 		bic	r3, r3, #32
 1036 056e 9AB2     		uxth	r2, r3
 1037 0570 7B68     		ldr	r3, [r7, #4]
 1038 0572 1A82     		strh	r2, [r3, #16]	@ movhi
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1039              		.loc 1 728 0
 1040 0574 7B68     		ldr	r3, [r7, #4]
 1041 0576 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1042 0578 9AB2     		uxth	r2, r3
 1043 057a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1044 057c 1343     		orrs	r3, r3, r2
 1045 057e 9AB2     		uxth	r2, r3
 1046 0580 7B68     		ldr	r3, [r7, #4]
 1047 0582 1A82     		strh	r2, [r3, #16]	@ movhi
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1048              		.loc 1 729 0
 1049 0584 07F10C07 		add	r7, r7, #12
 1050 0588 BD46     		mov	sp, r7
 1051 058a 80BC     		pop	{r7}
 1052 058c 7047     		bx	lr
 1053              		.cfi_endproc
 1054              	.LFE124:
 1056 058e 00BF     		.align	2
 1057              		.global	USART_LINCmd
 1058              		.thumb
 1059              		.thumb_func
 1061              	USART_LINCmd:
 1062              	.LFB125:
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1063              		.loc 1 740 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 8
 1066              		@ frame_needed = 1, uses_anonymous_args = 0
 1067              		@ link register save eliminated.
 1068 0590 80B4     		push	{r7}
 1069              	.LCFI45:
 1070              		.cfi_def_cfa_offset 4
 1071              		.cfi_offset 7, -4
 1072 0592 83B0     		sub	sp, sp, #12
 1073              	.LCFI46:
 1074              		.cfi_def_cfa_offset 16
 1075 0594 00AF     		add	r7, sp, #0
 1076              	.LCFI47:
 1077              		.cfi_def_cfa_register 7
 1078 0596 7860     		str	r0, [r7, #4]
 1079 0598 0B46     		mov	r3, r1
 1080 059a FB70     		strb	r3, [r7, #3]
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1081              		.loc 1 745 0
 1082 059c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1083 059e 002B     		cmp	r3, #0
 1084 05a0 08D0     		beq	.L43
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1085              		.loc 1 748 0
 1086 05a2 7B68     		ldr	r3, [r7, #4]
 1087 05a4 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1088 05a6 9BB2     		uxth	r3, r3
 1089 05a8 43F48043 		orr	r3, r3, #16384
 1090 05ac 9AB2     		uxth	r2, r3
 1091 05ae 7B68     		ldr	r3, [r7, #4]
 1092 05b0 1A82     		strh	r2, [r3, #16]	@ movhi
 1093 05b2 07E0     		b	.L42
 1094              	.L43:
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 1095              		.loc 1 753 0
 1096 05b4 7B68     		ldr	r3, [r7, #4]
 1097 05b6 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1098 05b8 9BB2     		uxth	r3, r3
 1099 05ba 23F48043 		bic	r3, r3, #16384
 1100 05be 9AB2     		uxth	r2, r3
 1101 05c0 7B68     		ldr	r3, [r7, #4]
 1102 05c2 1A82     		strh	r2, [r3, #16]	@ movhi
 1103              	.L42:
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1104              		.loc 1 755 0
 1105 05c4 07F10C07 		add	r7, r7, #12
 1106 05c8 BD46     		mov	sp, r7
 1107 05ca 80BC     		pop	{r7}
 1108 05cc 7047     		bx	lr
 1109              		.cfi_endproc
 1110              	.LFE125:
 1112 05ce 00BF     		.align	2
 1113              		.global	USART_SendBreak
 1114              		.thumb
 1115              		.thumb_func
 1117              	USART_SendBreak:
 1118              	.LFB126:
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1119              		.loc 1 764 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 8
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123              		@ link register save eliminated.
 1124 05d0 80B4     		push	{r7}
 1125              	.LCFI48:
 1126              		.cfi_def_cfa_offset 4
 1127              		.cfi_offset 7, -4
 1128 05d2 83B0     		sub	sp, sp, #12
 1129              	.LCFI49:
 1130              		.cfi_def_cfa_offset 16
 1131 05d4 00AF     		add	r7, sp, #0
 1132              	.LCFI50:
 1133              		.cfi_def_cfa_register 7
 1134 05d6 7860     		str	r0, [r7, #4]
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1135              		.loc 1 769 0
 1136 05d8 7B68     		ldr	r3, [r7, #4]
 1137 05da 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1138 05dc 9BB2     		uxth	r3, r3
 1139 05de 43F00103 		orr	r3, r3, #1
 1140 05e2 9AB2     		uxth	r2, r3
 1141 05e4 7B68     		ldr	r3, [r7, #4]
 1142 05e6 9A81     		strh	r2, [r3, #12]	@ movhi
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1143              		.loc 1 770 0
 1144 05e8 07F10C07 		add	r7, r7, #12
 1145 05ec BD46     		mov	sp, r7
 1146 05ee 80BC     		pop	{r7}
 1147 05f0 7047     		bx	lr
 1148              		.cfi_endproc
 1149              	.LFE126:
 1151 05f2 00BF     		.align	2
 1152              		.global	USART_HalfDuplexCmd
 1153              		.thumb
 1154              		.thumb_func
 1156              	USART_HalfDuplexCmd:
 1157              	.LFB127:
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1158              		.loc 1 817 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 8
 1161              		@ frame_needed = 1, uses_anonymous_args = 0
 1162              		@ link register save eliminated.
 1163 05f4 80B4     		push	{r7}
 1164              	.LCFI51:
 1165              		.cfi_def_cfa_offset 4
 1166              		.cfi_offset 7, -4
 1167 05f6 83B0     		sub	sp, sp, #12
 1168              	.LCFI52:
 1169              		.cfi_def_cfa_offset 16
 1170 05f8 00AF     		add	r7, sp, #0
 1171              	.LCFI53:
 1172              		.cfi_def_cfa_register 7
 1173 05fa 7860     		str	r0, [r7, #4]
 1174 05fc 0B46     		mov	r3, r1
 1175 05fe FB70     		strb	r3, [r7, #3]
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1176              		.loc 1 822 0
 1177 0600 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1178 0602 002B     		cmp	r3, #0
 1179 0604 08D0     		beq	.L47
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1180              		.loc 1 825 0
 1181 0606 7B68     		ldr	r3, [r7, #4]
 1182 0608 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1183 060a 9BB2     		uxth	r3, r3
 1184 060c 43F00803 		orr	r3, r3, #8
 1185 0610 9AB2     		uxth	r2, r3
 1186 0612 7B68     		ldr	r3, [r7, #4]
 1187 0614 9A82     		strh	r2, [r3, #20]	@ movhi
 1188 0616 07E0     		b	.L46
 1189              	.L47:
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 1190              		.loc 1 830 0
 1191 0618 7B68     		ldr	r3, [r7, #4]
 1192 061a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1193 061c 9BB2     		uxth	r3, r3
 1194 061e 23F00803 		bic	r3, r3, #8
 1195 0622 9AB2     		uxth	r2, r3
 1196 0624 7B68     		ldr	r3, [r7, #4]
 1197 0626 9A82     		strh	r2, [r3, #20]	@ movhi
 1198              	.L46:
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1199              		.loc 1 832 0
 1200 0628 07F10C07 		add	r7, r7, #12
 1201 062c BD46     		mov	sp, r7
 1202 062e 80BC     		pop	{r7}
 1203 0630 7047     		bx	lr
 1204              		.cfi_endproc
 1205              	.LFE127:
 1207 0632 00BF     		.align	2
 1208              		.global	USART_SetGuardTime
 1209              		.thumb
 1210              		.thumb_func
 1212              	USART_SetGuardTime:
 1213              	.LFB128:
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 1214              		.loc 1 902 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 8
 1217              		@ frame_needed = 1, uses_anonymous_args = 0
 1218              		@ link register save eliminated.
 1219 0634 80B4     		push	{r7}
 1220              	.LCFI54:
 1221              		.cfi_def_cfa_offset 4
 1222              		.cfi_offset 7, -4
 1223 0636 83B0     		sub	sp, sp, #12
 1224              	.LCFI55:
 1225              		.cfi_def_cfa_offset 16
 1226 0638 00AF     		add	r7, sp, #0
 1227              	.LCFI56:
 1228              		.cfi_def_cfa_register 7
 1229 063a 7860     		str	r0, [r7, #4]
 1230 063c 0B46     		mov	r3, r1
 1231 063e FB70     		strb	r3, [r7, #3]
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1232              		.loc 1 907 0
 1233 0640 7B68     		ldr	r3, [r7, #4]
 1234 0642 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1235 0644 9BB2     		uxth	r3, r3
 1236 0646 DBB2     		uxtb	r3, r3
 1237 0648 9AB2     		uxth	r2, r3
 1238 064a 7B68     		ldr	r3, [r7, #4]
 1239 064c 1A83     		strh	r2, [r3, #24]	@ movhi
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1240              		.loc 1 909 0
 1241 064e 7B68     		ldr	r3, [r7, #4]
 1242 0650 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1243 0652 9AB2     		uxth	r2, r3
 1244 0654 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1245 0656 9BB2     		uxth	r3, r3
 1246 0658 4FEA0323 		lsl	r3, r3, #8
 1247 065c 9BB2     		uxth	r3, r3
 1248 065e 1343     		orrs	r3, r3, r2
 1249 0660 9AB2     		uxth	r2, r3
 1250 0662 7B68     		ldr	r3, [r7, #4]
 1251 0664 1A83     		strh	r2, [r3, #24]	@ movhi
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1252              		.loc 1 910 0
 1253 0666 07F10C07 		add	r7, r7, #12
 1254 066a BD46     		mov	sp, r7
 1255 066c 80BC     		pop	{r7}
 1256 066e 7047     		bx	lr
 1257              		.cfi_endproc
 1258              	.LFE128:
 1260              		.align	2
 1261              		.global	USART_SmartCardCmd
 1262              		.thumb
 1263              		.thumb_func
 1265              	USART_SmartCardCmd:
 1266              	.LFB129:
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1267              		.loc 1 921 0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 8
 1270              		@ frame_needed = 1, uses_anonymous_args = 0
 1271              		@ link register save eliminated.
 1272 0670 80B4     		push	{r7}
 1273              	.LCFI57:
 1274              		.cfi_def_cfa_offset 4
 1275              		.cfi_offset 7, -4
 1276 0672 83B0     		sub	sp, sp, #12
 1277              	.LCFI58:
 1278              		.cfi_def_cfa_offset 16
 1279 0674 00AF     		add	r7, sp, #0
 1280              	.LCFI59:
 1281              		.cfi_def_cfa_register 7
 1282 0676 7860     		str	r0, [r7, #4]
 1283 0678 0B46     		mov	r3, r1
 1284 067a FB70     		strb	r3, [r7, #3]
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1285              		.loc 1 925 0
 1286 067c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1287 067e 002B     		cmp	r3, #0
 1288 0680 08D0     		beq	.L51
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1289              		.loc 1 928 0
 1290 0682 7B68     		ldr	r3, [r7, #4]
 1291 0684 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1292 0686 9BB2     		uxth	r3, r3
 1293 0688 43F02003 		orr	r3, r3, #32
 1294 068c 9AB2     		uxth	r2, r3
 1295 068e 7B68     		ldr	r3, [r7, #4]
 1296 0690 9A82     		strh	r2, [r3, #20]	@ movhi
 1297 0692 07E0     		b	.L50
 1298              	.L51:
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 1299              		.loc 1 933 0
 1300 0694 7B68     		ldr	r3, [r7, #4]
 1301 0696 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1302 0698 9BB2     		uxth	r3, r3
 1303 069a 23F02003 		bic	r3, r3, #32
 1304 069e 9AB2     		uxth	r2, r3
 1305 06a0 7B68     		ldr	r3, [r7, #4]
 1306 06a2 9A82     		strh	r2, [r3, #20]	@ movhi
 1307              	.L50:
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1308              		.loc 1 935 0
 1309 06a4 07F10C07 		add	r7, r7, #12
 1310 06a8 BD46     		mov	sp, r7
 1311 06aa 80BC     		pop	{r7}
 1312 06ac 7047     		bx	lr
 1313              		.cfi_endproc
 1314              	.LFE129:
 1316 06ae 00BF     		.align	2
 1317              		.global	USART_SmartCardNACKCmd
 1318              		.thumb
 1319              		.thumb_func
 1321              	USART_SmartCardNACKCmd:
 1322              	.LFB130:
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1323              		.loc 1 946 0
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 8
 1326              		@ frame_needed = 1, uses_anonymous_args = 0
 1327              		@ link register save eliminated.
 1328 06b0 80B4     		push	{r7}
 1329              	.LCFI60:
 1330              		.cfi_def_cfa_offset 4
 1331              		.cfi_offset 7, -4
 1332 06b2 83B0     		sub	sp, sp, #12
 1333              	.LCFI61:
 1334              		.cfi_def_cfa_offset 16
 1335 06b4 00AF     		add	r7, sp, #0
 1336              	.LCFI62:
 1337              		.cfi_def_cfa_register 7
 1338 06b6 7860     		str	r0, [r7, #4]
 1339 06b8 0B46     		mov	r3, r1
 1340 06ba FB70     		strb	r3, [r7, #3]
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1341              		.loc 1 950 0
 1342 06bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1343 06be 002B     		cmp	r3, #0
 1344 06c0 08D0     		beq	.L54
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1345              		.loc 1 953 0
 1346 06c2 7B68     		ldr	r3, [r7, #4]
 1347 06c4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1348 06c6 9BB2     		uxth	r3, r3
 1349 06c8 43F01003 		orr	r3, r3, #16
 1350 06cc 9AB2     		uxth	r2, r3
 1351 06ce 7B68     		ldr	r3, [r7, #4]
 1352 06d0 9A82     		strh	r2, [r3, #20]	@ movhi
 1353 06d2 07E0     		b	.L53
 1354              	.L54:
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 1355              		.loc 1 958 0
 1356 06d4 7B68     		ldr	r3, [r7, #4]
 1357 06d6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1358 06d8 9BB2     		uxth	r3, r3
 1359 06da 23F01003 		bic	r3, r3, #16
 1360 06de 9AB2     		uxth	r2, r3
 1361 06e0 7B68     		ldr	r3, [r7, #4]
 1362 06e2 9A82     		strh	r2, [r3, #20]	@ movhi
 1363              	.L53:
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1364              		.loc 1 960 0
 1365 06e4 07F10C07 		add	r7, r7, #12
 1366 06e8 BD46     		mov	sp, r7
 1367 06ea 80BC     		pop	{r7}
 1368 06ec 7047     		bx	lr
 1369              		.cfi_endproc
 1370              	.LFE130:
 1372 06ee 00BF     		.align	2
 1373              		.global	USART_IrDAConfig
 1374              		.thumb
 1375              		.thumb_func
 1377              	USART_IrDAConfig:
 1378              	.LFB131:
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1379              		.loc 1 1017 0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 8
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383              		@ link register save eliminated.
 1384 06f0 80B4     		push	{r7}
 1385              	.LCFI63:
 1386              		.cfi_def_cfa_offset 4
 1387              		.cfi_offset 7, -4
 1388 06f2 83B0     		sub	sp, sp, #12
 1389              	.LCFI64:
 1390              		.cfi_def_cfa_offset 16
 1391 06f4 00AF     		add	r7, sp, #0
 1392              	.LCFI65:
 1393              		.cfi_def_cfa_register 7
 1394 06f6 7860     		str	r0, [r7, #4]
 1395 06f8 0B46     		mov	r3, r1
 1396 06fa 7B80     		strh	r3, [r7, #2]	@ movhi
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1397              		.loc 1 1022 0
 1398 06fc 7B68     		ldr	r3, [r7, #4]
 1399 06fe 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1400 0700 9BB2     		uxth	r3, r3
 1401 0702 23F00403 		bic	r3, r3, #4
 1402 0706 9AB2     		uxth	r2, r3
 1403 0708 7B68     		ldr	r3, [r7, #4]
 1404 070a 9A82     		strh	r2, [r3, #20]	@ movhi
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1405              		.loc 1 1023 0
 1406 070c 7B68     		ldr	r3, [r7, #4]
 1407 070e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1408 0710 9AB2     		uxth	r2, r3
 1409 0712 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1410 0714 1343     		orrs	r3, r3, r2
 1411 0716 9AB2     		uxth	r2, r3
 1412 0718 7B68     		ldr	r3, [r7, #4]
 1413 071a 9A82     		strh	r2, [r3, #20]	@ movhi
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1414              		.loc 1 1024 0
 1415 071c 07F10C07 		add	r7, r7, #12
 1416 0720 BD46     		mov	sp, r7
 1417 0722 80BC     		pop	{r7}
 1418 0724 7047     		bx	lr
 1419              		.cfi_endproc
 1420              	.LFE131:
 1422 0726 00BF     		.align	2
 1423              		.global	USART_IrDACmd
 1424              		.thumb
 1425              		.thumb_func
 1427              	USART_IrDACmd:
 1428              	.LFB132:
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1429              		.loc 1 1035 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 8
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433              		@ link register save eliminated.
 1434 0728 80B4     		push	{r7}
 1435              	.LCFI66:
 1436              		.cfi_def_cfa_offset 4
 1437              		.cfi_offset 7, -4
 1438 072a 83B0     		sub	sp, sp, #12
 1439              	.LCFI67:
 1440              		.cfi_def_cfa_offset 16
 1441 072c 00AF     		add	r7, sp, #0
 1442              	.LCFI68:
 1443              		.cfi_def_cfa_register 7
 1444 072e 7860     		str	r0, [r7, #4]
 1445 0730 0B46     		mov	r3, r1
 1446 0732 FB70     		strb	r3, [r7, #3]
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1447              		.loc 1 1040 0
 1448 0734 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1449 0736 002B     		cmp	r3, #0
 1450 0738 08D0     		beq	.L58
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1451              		.loc 1 1043 0
 1452 073a 7B68     		ldr	r3, [r7, #4]
 1453 073c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1454 073e 9BB2     		uxth	r3, r3
 1455 0740 43F00203 		orr	r3, r3, #2
 1456 0744 9AB2     		uxth	r2, r3
 1457 0746 7B68     		ldr	r3, [r7, #4]
 1458 0748 9A82     		strh	r2, [r3, #20]	@ movhi
 1459 074a 07E0     		b	.L57
 1460              	.L58:
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1461              		.loc 1 1048 0
 1462 074c 7B68     		ldr	r3, [r7, #4]
 1463 074e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1464 0750 9BB2     		uxth	r3, r3
 1465 0752 23F00203 		bic	r3, r3, #2
 1466 0756 9AB2     		uxth	r2, r3
 1467 0758 7B68     		ldr	r3, [r7, #4]
 1468 075a 9A82     		strh	r2, [r3, #20]	@ movhi
 1469              	.L57:
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1470              		.loc 1 1050 0
 1471 075c 07F10C07 		add	r7, r7, #12
 1472 0760 BD46     		mov	sp, r7
 1473 0762 80BC     		pop	{r7}
 1474 0764 7047     		bx	lr
 1475              		.cfi_endproc
 1476              	.LFE132:
 1478 0766 00BF     		.align	2
 1479              		.global	USART_DMACmd
 1480              		.thumb
 1481              		.thumb_func
 1483              	USART_DMACmd:
 1484              	.LFB133:
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1485              		.loc 1 1081 0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 8
 1488              		@ frame_needed = 1, uses_anonymous_args = 0
 1489              		@ link register save eliminated.
 1490 0768 80B4     		push	{r7}
 1491              	.LCFI69:
 1492              		.cfi_def_cfa_offset 4
 1493              		.cfi_offset 7, -4
 1494 076a 83B0     		sub	sp, sp, #12
 1495              	.LCFI70:
 1496              		.cfi_def_cfa_offset 16
 1497 076c 00AF     		add	r7, sp, #0
 1498              	.LCFI71:
 1499              		.cfi_def_cfa_register 7
 1500 076e 7860     		str	r0, [r7, #4]
 1501 0770 1346     		mov	r3, r2
 1502 0772 0A46     		mov	r2, r1	@ movhi
 1503 0774 7A80     		strh	r2, [r7, #2]	@ movhi
 1504 0776 7B70     		strb	r3, [r7, #1]
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1505              		.loc 1 1087 0
 1506 0778 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1507 077a 002B     		cmp	r3, #0
 1508 077c 08D0     		beq	.L61
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1509              		.loc 1 1091 0
 1510 077e 7B68     		ldr	r3, [r7, #4]
 1511 0780 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1512 0782 9AB2     		uxth	r2, r3
 1513 0784 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1514 0786 1343     		orrs	r3, r3, r2
 1515 0788 9AB2     		uxth	r2, r3
 1516 078a 7B68     		ldr	r3, [r7, #4]
 1517 078c 9A82     		strh	r2, [r3, #20]	@ movhi
 1518 078e 0AE0     		b	.L60
 1519              	.L61:
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1520              		.loc 1 1097 0
 1521 0790 7B68     		ldr	r3, [r7, #4]
 1522 0792 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1523 0794 9AB2     		uxth	r2, r3
 1524 0796 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1525 0798 6FEA0303 		mvn	r3, r3
 1526 079c 9BB2     		uxth	r3, r3
 1527 079e 1340     		ands	r3, r3, r2
 1528 07a0 9AB2     		uxth	r2, r3
 1529 07a2 7B68     		ldr	r3, [r7, #4]
 1530 07a4 9A82     		strh	r2, [r3, #20]	@ movhi
 1531              	.L60:
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1532              		.loc 1 1099 0
 1533 07a6 07F10C07 		add	r7, r7, #12
 1534 07aa BD46     		mov	sp, r7
 1535 07ac 80BC     		pop	{r7}
 1536 07ae 7047     		bx	lr
 1537              		.cfi_endproc
 1538              	.LFE133:
 1540              		.align	2
 1541              		.global	USART_ITConfig
 1542              		.thumb
 1543              		.thumb_func
 1545              	USART_ITConfig:
 1546              	.LFB134:
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1547              		.loc 1 1209 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 24
 1550              		@ frame_needed = 1, uses_anonymous_args = 0
 1551              		@ link register save eliminated.
 1552 07b0 80B4     		push	{r7}
 1553              	.LCFI72:
 1554              		.cfi_def_cfa_offset 4
 1555              		.cfi_offset 7, -4
 1556 07b2 87B0     		sub	sp, sp, #28
 1557              	.LCFI73:
 1558              		.cfi_def_cfa_offset 32
 1559 07b4 00AF     		add	r7, sp, #0
 1560              	.LCFI74:
 1561              		.cfi_def_cfa_register 7
 1562 07b6 7860     		str	r0, [r7, #4]
 1563 07b8 1346     		mov	r3, r2
 1564 07ba 0A46     		mov	r2, r1	@ movhi
 1565 07bc 7A80     		strh	r2, [r7, #2]	@ movhi
 1566 07be 7B70     		strb	r3, [r7, #1]
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 1567              		.loc 1 1210 0
 1568 07c0 4FF00003 		mov	r3, #0
 1569 07c4 3B61     		str	r3, [r7, #16]
 1570 07c6 4FF00003 		mov	r3, #0
 1571 07ca FB60     		str	r3, [r7, #12]
 1572 07cc 4FF00003 		mov	r3, #0
 1573 07d0 BB60     		str	r3, [r7, #8]
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 1574              		.loc 1 1211 0
 1575 07d2 4FF00003 		mov	r3, #0
 1576 07d6 7B61     		str	r3, [r7, #20]
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 1577              		.loc 1 1223 0
 1578 07d8 7B68     		ldr	r3, [r7, #4]
 1579 07da 7B61     		str	r3, [r7, #20]
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1580              		.loc 1 1226 0
 1581 07dc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1582 07de DBB2     		uxtb	r3, r3
 1583 07e0 4FEA5313 		lsr	r3, r3, #5
 1584 07e4 DBB2     		uxtb	r3, r3
 1585 07e6 3B61     		str	r3, [r7, #16]
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1586              		.loc 1 1229 0
 1587 07e8 7B88     		ldrh	r3, [r7, #2]
 1588 07ea 03F01F03 		and	r3, r3, #31
 1589 07ee FB60     		str	r3, [r7, #12]
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1590              		.loc 1 1230 0
 1591 07f0 FB68     		ldr	r3, [r7, #12]
 1592 07f2 4FF00102 		mov	r2, #1
 1593 07f6 02FA03F3 		lsl	r3, r2, r3
 1594 07fa BB60     		str	r3, [r7, #8]
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1595              		.loc 1 1232 0
 1596 07fc 3B69     		ldr	r3, [r7, #16]
 1597 07fe 012B     		cmp	r3, #1
 1598 0800 04D1     		bne	.L64
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1599              		.loc 1 1234 0
 1600 0802 7B69     		ldr	r3, [r7, #20]
 1601 0804 03F10C03 		add	r3, r3, #12
 1602 0808 7B61     		str	r3, [r7, #20]
 1603 080a 0BE0     		b	.L65
 1604              	.L64:
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1605              		.loc 1 1236 0
 1606 080c 3B69     		ldr	r3, [r7, #16]
 1607 080e 022B     		cmp	r3, #2
 1608 0810 04D1     		bne	.L66
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1609              		.loc 1 1238 0
 1610 0812 7B69     		ldr	r3, [r7, #20]
 1611 0814 03F11003 		add	r3, r3, #16
 1612 0818 7B61     		str	r3, [r7, #20]
 1613 081a 03E0     		b	.L65
 1614              	.L66:
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1615              		.loc 1 1242 0
 1616 081c 7B69     		ldr	r3, [r7, #20]
 1617 081e 03F11403 		add	r3, r3, #20
 1618 0822 7B61     		str	r3, [r7, #20]
 1619              	.L65:
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1620              		.loc 1 1244 0
 1621 0824 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1622 0826 002B     		cmp	r3, #0
 1623 0828 06D0     		beq	.L67
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1624              		.loc 1 1246 0
 1625 082a 7B69     		ldr	r3, [r7, #20]
 1626 082c 7A69     		ldr	r2, [r7, #20]
 1627 082e 1168     		ldr	r1, [r2, #0]
 1628 0830 BA68     		ldr	r2, [r7, #8]
 1629 0832 0A43     		orrs	r2, r2, r1
 1630 0834 1A60     		str	r2, [r3, #0]
 1631 0836 07E0     		b	.L63
 1632              	.L67:
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1633              		.loc 1 1250 0
 1634 0838 7B69     		ldr	r3, [r7, #20]
 1635 083a 7A69     		ldr	r2, [r7, #20]
 1636 083c 1168     		ldr	r1, [r2, #0]
 1637 083e BA68     		ldr	r2, [r7, #8]
 1638 0840 6FEA0202 		mvn	r2, r2
 1639 0844 0A40     		ands	r2, r2, r1
 1640 0846 1A60     		str	r2, [r3, #0]
 1641              	.L63:
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1642              		.loc 1 1252 0
 1643 0848 07F11C07 		add	r7, r7, #28
 1644 084c BD46     		mov	sp, r7
 1645 084e 80BC     		pop	{r7}
 1646 0850 7047     		bx	lr
 1647              		.cfi_endproc
 1648              	.LFE134:
 1650 0852 00BF     		.align	2
 1651              		.global	USART_GetFlagStatus
 1652              		.thumb
 1653              		.thumb_func
 1655              	USART_GetFlagStatus:
 1656              	.LFB135:
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1657              		.loc 1 1273 0
 1658              		.cfi_startproc
 1659              		@ args = 0, pretend = 0, frame = 16
 1660              		@ frame_needed = 1, uses_anonymous_args = 0
 1661              		@ link register save eliminated.
 1662 0854 80B4     		push	{r7}
 1663              	.LCFI75:
 1664              		.cfi_def_cfa_offset 4
 1665              		.cfi_offset 7, -4
 1666 0856 85B0     		sub	sp, sp, #20
 1667              	.LCFI76:
 1668              		.cfi_def_cfa_offset 24
 1669 0858 00AF     		add	r7, sp, #0
 1670              	.LCFI77:
 1671              		.cfi_def_cfa_register 7
 1672 085a 7860     		str	r0, [r7, #4]
 1673 085c 0B46     		mov	r3, r1
 1674 085e 7B80     		strh	r3, [r7, #2]	@ movhi
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 1675              		.loc 1 1274 0
 1676 0860 4FF00003 		mov	r3, #0
 1677 0864 FB73     		strb	r3, [r7, #15]
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1678              		.loc 1 1285 0
 1679 0866 7B68     		ldr	r3, [r7, #4]
 1680 0868 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1681 086a 9AB2     		uxth	r2, r3
 1682 086c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1683 086e 1340     		ands	r3, r3, r2
 1684 0870 9BB2     		uxth	r3, r3
 1685 0872 002B     		cmp	r3, #0
 1686 0874 03D0     		beq	.L70
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1687              		.loc 1 1287 0
 1688 0876 4FF00103 		mov	r3, #1
 1689 087a FB73     		strb	r3, [r7, #15]
 1690 087c 02E0     		b	.L71
 1691              	.L70:
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1692              		.loc 1 1291 0
 1693 087e 4FF00003 		mov	r3, #0
 1694 0882 FB73     		strb	r3, [r7, #15]
 1695              	.L71:
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 1696              		.loc 1 1293 0
 1697 0884 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1698              		.loc 1 1294 0
 1699 0886 1846     		mov	r0, r3
 1700 0888 07F11407 		add	r7, r7, #20
 1701 088c BD46     		mov	sp, r7
 1702 088e 80BC     		pop	{r7}
 1703 0890 7047     		bx	lr
 1704              		.cfi_endproc
 1705              	.LFE135:
 1707 0892 00BF     		.align	2
 1708              		.global	USART_ClearFlag
 1709              		.thumb
 1710              		.thumb_func
 1712              	USART_ClearFlag:
 1713              	.LFB136:
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1714              		.loc 1 1322 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 8
 1717              		@ frame_needed = 1, uses_anonymous_args = 0
 1718              		@ link register save eliminated.
 1719 0894 80B4     		push	{r7}
 1720              	.LCFI78:
 1721              		.cfi_def_cfa_offset 4
 1722              		.cfi_offset 7, -4
 1723 0896 83B0     		sub	sp, sp, #12
 1724              	.LCFI79:
 1725              		.cfi_def_cfa_offset 16
 1726 0898 00AF     		add	r7, sp, #0
 1727              	.LCFI80:
 1728              		.cfi_def_cfa_register 7
 1729 089a 7860     		str	r0, [r7, #4]
 1730 089c 0B46     		mov	r3, r1
 1731 089e 7B80     		strh	r3, [r7, #2]	@ movhi
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1732              		.loc 1 1333 0
 1733 08a0 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1734 08a2 6FEA0303 		mvn	r3, r3
 1735 08a6 9AB2     		uxth	r2, r3
 1736 08a8 7B68     		ldr	r3, [r7, #4]
 1737 08aa 1A80     		strh	r2, [r3, #0]	@ movhi
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1738              		.loc 1 1334 0
 1739 08ac 07F10C07 		add	r7, r7, #12
 1740 08b0 BD46     		mov	sp, r7
 1741 08b2 80BC     		pop	{r7}
 1742 08b4 7047     		bx	lr
 1743              		.cfi_endproc
 1744              	.LFE136:
 1746 08b6 00BF     		.align	2
 1747              		.global	USART_GetITStatus
 1748              		.thumb
 1749              		.thumb_func
 1751              	USART_GetITStatus:
 1752              	.LFB137:
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1753              		.loc 1 1356 0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 24
 1756              		@ frame_needed = 1, uses_anonymous_args = 0
 1757              		@ link register save eliminated.
 1758 08b8 80B4     		push	{r7}
 1759              	.LCFI81:
 1760              		.cfi_def_cfa_offset 4
 1761              		.cfi_offset 7, -4
 1762 08ba 87B0     		sub	sp, sp, #28
 1763              	.LCFI82:
 1764              		.cfi_def_cfa_offset 32
 1765 08bc 00AF     		add	r7, sp, #0
 1766              	.LCFI83:
 1767              		.cfi_def_cfa_register 7
 1768 08be 7860     		str	r0, [r7, #4]
 1769 08c0 0B46     		mov	r3, r1
 1770 08c2 7B80     		strh	r3, [r7, #2]	@ movhi
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1771              		.loc 1 1357 0
 1772 08c4 4FF00003 		mov	r3, #0
 1773 08c8 FB60     		str	r3, [r7, #12]
 1774 08ca 4FF00003 		mov	r3, #0
 1775 08ce 7B61     		str	r3, [r7, #20]
 1776 08d0 4FF00003 		mov	r3, #0
 1777 08d4 BB60     		str	r3, [r7, #8]
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 1778              		.loc 1 1358 0
 1779 08d6 4FF00003 		mov	r3, #0
 1780 08da FB74     		strb	r3, [r7, #19]
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1781              		.loc 1 1370 0
 1782 08dc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1783 08de DBB2     		uxtb	r3, r3
 1784 08e0 4FEA5313 		lsr	r3, r3, #5
 1785 08e4 DBB2     		uxtb	r3, r3
 1786 08e6 BB60     		str	r3, [r7, #8]
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1787              		.loc 1 1372 0
 1788 08e8 7B88     		ldrh	r3, [r7, #2]
 1789 08ea 03F01F03 		and	r3, r3, #31
 1790 08ee 7B61     		str	r3, [r7, #20]
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1791              		.loc 1 1373 0
 1792 08f0 7B69     		ldr	r3, [r7, #20]
 1793 08f2 4FF00102 		mov	r2, #1
 1794 08f6 02FA03F3 		lsl	r3, r2, r3
 1795 08fa 7B61     		str	r3, [r7, #20]
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1796              		.loc 1 1375 0
 1797 08fc BB68     		ldr	r3, [r7, #8]
 1798 08fe 012B     		cmp	r3, #1
 1799 0900 06D1     		bne	.L75
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 1800              		.loc 1 1377 0
 1801 0902 7B68     		ldr	r3, [r7, #4]
 1802 0904 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1803 0906 9BB2     		uxth	r3, r3
 1804 0908 7A69     		ldr	r2, [r7, #20]
 1805 090a 1340     		ands	r3, r3, r2
 1806 090c 7B61     		str	r3, [r7, #20]
 1807 090e 0FE0     		b	.L76
 1808              	.L75:
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1809              		.loc 1 1379 0
 1810 0910 BB68     		ldr	r3, [r7, #8]
 1811 0912 022B     		cmp	r3, #2
 1812 0914 06D1     		bne	.L77
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1813              		.loc 1 1381 0
 1814 0916 7B68     		ldr	r3, [r7, #4]
 1815 0918 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1816 091a 9BB2     		uxth	r3, r3
 1817 091c 7A69     		ldr	r2, [r7, #20]
 1818 091e 1340     		ands	r3, r3, r2
 1819 0920 7B61     		str	r3, [r7, #20]
 1820 0922 05E0     		b	.L76
 1821              	.L77:
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1822              		.loc 1 1385 0
 1823 0924 7B68     		ldr	r3, [r7, #4]
 1824 0926 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1825 0928 9BB2     		uxth	r3, r3
 1826 092a 7A69     		ldr	r2, [r7, #20]
 1827 092c 1340     		ands	r3, r3, r2
 1828 092e 7B61     		str	r3, [r7, #20]
 1829              	.L76:
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1830              		.loc 1 1388 0
 1831 0930 7B88     		ldrh	r3, [r7, #2]
 1832 0932 4FEA1323 		lsr	r3, r3, #8
 1833 0936 9BB2     		uxth	r3, r3
 1834 0938 FB60     		str	r3, [r7, #12]
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1835              		.loc 1 1389 0
 1836 093a FB68     		ldr	r3, [r7, #12]
 1837 093c 4FF00102 		mov	r2, #1
 1838 0940 02FA03F3 		lsl	r3, r2, r3
 1839 0944 FB60     		str	r3, [r7, #12]
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1840              		.loc 1 1390 0
 1841 0946 7B68     		ldr	r3, [r7, #4]
 1842 0948 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1843 094a 9BB2     		uxth	r3, r3
 1844 094c FA68     		ldr	r2, [r7, #12]
 1845 094e 1340     		ands	r3, r3, r2
 1846 0950 FB60     		str	r3, [r7, #12]
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1847              		.loc 1 1391 0
 1848 0952 7B69     		ldr	r3, [r7, #20]
 1849 0954 002B     		cmp	r3, #0
 1850 0956 06D0     		beq	.L78
 1851              		.loc 1 1391 0 is_stmt 0 discriminator 1
 1852 0958 FB68     		ldr	r3, [r7, #12]
 1853 095a 002B     		cmp	r3, #0
 1854 095c 03D0     		beq	.L78
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1855              		.loc 1 1393 0 is_stmt 1
 1856 095e 4FF00103 		mov	r3, #1
 1857 0962 FB74     		strb	r3, [r7, #19]
 1858 0964 02E0     		b	.L79
 1859              	.L78:
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1860              		.loc 1 1397 0
 1861 0966 4FF00003 		mov	r3, #0
 1862 096a FB74     		strb	r3, [r7, #19]
 1863              	.L79:
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 1864              		.loc 1 1400 0
 1865 096c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1866              		.loc 1 1401 0
 1867 096e 1846     		mov	r0, r3
 1868 0970 07F11C07 		add	r7, r7, #28
 1869 0974 BD46     		mov	sp, r7
 1870 0976 80BC     		pop	{r7}
 1871 0978 7047     		bx	lr
 1872              		.cfi_endproc
 1873              	.LFE137:
 1875 097a 00BF     		.align	2
 1876              		.global	USART_ClearITPendingBit
 1877              		.thumb
 1878              		.thumb_func
 1880              	USART_ClearITPendingBit:
 1881              	.LFB138:
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1882              		.loc 1 1430 0
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 16
 1885              		@ frame_needed = 1, uses_anonymous_args = 0
 1886              		@ link register save eliminated.
 1887 097c 80B4     		push	{r7}
 1888              	.LCFI84:
 1889              		.cfi_def_cfa_offset 4
 1890              		.cfi_offset 7, -4
 1891 097e 85B0     		sub	sp, sp, #20
 1892              	.LCFI85:
 1893              		.cfi_def_cfa_offset 24
 1894 0980 00AF     		add	r7, sp, #0
 1895              	.LCFI86:
 1896              		.cfi_def_cfa_register 7
 1897 0982 7860     		str	r0, [r7, #4]
 1898 0984 0B46     		mov	r3, r1
 1899 0986 7B80     		strh	r3, [r7, #2]	@ movhi
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 1900              		.loc 1 1431 0
 1901 0988 4FF00003 		mov	r3, #0
 1902 098c FB81     		strh	r3, [r7, #14]	@ movhi
 1903 098e 4FF00003 		mov	r3, #0
 1904 0992 BB81     		strh	r3, [r7, #12]	@ movhi
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1905              		.loc 1 1442 0
 1906 0994 7B88     		ldrh	r3, [r7, #2]
 1907 0996 4FEA1323 		lsr	r3, r3, #8
 1908 099a FB81     		strh	r3, [r7, #14]	@ movhi
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1909              		.loc 1 1443 0
 1910 099c FB89     		ldrh	r3, [r7, #14]
 1911 099e 4FF00102 		mov	r2, #1
 1912 09a2 02FA03F3 		lsl	r3, r2, r3
 1913 09a6 BB81     		strh	r3, [r7, #12]	@ movhi
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1914              		.loc 1 1444 0
 1915 09a8 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1916 09aa 6FEA0303 		mvn	r3, r3
 1917 09ae 9AB2     		uxth	r2, r3
 1918 09b0 7B68     		ldr	r3, [r7, #4]
 1919 09b2 1A80     		strh	r2, [r3, #0]	@ movhi
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1920              		.loc 1 1445 0
 1921 09b4 07F11407 		add	r7, r7, #20
 1922 09b8 BD46     		mov	sp, r7
 1923 09ba 80BC     		pop	{r7}
 1924 09bc 7047     		bx	lr
 1925              		.cfi_endproc
 1926              	.LFE138:
 1928              	.Letext0:
 1929              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 1930              		.file 3 "C:\\Users\\Gergo\\workspace\\estevan\\Libraries\\Device\\STM32F4xx\\Include/stm32f4xx.h"
 1931              		.file 4 "C:\\Users\\Gergo\\workspace\\estevan\\Libraries\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4x
 1932              		.file 5 "C:\\Users\\Gergo\\workspace\\estevan\\Libraries\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4x
 1933              		.file 6 "C:\\Users\\Gergo\\workspace\\estevan\\Libraries\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:18     .text:00000000 $t
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:23     .text:00000000 USART_DeInit
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:138    .text:000000dc $d
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:147    .text:000000f4 $t
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:152    .text:000000f4 USART_Init
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:372    .text:00000284 $d
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:378    .text:00000290 $t
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:383    .text:00000290 USART_StructInit
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:438    .text:000002d4 USART_ClockInit
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:507    .text:00000328 USART_ClockStructInit
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:554    .text:0000035c USART_Cmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:610    .text:0000039c USART_SetPrescaler
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:661    .text:000003d4 USART_OverSampling8Cmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:719    .text:0000041c USART_OneBitMethodCmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:775    .text:0000045c USART_SendData
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:815    .text:00000484 USART_ReceiveData
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:854    .text:000004a8 USART_SetAddress
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:905    .text:000004e0 USART_ReceiverWakeUpCmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:961    .text:00000520 USART_WakeUpConfig
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1011   .text:00000558 USART_LINBreakDetectLengthConfig
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1061   .text:00000590 USART_LINCmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1117   .text:000005d0 USART_SendBreak
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1156   .text:000005f4 USART_HalfDuplexCmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1212   .text:00000634 USART_SetGuardTime
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1265   .text:00000670 USART_SmartCardCmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1321   .text:000006b0 USART_SmartCardNACKCmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1377   .text:000006f0 USART_IrDAConfig
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1427   .text:00000728 USART_IrDACmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1483   .text:00000768 USART_DMACmd
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1545   .text:000007b0 USART_ITConfig
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1655   .text:00000854 USART_GetFlagStatus
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1712   .text:00000894 USART_ClearFlag
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1751   .text:000008b8 USART_GetITStatus
C:\Users\Gergo\AppData\Local\Temp\ccNJVb1U.s:1880   .text:0000097c USART_ClearITPendingBit
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.fa6ddc8087252f7ec15b7f8b8133d3d8
                           .group:00000000 wm4.stm32f4xx.h.48.0b3cda0630bac1bf9be1255cab0e1f3b
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.283.d309488c8c88fbc6a572fb5ddb72ae02
                           .group:00000000 wm4.stm32f4xx_exti.h.54.435fdeac3da378720d6c1615172f0bf3
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6967.11efd59d6a7da8b33ccb47eb4d57a5b3
                           .group:00000000 wm4.stm32f4xx_usart.h.104.14e758bb920cc835413a19eb02e177fb

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
