   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	RTC_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	RTC_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    30-September-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  26              		.loc 1 368 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 84B0     		sub	sp, sp, #16
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 24
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  41              		.loc 1 369 0
  42 0006 4FF00003 		mov	r3, #0
  43 000a 7B60     		str	r3, [r7, #4]
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  44              		.loc 1 370 0
  45 000c 4FF00003 		mov	r3, #0
  46 0010 BB60     		str	r3, [r7, #8]
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  47              		.loc 1 371 0
  48 0012 4FF00003 		mov	r3, #0
  49 0016 FB73     		strb	r3, [r7, #15]
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  50              		.loc 1 374 0
  51 0018 374B     		ldr	r3, .L9
  52 001a 4FF0CA02 		mov	r2, #202
  53 001e 5A62     		str	r2, [r3, #36]
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  54              		.loc 1 375 0
  55 0020 354B     		ldr	r3, .L9
  56 0022 4FF05302 		mov	r2, #83
  57 0026 5A62     		str	r2, [r3, #36]
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  58              		.loc 1 378 0
  59 0028 FFF7FEFF 		bl	RTC_EnterInitMode
  60 002c 0346     		mov	r3, r0
  61 002e 002B     		cmp	r3, #0
  62 0030 03D1     		bne	.L2
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  63              		.loc 1 380 0
  64 0032 4FF00003 		mov	r3, #0
  65 0036 FB73     		strb	r3, [r7, #15]
  66 0038 54E0     		b	.L3
  67              	.L2:
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  68              		.loc 1 385 0
  69 003a 2F4B     		ldr	r3, .L9
  70 003c 4FF00002 		mov	r2, #0
  71 0040 1A60     		str	r2, [r3, #0]
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  72              		.loc 1 386 0
  73 0042 2D4B     		ldr	r3, .L9
  74 0044 42F20112 		movw	r2, #8449
  75 0048 5A60     		str	r2, [r3, #4]
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  76              		.loc 1 388 0
  77 004a 2B4B     		ldr	r3, .L9
  78 004c 2A4A     		ldr	r2, .L9
  79 004e 9268     		ldr	r2, [r2, #8]
  80 0050 02F00702 		and	r2, r2, #7
  81 0054 9A60     		str	r2, [r3, #8]
  82              	.L5:
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  83              		.loc 1 393 0 discriminator 1
  84 0056 284B     		ldr	r3, .L9
  85 0058 DB68     		ldr	r3, [r3, #12]
  86 005a 03F00403 		and	r3, r3, #4
  87 005e BB60     		str	r3, [r7, #8]
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  88              		.loc 1 394 0 discriminator 1
  89 0060 7B68     		ldr	r3, [r7, #4]
  90 0062 03F10103 		add	r3, r3, #1
  91 0066 7B60     		str	r3, [r7, #4]
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
  92              		.loc 1 395 0 discriminator 1
  93 0068 7B68     		ldr	r3, [r7, #4]
  94 006a B3F5803F 		cmp	r3, #65536
  95 006e 02D0     		beq	.L4
  96 0070 BB68     		ldr	r3, [r7, #8]
  97 0072 002B     		cmp	r3, #0
  98 0074 EFD0     		beq	.L5
  99              	.L4:
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 100              		.loc 1 397 0
 101 0076 204B     		ldr	r3, .L9
 102 0078 DB68     		ldr	r3, [r3, #12]
 103 007a 03F00403 		and	r3, r3, #4
 104 007e 002B     		cmp	r3, #0
 105 0080 03D1     		bne	.L6
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 106              		.loc 1 399 0
 107 0082 4FF00003 		mov	r3, #0
 108 0086 FB73     		strb	r3, [r7, #15]
 109 0088 2CE0     		b	.L3
 110              	.L6:
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 111              		.loc 1 404 0
 112 008a 1B4B     		ldr	r3, .L9
 113 008c 9B68     		ldr	r3, [r3, #8]
 114 008e 1A4B     		ldr	r3, .L9
 115 0090 4FF00002 		mov	r2, #0
 116 0094 9A60     		str	r2, [r3, #8]
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 117              		.loc 1 405 0
 118 0096 184B     		ldr	r3, .L9
 119 0098 4FF6FF72 		movw	r2, #65535
 120 009c 5A61     		str	r2, [r3, #20]
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 121              		.loc 1 406 0
 122 009e 164B     		ldr	r3, .L9
 123 00a0 164A     		ldr	r2, .L9+4
 124 00a2 1A61     		str	r2, [r3, #16]
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 125              		.loc 1 407 0
 126 00a4 144B     		ldr	r3, .L9
 127 00a6 4FF00002 		mov	r2, #0
 128 00aa 9A61     		str	r2, [r3, #24]
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 129              		.loc 1 408 0
 130 00ac 124B     		ldr	r3, .L9
 131 00ae 4FF00002 		mov	r2, #0
 132 00b2 DA61     		str	r2, [r3, #28]
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 133              		.loc 1 409 0
 134 00b4 104B     		ldr	r3, .L9
 135 00b6 4FF00002 		mov	r2, #0
 136 00ba 1A62     		str	r2, [r3, #32]
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 137              		.loc 1 412 0
 138 00bc 0E4B     		ldr	r3, .L9
 139 00be 4FF00002 		mov	r2, #0
 140 00c2 DA60     		str	r2, [r3, #12]
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 141              		.loc 1 415 0
 142 00c4 0C4B     		ldr	r3, .L9
 143 00c6 4FF00002 		mov	r2, #0
 144 00ca 1A64     		str	r2, [r3, #64]
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 145              		.loc 1 417 0
 146 00cc FFF7FEFF 		bl	RTC_WaitForSynchro
 147 00d0 0346     		mov	r3, r0
 148 00d2 002B     		cmp	r3, #0
 149 00d4 03D1     		bne	.L7
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 150              		.loc 1 419 0
 151 00d6 4FF00003 		mov	r3, #0
 152 00da FB73     		strb	r3, [r7, #15]
 153 00dc 02E0     		b	.L3
 154              	.L7:
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 155              		.loc 1 423 0
 156 00de 4FF00103 		mov	r3, #1
 157 00e2 FB73     		strb	r3, [r7, #15]
 158              	.L3:
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 159              		.loc 1 429 0
 160 00e4 044B     		ldr	r3, .L9
 161 00e6 4FF0FF02 		mov	r2, #255
 162 00ea 5A62     		str	r2, [r3, #36]
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 163              		.loc 1 431 0
 164 00ec FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 165              		.loc 1 432 0
 166 00ee 1846     		mov	r0, r3
 167 00f0 07F11007 		add	r7, r7, #16
 168 00f4 BD46     		mov	sp, r7
 169 00f6 80BD     		pop	{r7, pc}
 170              	.L10:
 171              		.align	2
 172              	.L9:
 173 00f8 00280040 		.word	1073752064
 174 00fc FF007F00 		.word	8323327
 175              		.cfi_endproc
 176              	.LFE110:
 178              		.align	2
 179              		.global	RTC_Init
 180              		.thumb
 181              		.thumb_func
 183              	RTC_Init:
 184              	.LFB111:
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 185              		.loc 1 446 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 16
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0100 80B5     		push	{r7, lr}
 190              	.LCFI3:
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0102 84B0     		sub	sp, sp, #16
 195              	.LCFI4:
 196              		.cfi_def_cfa_offset 24
 197 0104 00AF     		add	r7, sp, #0
 198              	.LCFI5:
 199              		.cfi_def_cfa_register 7
 200 0106 7860     		str	r0, [r7, #4]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 201              		.loc 1 447 0
 202 0108 4FF00003 		mov	r3, #0
 203 010c FB73     		strb	r3, [r7, #15]
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 204              		.loc 1 455 0
 205 010e 1D4B     		ldr	r3, .L15
 206 0110 4FF0CA02 		mov	r2, #202
 207 0114 5A62     		str	r2, [r3, #36]
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 208              		.loc 1 456 0
 209 0116 1B4B     		ldr	r3, .L15
 210 0118 4FF05302 		mov	r2, #83
 211 011c 5A62     		str	r2, [r3, #36]
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 212              		.loc 1 459 0
 213 011e FFF7FEFF 		bl	RTC_EnterInitMode
 214 0122 0346     		mov	r3, r0
 215 0124 002B     		cmp	r3, #0
 216 0126 03D1     		bne	.L12
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 217              		.loc 1 461 0
 218 0128 4FF00003 		mov	r3, #0
 219 012c FB73     		strb	r3, [r7, #15]
 220 012e 1EE0     		b	.L13
 221              	.L12:
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 222              		.loc 1 466 0
 223 0130 144B     		ldr	r3, .L15
 224 0132 144A     		ldr	r2, .L15
 225 0134 9268     		ldr	r2, [r2, #8]
 226 0136 22F04002 		bic	r2, r2, #64
 227 013a 9A60     		str	r2, [r3, #8]
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 228              		.loc 1 468 0
 229 013c 114B     		ldr	r3, .L15
 230 013e 114A     		ldr	r2, .L15
 231 0140 9168     		ldr	r1, [r2, #8]
 232 0142 7A68     		ldr	r2, [r7, #4]
 233 0144 1268     		ldr	r2, [r2, #0]
 234 0146 0A43     		orrs	r2, r2, r1
 235 0148 9A60     		str	r2, [r3, #8]
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 236              		.loc 1 471 0
 237 014a 0E4B     		ldr	r3, .L15
 238 014c 7A68     		ldr	r2, [r7, #4]
 239 014e 9268     		ldr	r2, [r2, #8]
 240 0150 1A61     		str	r2, [r3, #16]
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 241              		.loc 1 472 0
 242 0152 0C4B     		ldr	r3, .L15
 243 0154 0B4A     		ldr	r2, .L15
 244 0156 1169     		ldr	r1, [r2, #16]
 245 0158 7A68     		ldr	r2, [r7, #4]
 246 015a 5268     		ldr	r2, [r2, #4]
 247 015c 4FEA0242 		lsl	r2, r2, #16
 248 0160 0A43     		orrs	r2, r2, r1
 249 0162 1A61     		str	r2, [r3, #16]
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 250              		.loc 1 475 0
 251 0164 FFF7FEFF 		bl	RTC_ExitInitMode
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 252              		.loc 1 477 0
 253 0168 4FF00103 		mov	r3, #1
 254 016c FB73     		strb	r3, [r7, #15]
 255              	.L13:
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 256              		.loc 1 480 0
 257 016e 054B     		ldr	r3, .L15
 258 0170 4FF0FF02 		mov	r2, #255
 259 0174 5A62     		str	r2, [r3, #36]
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 260              		.loc 1 482 0
 261 0176 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 262              		.loc 1 483 0
 263 0178 1846     		mov	r0, r3
 264 017a 07F11007 		add	r7, r7, #16
 265 017e BD46     		mov	sp, r7
 266 0180 80BD     		pop	{r7, pc}
 267              	.L16:
 268 0182 00BF     		.align	2
 269              	.L15:
 270 0184 00280040 		.word	1073752064
 271              		.cfi_endproc
 272              	.LFE111:
 274              		.align	2
 275              		.global	RTC_StructInit
 276              		.thumb
 277              		.thumb_func
 279              	RTC_StructInit:
 280              	.LFB112:
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 281              		.loc 1 492 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 8
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286 0188 80B4     		push	{r7}
 287              	.LCFI6:
 288              		.cfi_def_cfa_offset 4
 289              		.cfi_offset 7, -4
 290 018a 83B0     		sub	sp, sp, #12
 291              	.LCFI7:
 292              		.cfi_def_cfa_offset 16
 293 018c 00AF     		add	r7, sp, #0
 294              	.LCFI8:
 295              		.cfi_def_cfa_register 7
 296 018e 7860     		str	r0, [r7, #4]
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 297              		.loc 1 494 0
 298 0190 7B68     		ldr	r3, [r7, #4]
 299 0192 4FF00002 		mov	r2, #0
 300 0196 1A60     		str	r2, [r3, #0]
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 301              		.loc 1 497 0
 302 0198 7B68     		ldr	r3, [r7, #4]
 303 019a 4FF07F02 		mov	r2, #127
 304 019e 5A60     		str	r2, [r3, #4]
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 305              		.loc 1 500 0
 306 01a0 7B68     		ldr	r3, [r7, #4]
 307 01a2 4FF0FF02 		mov	r2, #255
 308 01a6 9A60     		str	r2, [r3, #8]
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 309              		.loc 1 501 0
 310 01a8 07F10C07 		add	r7, r7, #12
 311 01ac BD46     		mov	sp, r7
 312 01ae 80BC     		pop	{r7}
 313 01b0 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE112:
 317 01b2 00BF     		.align	2
 318              		.global	RTC_WriteProtectionCmd
 319              		.thumb
 320              		.thumb_func
 322              	RTC_WriteProtectionCmd:
 323              	.LFB113:
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 324              		.loc 1 514 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 8
 327              		@ frame_needed = 1, uses_anonymous_args = 0
 328              		@ link register save eliminated.
 329 01b4 80B4     		push	{r7}
 330              	.LCFI9:
 331              		.cfi_def_cfa_offset 4
 332              		.cfi_offset 7, -4
 333 01b6 83B0     		sub	sp, sp, #12
 334              	.LCFI10:
 335              		.cfi_def_cfa_offset 16
 336 01b8 00AF     		add	r7, sp, #0
 337              	.LCFI11:
 338              		.cfi_def_cfa_register 7
 339 01ba 0346     		mov	r3, r0
 340 01bc FB71     		strb	r3, [r7, #7]
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 341              		.loc 1 518 0
 342 01be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 343 01c0 002B     		cmp	r3, #0
 344 01c2 04D0     		beq	.L19
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 345              		.loc 1 521 0
 346 01c4 084B     		ldr	r3, .L21
 347 01c6 4FF0FF02 		mov	r2, #255
 348 01ca 5A62     		str	r2, [r3, #36]
 349 01cc 07E0     		b	.L18
 350              	.L19:
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 351              		.loc 1 526 0
 352 01ce 064B     		ldr	r3, .L21
 353 01d0 4FF0CA02 		mov	r2, #202
 354 01d4 5A62     		str	r2, [r3, #36]
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 355              		.loc 1 527 0
 356 01d6 044B     		ldr	r3, .L21
 357 01d8 4FF05302 		mov	r2, #83
 358 01dc 5A62     		str	r2, [r3, #36]
 359              	.L18:
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 360              		.loc 1 529 0
 361 01de 07F10C07 		add	r7, r7, #12
 362 01e2 BD46     		mov	sp, r7
 363 01e4 80BC     		pop	{r7}
 364 01e6 7047     		bx	lr
 365              	.L22:
 366              		.align	2
 367              	.L21:
 368 01e8 00280040 		.word	1073752064
 369              		.cfi_endproc
 370              	.LFE113:
 372              		.align	2
 373              		.global	RTC_EnterInitMode
 374              		.thumb
 375              		.thumb_func
 377              	RTC_EnterInitMode:
 378              	.LFB114:
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 379              		.loc 1 541 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 16
 382              		@ frame_needed = 1, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384 01ec 80B4     		push	{r7}
 385              	.LCFI12:
 386              		.cfi_def_cfa_offset 4
 387              		.cfi_offset 7, -4
 388 01ee 85B0     		sub	sp, sp, #20
 389              	.LCFI13:
 390              		.cfi_def_cfa_offset 24
 391 01f0 00AF     		add	r7, sp, #0
 392              	.LCFI14:
 393              		.cfi_def_cfa_register 7
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 394              		.loc 1 542 0
 395 01f2 4FF00003 		mov	r3, #0
 396 01f6 7B60     		str	r3, [r7, #4]
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 397              		.loc 1 543 0
 398 01f8 4FF00003 		mov	r3, #0
 399 01fc FB73     		strb	r3, [r7, #15]
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 400              		.loc 1 544 0
 401 01fe 4FF00003 		mov	r3, #0
 402 0202 BB60     		str	r3, [r7, #8]
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 403              		.loc 1 547 0
 404 0204 184B     		ldr	r3, .L30
 405 0206 DB68     		ldr	r3, [r3, #12]
 406 0208 03F04003 		and	r3, r3, #64
 407 020c 002B     		cmp	r3, #0
 408 020e 21D1     		bne	.L24
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 409              		.loc 1 550 0
 410 0210 154B     		ldr	r3, .L30
 411 0212 4FF0FF32 		mov	r2, #-1
 412 0216 DA60     		str	r2, [r3, #12]
 413              	.L26:
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 414              		.loc 1 555 0 discriminator 1
 415 0218 134B     		ldr	r3, .L30
 416 021a DB68     		ldr	r3, [r3, #12]
 417 021c 03F04003 		and	r3, r3, #64
 418 0220 BB60     		str	r3, [r7, #8]
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 419              		.loc 1 556 0 discriminator 1
 420 0222 7B68     		ldr	r3, [r7, #4]
 421 0224 03F10103 		add	r3, r3, #1
 422 0228 7B60     		str	r3, [r7, #4]
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 423              		.loc 1 557 0 discriminator 1
 424 022a 7B68     		ldr	r3, [r7, #4]
 425 022c B3F5803F 		cmp	r3, #65536
 426 0230 02D0     		beq	.L25
 427 0232 BB68     		ldr	r3, [r7, #8]
 428 0234 002B     		cmp	r3, #0
 429 0236 EFD0     		beq	.L26
 430              	.L25:
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 431              		.loc 1 559 0
 432 0238 0B4B     		ldr	r3, .L30
 433 023a DB68     		ldr	r3, [r3, #12]
 434 023c 03F04003 		and	r3, r3, #64
 435 0240 002B     		cmp	r3, #0
 436 0242 03D0     		beq	.L27
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 437              		.loc 1 561 0
 438 0244 4FF00103 		mov	r3, #1
 439 0248 FB73     		strb	r3, [r7, #15]
 440 024a 06E0     		b	.L28
 441              	.L27:
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 442              		.loc 1 565 0
 443 024c 4FF00003 		mov	r3, #0
 444 0250 FB73     		strb	r3, [r7, #15]
 445 0252 02E0     		b	.L28
 446              	.L24:
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 447              		.loc 1 570 0
 448 0254 4FF00103 		mov	r3, #1
 449 0258 FB73     		strb	r3, [r7, #15]
 450              	.L28:
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 451              		.loc 1 573 0
 452 025a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 453              		.loc 1 574 0
 454 025c 1846     		mov	r0, r3
 455 025e 07F11407 		add	r7, r7, #20
 456 0262 BD46     		mov	sp, r7
 457 0264 80BC     		pop	{r7}
 458 0266 7047     		bx	lr
 459              	.L31:
 460              		.align	2
 461              	.L30:
 462 0268 00280040 		.word	1073752064
 463              		.cfi_endproc
 464              	.LFE114:
 466              		.align	2
 467              		.global	RTC_ExitInitMode
 468              		.thumb
 469              		.thumb_func
 471              	RTC_ExitInitMode:
 472              	.LFB115:
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 473              		.loc 1 586 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478 026c 80B4     		push	{r7}
 479              	.LCFI15:
 480              		.cfi_def_cfa_offset 4
 481              		.cfi_offset 7, -4
 482 026e 00AF     		add	r7, sp, #0
 483              	.LCFI16:
 484              		.cfi_def_cfa_register 7
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 485              		.loc 1 588 0
 486 0270 044B     		ldr	r3, .L33
 487 0272 044A     		ldr	r2, .L33
 488 0274 D268     		ldr	r2, [r2, #12]
 489 0276 22F08002 		bic	r2, r2, #128
 490 027a DA60     		str	r2, [r3, #12]
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 491              		.loc 1 589 0
 492 027c BD46     		mov	sp, r7
 493 027e 80BC     		pop	{r7}
 494 0280 7047     		bx	lr
 495              	.L34:
 496 0282 00BF     		.align	2
 497              	.L33:
 498 0284 00280040 		.word	1073752064
 499              		.cfi_endproc
 500              	.LFE115:
 502              		.align	2
 503              		.global	RTC_WaitForSynchro
 504              		.thumb
 505              		.thumb_func
 507              	RTC_WaitForSynchro:
 508              	.LFB116:
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 509              		.loc 1 608 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 16
 512              		@ frame_needed = 1, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514 0288 80B4     		push	{r7}
 515              	.LCFI17:
 516              		.cfi_def_cfa_offset 4
 517              		.cfi_offset 7, -4
 518 028a 85B0     		sub	sp, sp, #20
 519              	.LCFI18:
 520              		.cfi_def_cfa_offset 24
 521 028c 00AF     		add	r7, sp, #0
 522              	.LCFI19:
 523              		.cfi_def_cfa_register 7
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 524              		.loc 1 609 0
 525 028e 4FF00003 		mov	r3, #0
 526 0292 7B60     		str	r3, [r7, #4]
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 527              		.loc 1 610 0
 528 0294 4FF00003 		mov	r3, #0
 529 0298 FB73     		strb	r3, [r7, #15]
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 530              		.loc 1 611 0
 531 029a 4FF00003 		mov	r3, #0
 532 029e BB60     		str	r3, [r7, #8]
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 533              		.loc 1 614 0
 534 02a0 1A4B     		ldr	r3, .L41
 535 02a2 4FF0CA02 		mov	r2, #202
 536 02a6 5A62     		str	r2, [r3, #36]
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 537              		.loc 1 615 0
 538 02a8 184B     		ldr	r3, .L41
 539 02aa 4FF05302 		mov	r2, #83
 540 02ae 5A62     		str	r2, [r3, #36]
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 541              		.loc 1 618 0
 542 02b0 164B     		ldr	r3, .L41
 543 02b2 164A     		ldr	r2, .L41
 544 02b4 D268     		ldr	r2, [r2, #12]
 545 02b6 22F0A002 		bic	r2, r2, #160
 546 02ba DA60     		str	r2, [r3, #12]
 547              	.L37:
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 548              		.loc 1 623 0 discriminator 1
 549 02bc 134B     		ldr	r3, .L41
 550 02be DB68     		ldr	r3, [r3, #12]
 551 02c0 03F02003 		and	r3, r3, #32
 552 02c4 BB60     		str	r3, [r7, #8]
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 553              		.loc 1 624 0 discriminator 1
 554 02c6 7B68     		ldr	r3, [r7, #4]
 555 02c8 03F10103 		add	r3, r3, #1
 556 02cc 7B60     		str	r3, [r7, #4]
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 557              		.loc 1 625 0 discriminator 1
 558 02ce 7B68     		ldr	r3, [r7, #4]
 559 02d0 B3F5003F 		cmp	r3, #131072
 560 02d4 02D0     		beq	.L36
 561 02d6 BB68     		ldr	r3, [r7, #8]
 562 02d8 002B     		cmp	r3, #0
 563 02da EFD0     		beq	.L37
 564              	.L36:
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 565              		.loc 1 627 0
 566 02dc 0B4B     		ldr	r3, .L41
 567 02de DB68     		ldr	r3, [r3, #12]
 568 02e0 03F02003 		and	r3, r3, #32
 569 02e4 002B     		cmp	r3, #0
 570 02e6 03D0     		beq	.L38
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 571              		.loc 1 629 0
 572 02e8 4FF00103 		mov	r3, #1
 573 02ec FB73     		strb	r3, [r7, #15]
 574 02ee 02E0     		b	.L39
 575              	.L38:
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 576              		.loc 1 633 0
 577 02f0 4FF00003 		mov	r3, #0
 578 02f4 FB73     		strb	r3, [r7, #15]
 579              	.L39:
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 580              		.loc 1 637 0
 581 02f6 054B     		ldr	r3, .L41
 582 02f8 4FF0FF02 		mov	r2, #255
 583 02fc 5A62     		str	r2, [r3, #36]
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 584              		.loc 1 639 0
 585 02fe FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 586              		.loc 1 640 0
 587 0300 1846     		mov	r0, r3
 588 0302 07F11407 		add	r7, r7, #20
 589 0306 BD46     		mov	sp, r7
 590 0308 80BC     		pop	{r7}
 591 030a 7047     		bx	lr
 592              	.L42:
 593              		.align	2
 594              	.L41:
 595 030c 00280040 		.word	1073752064
 596              		.cfi_endproc
 597              	.LFE116:
 599              		.align	2
 600              		.global	RTC_RefClockCmd
 601              		.thumb
 602              		.thumb_func
 604              	RTC_RefClockCmd:
 605              	.LFB117:
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 606              		.loc 1 651 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 16
 609              		@ frame_needed = 1, uses_anonymous_args = 0
 610 0310 80B5     		push	{r7, lr}
 611              	.LCFI20:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0312 84B0     		sub	sp, sp, #16
 616              	.LCFI21:
 617              		.cfi_def_cfa_offset 24
 618 0314 00AF     		add	r7, sp, #0
 619              	.LCFI22:
 620              		.cfi_def_cfa_register 7
 621 0316 0346     		mov	r3, r0
 622 0318 FB71     		strb	r3, [r7, #7]
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 623              		.loc 1 652 0
 624 031a 4FF00003 		mov	r3, #0
 625 031e FB73     		strb	r3, [r7, #15]
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 626              		.loc 1 658 0
 627 0320 174B     		ldr	r3, .L49
 628 0322 4FF0CA02 		mov	r2, #202
 629 0326 5A62     		str	r2, [r3, #36]
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 630              		.loc 1 659 0
 631 0328 154B     		ldr	r3, .L49
 632 032a 4FF05302 		mov	r2, #83
 633 032e 5A62     		str	r2, [r3, #36]
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 634              		.loc 1 662 0
 635 0330 FFF7FEFF 		bl	RTC_EnterInitMode
 636 0334 0346     		mov	r3, r0
 637 0336 002B     		cmp	r3, #0
 638 0338 03D1     		bne	.L44
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 639              		.loc 1 664 0
 640 033a 4FF00003 		mov	r3, #0
 641 033e FB73     		strb	r3, [r7, #15]
 642 0340 14E0     		b	.L45
 643              	.L44:
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 644              		.loc 1 668 0
 645 0342 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 646 0344 002B     		cmp	r3, #0
 647 0346 06D0     		beq	.L46
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 648              		.loc 1 671 0
 649 0348 0D4B     		ldr	r3, .L49
 650 034a 0D4A     		ldr	r2, .L49
 651 034c 9268     		ldr	r2, [r2, #8]
 652 034e 42F01002 		orr	r2, r2, #16
 653 0352 9A60     		str	r2, [r3, #8]
 654 0354 05E0     		b	.L47
 655              	.L46:
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 656              		.loc 1 676 0
 657 0356 0A4B     		ldr	r3, .L49
 658 0358 094A     		ldr	r2, .L49
 659 035a 9268     		ldr	r2, [r2, #8]
 660 035c 22F01002 		bic	r2, r2, #16
 661 0360 9A60     		str	r2, [r3, #8]
 662              	.L47:
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 663              		.loc 1 679 0
 664 0362 FFF7FEFF 		bl	RTC_ExitInitMode
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 665              		.loc 1 681 0
 666 0366 4FF00103 		mov	r3, #1
 667 036a FB73     		strb	r3, [r7, #15]
 668              	.L45:
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 669              		.loc 1 685 0
 670 036c 044B     		ldr	r3, .L49
 671 036e 4FF0FF02 		mov	r2, #255
 672 0372 5A62     		str	r2, [r3, #36]
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 673              		.loc 1 687 0
 674 0374 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 675              		.loc 1 688 0
 676 0376 1846     		mov	r0, r3
 677 0378 07F11007 		add	r7, r7, #16
 678 037c BD46     		mov	sp, r7
 679 037e 80BD     		pop	{r7, pc}
 680              	.L50:
 681              		.align	2
 682              	.L49:
 683 0380 00280040 		.word	1073752064
 684              		.cfi_endproc
 685              	.LFE117:
 687              		.align	2
 688              		.global	RTC_BypassShadowCmd
 689              		.thumb
 690              		.thumb_func
 692              	RTC_BypassShadowCmd:
 693              	.LFB118:
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 694              		.loc 1 699 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 8
 697              		@ frame_needed = 1, uses_anonymous_args = 0
 698              		@ link register save eliminated.
 699 0384 80B4     		push	{r7}
 700              	.LCFI23:
 701              		.cfi_def_cfa_offset 4
 702              		.cfi_offset 7, -4
 703 0386 83B0     		sub	sp, sp, #12
 704              	.LCFI24:
 705              		.cfi_def_cfa_offset 16
 706 0388 00AF     		add	r7, sp, #0
 707              	.LCFI25:
 708              		.cfi_def_cfa_register 7
 709 038a 0346     		mov	r3, r0
 710 038c FB71     		strb	r3, [r7, #7]
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 711              		.loc 1 704 0
 712 038e 104B     		ldr	r3, .L54
 713 0390 4FF0CA02 		mov	r2, #202
 714 0394 5A62     		str	r2, [r3, #36]
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 715              		.loc 1 705 0
 716 0396 0E4B     		ldr	r3, .L54
 717 0398 4FF05302 		mov	r2, #83
 718 039c 5A62     		str	r2, [r3, #36]
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 719              		.loc 1 707 0
 720 039e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 721 03a0 002B     		cmp	r3, #0
 722 03a2 06D0     		beq	.L52
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 723              		.loc 1 710 0
 724 03a4 0A4B     		ldr	r3, .L54
 725 03a6 0A4A     		ldr	r2, .L54
 726 03a8 9268     		ldr	r2, [r2, #8]
 727 03aa 42F02002 		orr	r2, r2, #32
 728 03ae 9A60     		str	r2, [r3, #8]
 729 03b0 05E0     		b	.L53
 730              	.L52:
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 731              		.loc 1 715 0
 732 03b2 074B     		ldr	r3, .L54
 733 03b4 064A     		ldr	r2, .L54
 734 03b6 9268     		ldr	r2, [r2, #8]
 735 03b8 02F0DF02 		and	r2, r2, #223
 736 03bc 9A60     		str	r2, [r3, #8]
 737              	.L53:
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 738              		.loc 1 719 0
 739 03be 044B     		ldr	r3, .L54
 740 03c0 4FF0FF02 		mov	r2, #255
 741 03c4 5A62     		str	r2, [r3, #36]
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 742              		.loc 1 720 0
 743 03c6 07F10C07 		add	r7, r7, #12
 744 03ca BD46     		mov	sp, r7
 745 03cc 80BC     		pop	{r7}
 746 03ce 7047     		bx	lr
 747              	.L55:
 748              		.align	2
 749              	.L54:
 750 03d0 00280040 		.word	1073752064
 751              		.cfi_endproc
 752              	.LFE118:
 754              		.align	2
 755              		.global	RTC_SetTime
 756              		.thumb
 757              		.thumb_func
 759              	RTC_SetTime:
 760              	.LFB119:
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 761              		.loc 1 754 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 16
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765 03d4 90B5     		push	{r4, r7, lr}
 766              	.LCFI26:
 767              		.cfi_def_cfa_offset 12
 768              		.cfi_offset 4, -12
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 03d6 85B0     		sub	sp, sp, #20
 772              	.LCFI27:
 773              		.cfi_def_cfa_offset 32
 774 03d8 00AF     		add	r7, sp, #0
 775              	.LCFI28:
 776              		.cfi_def_cfa_register 7
 777 03da 7860     		str	r0, [r7, #4]
 778 03dc 3960     		str	r1, [r7, #0]
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 779              		.loc 1 755 0
 780 03de 4FF00003 		mov	r3, #0
 781 03e2 FB60     		str	r3, [r7, #12]
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 782              		.loc 1 756 0
 783 03e4 4FF00003 		mov	r3, #0
 784 03e8 FB72     		strb	r3, [r7, #11]
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 785              		.loc 1 761 0
 786 03ea 7B68     		ldr	r3, [r7, #4]
 787 03ec 002B     		cmp	r3, #0
 788 03ee 0AD1     		bne	.L57
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 789              		.loc 1 763 0
 790 03f0 404B     		ldr	r3, .L66
 791 03f2 9B68     		ldr	r3, [r3, #8]
 792 03f4 03F04003 		and	r3, r3, #64
 793 03f8 002B     		cmp	r3, #0
 794 03fa 16D1     		bne	.L58
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 795              		.loc 1 770 0
 796 03fc 3B68     		ldr	r3, [r7, #0]
 797 03fe 4FF00002 		mov	r2, #0
 798 0402 DA70     		strb	r2, [r3, #3]
 799 0404 11E0     		b	.L58
 800              	.L57:
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801              		.loc 1 778 0
 802 0406 3B4B     		ldr	r3, .L66
 803 0408 9B68     		ldr	r3, [r3, #8]
 804 040a 03F04003 		and	r3, r3, #64
 805 040e 002B     		cmp	r3, #0
 806 0410 07D0     		beq	.L59
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 807              		.loc 1 780 0
 808 0412 3B68     		ldr	r3, [r7, #0]
 809 0414 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 810 0416 1846     		mov	r0, r3
 811 0418 01F044F9 		bl	RTC_Bcd2ToByte
 812 041c 0346     		mov	r3, r0
 813 041e FB60     		str	r3, [r7, #12]
 814 0420 03E0     		b	.L58
 815              	.L59:
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 816              		.loc 1 786 0
 817 0422 3B68     		ldr	r3, [r7, #0]
 818 0424 4FF00002 		mov	r2, #0
 819 0428 DA70     		strb	r2, [r3, #3]
 820              	.L58:
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 821              		.loc 1 794 0
 822 042a 7B68     		ldr	r3, [r7, #4]
 823 042c 002B     		cmp	r3, #0
 824 042e 12D0     		beq	.L60
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 825              		.loc 1 796 0
 826 0430 3B68     		ldr	r3, [r7, #0]
 827 0432 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 828 0434 4FEA0342 		lsl	r2, r3, #16
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 829              		.loc 1 797 0
 830 0438 3B68     		ldr	r3, [r7, #0]
 831 043a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 832 043c 4FEA0323 		lsl	r3, r3, #8
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 833              		.loc 1 796 0
 834 0440 1A43     		orrs	r2, r2, r3
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 835              		.loc 1 798 0
 836 0442 3B68     		ldr	r3, [r7, #0]
 837 0444 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 838              		.loc 1 797 0
 839 0446 1A43     		orrs	r2, r2, r3
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 840              		.loc 1 799 0
 841 0448 3B68     		ldr	r3, [r7, #0]
 842 044a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 843 044c 4FEA0343 		lsl	r3, r3, #16
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 844              		.loc 1 796 0
 845 0450 1343     		orrs	r3, r3, r2
 846 0452 FB60     		str	r3, [r7, #12]
 847 0454 1EE0     		b	.L61
 848              	.L60:
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 849              		.loc 1 803 0
 850 0456 3B68     		ldr	r3, [r7, #0]
 851 0458 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 852 045a 1846     		mov	r0, r3
 853 045c 01F000F9 		bl	RTC_ByteToBcd2
 854 0460 0346     		mov	r3, r0
 855 0462 4FEA0344 		lsl	r4, r3, #16
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 856              		.loc 1 804 0
 857 0466 3B68     		ldr	r3, [r7, #0]
 858 0468 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 859 046a 1846     		mov	r0, r3
 860 046c 01F0F8F8 		bl	RTC_ByteToBcd2
 861 0470 0346     		mov	r3, r0
 862 0472 4FEA0323 		lsl	r3, r3, #8
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 863              		.loc 1 803 0
 864 0476 1C43     		orrs	r4, r4, r3
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 865              		.loc 1 805 0
 866 0478 3B68     		ldr	r3, [r7, #0]
 867 047a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 868 047c 1846     		mov	r0, r3
 869 047e 01F0EFF8 		bl	RTC_ByteToBcd2
 870 0482 0346     		mov	r3, r0
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 871              		.loc 1 804 0
 872 0484 44EA0302 		orr	r2, r4, r3
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 873              		.loc 1 806 0
 874 0488 3B68     		ldr	r3, [r7, #0]
 875 048a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 876 048c 4FEA0343 		lsl	r3, r3, #16
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 877              		.loc 1 803 0
 878 0490 1343     		orrs	r3, r3, r2
 879 0492 FB60     		str	r3, [r7, #12]
 880              	.L61:
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 881              		.loc 1 810 0
 882 0494 174B     		ldr	r3, .L66
 883 0496 4FF0CA02 		mov	r2, #202
 884 049a 5A62     		str	r2, [r3, #36]
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 885              		.loc 1 811 0
 886 049c 154B     		ldr	r3, .L66
 887 049e 4FF05302 		mov	r2, #83
 888 04a2 5A62     		str	r2, [r3, #36]
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 889              		.loc 1 814 0
 890 04a4 FFF7FEFF 		bl	RTC_EnterInitMode
 891 04a8 0346     		mov	r3, r0
 892 04aa 002B     		cmp	r3, #0
 893 04ac 03D1     		bne	.L62
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 894              		.loc 1 816 0
 895 04ae 4FF00003 		mov	r3, #0
 896 04b2 FB72     		strb	r3, [r7, #11]
 897 04b4 14E0     		b	.L63
 898              	.L62:
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 899              		.loc 1 821 0
 900 04b6 0F4A     		ldr	r2, .L66
 901 04b8 FB68     		ldr	r3, [r7, #12]
 902 04ba 03F07F33 		and	r3, r3, #2139062143
 903 04be 23F0FE43 		bic	r3, r3, #2130706432
 904 04c2 1360     		str	r3, [r2, #0]
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 905              		.loc 1 824 0
 906 04c4 FFF7FEFF 		bl	RTC_ExitInitMode
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 907              		.loc 1 826 0
 908 04c8 FFF7FEFF 		bl	RTC_WaitForSynchro
 909 04cc 0346     		mov	r3, r0
 910 04ce 002B     		cmp	r3, #0
 911 04d0 03D1     		bne	.L64
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 912              		.loc 1 828 0
 913 04d2 4FF00003 		mov	r3, #0
 914 04d6 FB72     		strb	r3, [r7, #11]
 915 04d8 02E0     		b	.L63
 916              	.L64:
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 917              		.loc 1 832 0
 918 04da 4FF00103 		mov	r3, #1
 919 04de FB72     		strb	r3, [r7, #11]
 920              	.L63:
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 921              		.loc 1 837 0
 922 04e0 044B     		ldr	r3, .L66
 923 04e2 4FF0FF02 		mov	r2, #255
 924 04e6 5A62     		str	r2, [r3, #36]
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 925              		.loc 1 839 0
 926 04e8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 927              		.loc 1 840 0
 928 04ea 1846     		mov	r0, r3
 929 04ec 07F11407 		add	r7, r7, #20
 930 04f0 BD46     		mov	sp, r7
 931 04f2 90BD     		pop	{r4, r7, pc}
 932              	.L67:
 933              		.align	2
 934              	.L66:
 935 04f4 00280040 		.word	1073752064
 936              		.cfi_endproc
 937              	.LFE119:
 939              		.align	2
 940              		.global	RTC_TimeStructInit
 941              		.thumb
 942              		.thumb_func
 944              	RTC_TimeStructInit:
 945              	.LFB120:
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 946              		.loc 1 850 0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 8
 949              		@ frame_needed = 1, uses_anonymous_args = 0
 950              		@ link register save eliminated.
 951 04f8 80B4     		push	{r7}
 952              	.LCFI29:
 953              		.cfi_def_cfa_offset 4
 954              		.cfi_offset 7, -4
 955 04fa 83B0     		sub	sp, sp, #12
 956              	.LCFI30:
 957              		.cfi_def_cfa_offset 16
 958 04fc 00AF     		add	r7, sp, #0
 959              	.LCFI31:
 960              		.cfi_def_cfa_register 7
 961 04fe 7860     		str	r0, [r7, #4]
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 962              		.loc 1 852 0
 963 0500 7B68     		ldr	r3, [r7, #4]
 964 0502 4FF00002 		mov	r2, #0
 965 0506 DA70     		strb	r2, [r3, #3]
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 966              		.loc 1 853 0
 967 0508 7B68     		ldr	r3, [r7, #4]
 968 050a 4FF00002 		mov	r2, #0
 969 050e 1A70     		strb	r2, [r3, #0]
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 970              		.loc 1 854 0
 971 0510 7B68     		ldr	r3, [r7, #4]
 972 0512 4FF00002 		mov	r2, #0
 973 0516 5A70     		strb	r2, [r3, #1]
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 974              		.loc 1 855 0
 975 0518 7B68     		ldr	r3, [r7, #4]
 976 051a 4FF00002 		mov	r2, #0
 977 051e 9A70     		strb	r2, [r3, #2]
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 978              		.loc 1 856 0
 979 0520 07F10C07 		add	r7, r7, #12
 980 0524 BD46     		mov	sp, r7
 981 0526 80BC     		pop	{r7}
 982 0528 7047     		bx	lr
 983              		.cfi_endproc
 984              	.LFE120:
 986 052a 00BF     		.align	2
 987              		.global	RTC_GetTime
 988              		.thumb
 989              		.thumb_func
 991              	RTC_GetTime:
 992              	.LFB121:
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 993              		.loc 1 869 0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 16
 996              		@ frame_needed = 1, uses_anonymous_args = 0
 997 052c 80B5     		push	{r7, lr}
 998              	.LCFI32:
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 7, -8
 1001              		.cfi_offset 14, -4
 1002 052e 84B0     		sub	sp, sp, #16
 1003              	.LCFI33:
 1004              		.cfi_def_cfa_offset 24
 1005 0530 00AF     		add	r7, sp, #0
 1006              	.LCFI34:
 1007              		.cfi_def_cfa_register 7
 1008 0532 7860     		str	r0, [r7, #4]
 1009 0534 3960     		str	r1, [r7, #0]
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1010              		.loc 1 870 0
 1011 0536 4FF00003 		mov	r3, #0
 1012 053a FB60     		str	r3, [r7, #12]
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1013              		.loc 1 876 0
 1014 053c 234B     		ldr	r3, .L71
 1015 053e 1B68     		ldr	r3, [r3, #0]
 1016 0540 03F07F33 		and	r3, r3, #2139062143
 1017 0544 23F0FE43 		bic	r3, r3, #2130706432
 1018 0548 FB60     		str	r3, [r7, #12]
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1019              		.loc 1 879 0
 1020 054a FB68     		ldr	r3, [r7, #12]
 1021 054c 03F47C13 		and	r3, r3, #4128768
 1022 0550 4FEA1343 		lsr	r3, r3, #16
 1023 0554 DAB2     		uxtb	r2, r3
 1024 0556 3B68     		ldr	r3, [r7, #0]
 1025 0558 1A70     		strb	r2, [r3, #0]
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1026              		.loc 1 880 0
 1027 055a FB68     		ldr	r3, [r7, #12]
 1028 055c 03F4FE43 		and	r3, r3, #32512
 1029 0560 4FEA1323 		lsr	r3, r3, #8
 1030 0564 DAB2     		uxtb	r2, r3
 1031 0566 3B68     		ldr	r3, [r7, #0]
 1032 0568 5A70     		strb	r2, [r3, #1]
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1033              		.loc 1 881 0
 1034 056a FB68     		ldr	r3, [r7, #12]
 1035 056c DBB2     		uxtb	r3, r3
 1036 056e 03F07F03 		and	r3, r3, #127
 1037 0572 DAB2     		uxtb	r2, r3
 1038 0574 3B68     		ldr	r3, [r7, #0]
 1039 0576 9A70     		strb	r2, [r3, #2]
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1040              		.loc 1 882 0
 1041 0578 FB68     		ldr	r3, [r7, #12]
 1042 057a 03F48003 		and	r3, r3, #4194304
 1043 057e 4FEA1343 		lsr	r3, r3, #16
 1044 0582 DAB2     		uxtb	r2, r3
 1045 0584 3B68     		ldr	r3, [r7, #0]
 1046 0586 DA70     		strb	r2, [r3, #3]
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1047              		.loc 1 885 0
 1048 0588 7B68     		ldr	r3, [r7, #4]
 1049 058a 002B     		cmp	r3, #0
 1050 058c 1AD1     		bne	.L69
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1051              		.loc 1 888 0
 1052 058e 3B68     		ldr	r3, [r7, #0]
 1053 0590 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1054 0592 1846     		mov	r0, r3
 1055 0594 01F086F8 		bl	RTC_Bcd2ToByte
 1056 0598 0346     		mov	r3, r0
 1057 059a 1A46     		mov	r2, r3
 1058 059c 3B68     		ldr	r3, [r7, #0]
 1059 059e 1A70     		strb	r2, [r3, #0]
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1060              		.loc 1 889 0
 1061 05a0 3B68     		ldr	r3, [r7, #0]
 1062 05a2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1063 05a4 1846     		mov	r0, r3
 1064 05a6 01F07DF8 		bl	RTC_Bcd2ToByte
 1065 05aa 0346     		mov	r3, r0
 1066 05ac 1A46     		mov	r2, r3
 1067 05ae 3B68     		ldr	r3, [r7, #0]
 1068 05b0 5A70     		strb	r2, [r3, #1]
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1069              		.loc 1 890 0
 1070 05b2 3B68     		ldr	r3, [r7, #0]
 1071 05b4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1072 05b6 1846     		mov	r0, r3
 1073 05b8 01F074F8 		bl	RTC_Bcd2ToByte
 1074 05bc 0346     		mov	r3, r0
 1075 05be 1A46     		mov	r2, r3
 1076 05c0 3B68     		ldr	r3, [r7, #0]
 1077 05c2 9A70     		strb	r2, [r3, #2]
 1078              	.L69:
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1079              		.loc 1 892 0
 1080 05c4 07F11007 		add	r7, r7, #16
 1081 05c8 BD46     		mov	sp, r7
 1082 05ca 80BD     		pop	{r7, pc}
 1083              	.L72:
 1084              		.align	2
 1085              	.L71:
 1086 05cc 00280040 		.word	1073752064
 1087              		.cfi_endproc
 1088              	.LFE121:
 1090              		.align	2
 1091              		.global	RTC_GetSubSecond
 1092              		.thumb
 1093              		.thumb_func
 1095              	RTC_GetSubSecond:
 1096              	.LFB122:
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1097              		.loc 1 902 0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 8
 1100              		@ frame_needed = 1, uses_anonymous_args = 0
 1101              		@ link register save eliminated.
 1102 05d0 80B4     		push	{r7}
 1103              	.LCFI35:
 1104              		.cfi_def_cfa_offset 4
 1105              		.cfi_offset 7, -4
 1106 05d2 83B0     		sub	sp, sp, #12
 1107              	.LCFI36:
 1108              		.cfi_def_cfa_offset 16
 1109 05d4 00AF     		add	r7, sp, #0
 1110              	.LCFI37:
 1111              		.cfi_def_cfa_register 7
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1112              		.loc 1 903 0
 1113 05d6 4FF00003 		mov	r3, #0
 1114 05da 7B60     		str	r3, [r7, #4]
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1115              		.loc 1 906 0
 1116 05dc 054B     		ldr	r3, .L75
 1117 05de 9B6A     		ldr	r3, [r3, #40]
 1118 05e0 7B60     		str	r3, [r7, #4]
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1119              		.loc 1 909 0
 1120 05e2 044B     		ldr	r3, .L75
 1121 05e4 5B68     		ldr	r3, [r3, #4]
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1122              		.loc 1 911 0
 1123 05e6 7B68     		ldr	r3, [r7, #4]
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1124              		.loc 1 912 0
 1125 05e8 1846     		mov	r0, r3
 1126 05ea 07F10C07 		add	r7, r7, #12
 1127 05ee BD46     		mov	sp, r7
 1128 05f0 80BC     		pop	{r7}
 1129 05f2 7047     		bx	lr
 1130              	.L76:
 1131              		.align	2
 1132              	.L75:
 1133 05f4 00280040 		.word	1073752064
 1134              		.cfi_endproc
 1135              	.LFE122:
 1137              		.align	2
 1138              		.global	RTC_SetDate
 1139              		.thumb
 1140              		.thumb_func
 1142              	RTC_SetDate:
 1143              	.LFB123:
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1144              		.loc 1 927 0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 16
 1147              		@ frame_needed = 1, uses_anonymous_args = 0
 1148 05f8 90B5     		push	{r4, r7, lr}
 1149              	.LCFI38:
 1150              		.cfi_def_cfa_offset 12
 1151              		.cfi_offset 4, -12
 1152              		.cfi_offset 7, -8
 1153              		.cfi_offset 14, -4
 1154 05fa 85B0     		sub	sp, sp, #20
 1155              	.LCFI39:
 1156              		.cfi_def_cfa_offset 32
 1157 05fc 00AF     		add	r7, sp, #0
 1158              	.LCFI40:
 1159              		.cfi_def_cfa_register 7
 1160 05fe 7860     		str	r0, [r7, #4]
 1161 0600 3960     		str	r1, [r7, #0]
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1162              		.loc 1 928 0
 1163 0602 4FF00003 		mov	r3, #0
 1164 0606 FB60     		str	r3, [r7, #12]
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1165              		.loc 1 929 0
 1166 0608 4FF00003 		mov	r3, #0
 1167 060c FB72     		strb	r3, [r7, #11]
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1168              		.loc 1 934 0
 1169 060e 7B68     		ldr	r3, [r7, #4]
 1170 0610 002B     		cmp	r3, #0
 1171 0612 0FD1     		bne	.L78
 1172              		.loc 1 934 0 is_stmt 0 discriminator 1
 1173 0614 3B68     		ldr	r3, [r7, #0]
 1174 0616 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1175 0618 03F01003 		and	r3, r3, #16
 1176 061c 002B     		cmp	r3, #0
 1177 061e 09D0     		beq	.L78
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1178              		.loc 1 936 0 is_stmt 1
 1179 0620 3B68     		ldr	r3, [r7, #0]
 1180 0622 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1181 0624 23F01003 		bic	r3, r3, #16
 1182 0628 DBB2     		uxtb	r3, r3
 1183 062a 03F10A03 		add	r3, r3, #10
 1184 062e DAB2     		uxtb	r2, r3
 1185 0630 3B68     		ldr	r3, [r7, #0]
 1186 0632 5A70     		strb	r2, [r3, #1]
 1187              	.L78:
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1188              		.loc 1 938 0
 1189 0634 7B68     		ldr	r3, [r7, #4]
 1190 0636 002B     		cmp	r3, #0
 1191 0638 0DD0     		beq	.L79
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1192              		.loc 1 947 0
 1193 063a 3B68     		ldr	r3, [r7, #0]
 1194 063c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1195 063e 1846     		mov	r0, r3
 1196 0640 01F030F8 		bl	RTC_Bcd2ToByte
 1197 0644 0346     		mov	r3, r0
 1198 0646 FB60     		str	r3, [r7, #12]
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1199              		.loc 1 949 0
 1200 0648 3B68     		ldr	r3, [r7, #0]
 1201 064a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1202 064c 1846     		mov	r0, r3
 1203 064e 01F029F8 		bl	RTC_Bcd2ToByte
 1204 0652 0346     		mov	r3, r0
 1205 0654 FB60     		str	r3, [r7, #12]
 1206              	.L79:
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1207              		.loc 1 955 0
 1208 0656 7B68     		ldr	r3, [r7, #4]
 1209 0658 002B     		cmp	r3, #0
 1210 065a 12D0     		beq	.L80
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1211              		.loc 1 957 0
 1212 065c 3B68     		ldr	r3, [r7, #0]
 1213 065e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1214 0660 4FEA0342 		lsl	r2, r3, #16
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1215              		.loc 1 958 0
 1216 0664 3B68     		ldr	r3, [r7, #0]
 1217 0666 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1218 0668 4FEA0323 		lsl	r3, r3, #8
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1219              		.loc 1 957 0
 1220 066c 1A43     		orrs	r2, r2, r3
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1221              		.loc 1 959 0
 1222 066e 3B68     		ldr	r3, [r7, #0]
 1223 0670 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1224              		.loc 1 958 0
 1225 0672 1A43     		orrs	r2, r2, r3
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1226              		.loc 1 960 0
 1227 0674 3B68     		ldr	r3, [r7, #0]
 1228 0676 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1229 0678 4FEA4333 		lsl	r3, r3, #13
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1230              		.loc 1 957 0
 1231 067c 1343     		orrs	r3, r3, r2
 1232 067e FB60     		str	r3, [r7, #12]
 1233 0680 1EE0     		b	.L81
 1234              	.L80:
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1235              		.loc 1 964 0
 1236 0682 3B68     		ldr	r3, [r7, #0]
 1237 0684 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1238 0686 1846     		mov	r0, r3
 1239 0688 00F0EAFF 		bl	RTC_ByteToBcd2
 1240 068c 0346     		mov	r3, r0
 1241 068e 4FEA0344 		lsl	r4, r3, #16
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1242              		.loc 1 965 0
 1243 0692 3B68     		ldr	r3, [r7, #0]
 1244 0694 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1245 0696 1846     		mov	r0, r3
 1246 0698 00F0E2FF 		bl	RTC_ByteToBcd2
 1247 069c 0346     		mov	r3, r0
 1248 069e 4FEA0323 		lsl	r3, r3, #8
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1249              		.loc 1 964 0
 1250 06a2 1C43     		orrs	r4, r4, r3
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1251              		.loc 1 966 0
 1252 06a4 3B68     		ldr	r3, [r7, #0]
 1253 06a6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1254 06a8 1846     		mov	r0, r3
 1255 06aa 00F0D9FF 		bl	RTC_ByteToBcd2
 1256 06ae 0346     		mov	r3, r0
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1257              		.loc 1 965 0
 1258 06b0 44EA0302 		orr	r2, r4, r3
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1259              		.loc 1 967 0
 1260 06b4 3B68     		ldr	r3, [r7, #0]
 1261 06b6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1262 06b8 4FEA4333 		lsl	r3, r3, #13
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1263              		.loc 1 964 0
 1264 06bc 1343     		orrs	r3, r3, r2
 1265 06be FB60     		str	r3, [r7, #12]
 1266              	.L81:
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1267              		.loc 1 971 0
 1268 06c0 174B     		ldr	r3, .L86
 1269 06c2 4FF0CA02 		mov	r2, #202
 1270 06c6 5A62     		str	r2, [r3, #36]
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1271              		.loc 1 972 0
 1272 06c8 154B     		ldr	r3, .L86
 1273 06ca 4FF05302 		mov	r2, #83
 1274 06ce 5A62     		str	r2, [r3, #36]
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1275              		.loc 1 975 0
 1276 06d0 FFF7FEFF 		bl	RTC_EnterInitMode
 1277 06d4 0346     		mov	r3, r0
 1278 06d6 002B     		cmp	r3, #0
 1279 06d8 03D1     		bne	.L82
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1280              		.loc 1 977 0
 1281 06da 4FF00003 		mov	r3, #0
 1282 06de FB72     		strb	r3, [r7, #11]
 1283 06e0 14E0     		b	.L83
 1284              	.L82:
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1285              		.loc 1 982 0
 1286 06e2 0F4A     		ldr	r2, .L86
 1287 06e4 FB68     		ldr	r3, [r7, #12]
 1288 06e6 23F07F43 		bic	r3, r3, #-16777216
 1289 06ea 23F0C003 		bic	r3, r3, #192
 1290 06ee 5360     		str	r3, [r2, #4]
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1291              		.loc 1 985 0
 1292 06f0 FFF7FEFF 		bl	RTC_ExitInitMode
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1293              		.loc 1 987 0
 1294 06f4 FFF7FEFF 		bl	RTC_WaitForSynchro
 1295 06f8 0346     		mov	r3, r0
 1296 06fa 002B     		cmp	r3, #0
 1297 06fc 03D1     		bne	.L84
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1298              		.loc 1 989 0
 1299 06fe 4FF00003 		mov	r3, #0
 1300 0702 FB72     		strb	r3, [r7, #11]
 1301 0704 02E0     		b	.L83
 1302              	.L84:
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1303              		.loc 1 993 0
 1304 0706 4FF00103 		mov	r3, #1
 1305 070a FB72     		strb	r3, [r7, #11]
 1306              	.L83:
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1307              		.loc 1 997 0
 1308 070c 044B     		ldr	r3, .L86
 1309 070e 4FF0FF02 		mov	r2, #255
 1310 0712 5A62     		str	r2, [r3, #36]
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1311              		.loc 1 999 0
 1312 0714 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1313              		.loc 1 1000 0
 1314 0716 1846     		mov	r0, r3
 1315 0718 07F11407 		add	r7, r7, #20
 1316 071c BD46     		mov	sp, r7
 1317 071e 90BD     		pop	{r4, r7, pc}
 1318              	.L87:
 1319              		.align	2
 1320              	.L86:
 1321 0720 00280040 		.word	1073752064
 1322              		.cfi_endproc
 1323              	.LFE123:
 1325              		.align	2
 1326              		.global	RTC_DateStructInit
 1327              		.thumb
 1328              		.thumb_func
 1330              	RTC_DateStructInit:
 1331              	.LFB124:
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1332              		.loc 1 1010 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 8
 1335              		@ frame_needed = 1, uses_anonymous_args = 0
 1336              		@ link register save eliminated.
 1337 0724 80B4     		push	{r7}
 1338              	.LCFI41:
 1339              		.cfi_def_cfa_offset 4
 1340              		.cfi_offset 7, -4
 1341 0726 83B0     		sub	sp, sp, #12
 1342              	.LCFI42:
 1343              		.cfi_def_cfa_offset 16
 1344 0728 00AF     		add	r7, sp, #0
 1345              	.LCFI43:
 1346              		.cfi_def_cfa_register 7
 1347 072a 7860     		str	r0, [r7, #4]
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1348              		.loc 1 1012 0
 1349 072c 7B68     		ldr	r3, [r7, #4]
 1350 072e 4FF00102 		mov	r2, #1
 1351 0732 1A70     		strb	r2, [r3, #0]
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1352              		.loc 1 1013 0
 1353 0734 7B68     		ldr	r3, [r7, #4]
 1354 0736 4FF00102 		mov	r2, #1
 1355 073a 9A70     		strb	r2, [r3, #2]
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1356              		.loc 1 1014 0
 1357 073c 7B68     		ldr	r3, [r7, #4]
 1358 073e 4FF00102 		mov	r2, #1
 1359 0742 5A70     		strb	r2, [r3, #1]
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1360              		.loc 1 1015 0
 1361 0744 7B68     		ldr	r3, [r7, #4]
 1362 0746 4FF00002 		mov	r2, #0
 1363 074a DA70     		strb	r2, [r3, #3]
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1364              		.loc 1 1016 0
 1365 074c 07F10C07 		add	r7, r7, #12
 1366 0750 BD46     		mov	sp, r7
 1367 0752 80BC     		pop	{r7}
 1368 0754 7047     		bx	lr
 1369              		.cfi_endproc
 1370              	.LFE124:
 1372 0756 00BF     		.align	2
 1373              		.global	RTC_GetDate
 1374              		.thumb
 1375              		.thumb_func
 1377              	RTC_GetDate:
 1378              	.LFB125:
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1379              		.loc 1 1029 0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 16
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383 0758 80B5     		push	{r7, lr}
 1384              	.LCFI44:
 1385              		.cfi_def_cfa_offset 8
 1386              		.cfi_offset 7, -8
 1387              		.cfi_offset 14, -4
 1388 075a 84B0     		sub	sp, sp, #16
 1389              	.LCFI45:
 1390              		.cfi_def_cfa_offset 24
 1391 075c 00AF     		add	r7, sp, #0
 1392              	.LCFI46:
 1393              		.cfi_def_cfa_register 7
 1394 075e 7860     		str	r0, [r7, #4]
 1395 0760 3960     		str	r1, [r7, #0]
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1396              		.loc 1 1030 0
 1397 0762 4FF00003 		mov	r3, #0
 1398 0766 FB60     		str	r3, [r7, #12]
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1399              		.loc 1 1036 0
 1400 0768 234B     		ldr	r3, .L91
 1401 076a 5B68     		ldr	r3, [r3, #4]
 1402 076c 23F07F43 		bic	r3, r3, #-16777216
 1403 0770 23F0C003 		bic	r3, r3, #192
 1404 0774 FB60     		str	r3, [r7, #12]
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1405              		.loc 1 1039 0
 1406 0776 FB68     		ldr	r3, [r7, #12]
 1407 0778 03F47F03 		and	r3, r3, #16711680
 1408 077c 4FEA1343 		lsr	r3, r3, #16
 1409 0780 DAB2     		uxtb	r2, r3
 1410 0782 3B68     		ldr	r3, [r7, #0]
 1411 0784 DA70     		strb	r2, [r3, #3]
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1412              		.loc 1 1040 0
 1413 0786 FB68     		ldr	r3, [r7, #12]
 1414 0788 03F4F853 		and	r3, r3, #7936
 1415 078c 4FEA1323 		lsr	r3, r3, #8
 1416 0790 DAB2     		uxtb	r2, r3
 1417 0792 3B68     		ldr	r3, [r7, #0]
 1418 0794 5A70     		strb	r2, [r3, #1]
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1419              		.loc 1 1041 0
 1420 0796 FB68     		ldr	r3, [r7, #12]
 1421 0798 DBB2     		uxtb	r3, r3
 1422 079a 03F03F03 		and	r3, r3, #63
 1423 079e DAB2     		uxtb	r2, r3
 1424 07a0 3B68     		ldr	r3, [r7, #0]
 1425 07a2 9A70     		strb	r2, [r3, #2]
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1426              		.loc 1 1042 0
 1427 07a4 FB68     		ldr	r3, [r7, #12]
 1428 07a6 03F46043 		and	r3, r3, #57344
 1429 07aa 4FEA5333 		lsr	r3, r3, #13
 1430 07ae DAB2     		uxtb	r2, r3
 1431 07b0 3B68     		ldr	r3, [r7, #0]
 1432 07b2 1A70     		strb	r2, [r3, #0]
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1433              		.loc 1 1045 0
 1434 07b4 7B68     		ldr	r3, [r7, #4]
 1435 07b6 002B     		cmp	r3, #0
 1436 07b8 1AD1     		bne	.L89
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1437              		.loc 1 1048 0
 1438 07ba 3B68     		ldr	r3, [r7, #0]
 1439 07bc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1440 07be 1846     		mov	r0, r3
 1441 07c0 00F070FF 		bl	RTC_Bcd2ToByte
 1442 07c4 0346     		mov	r3, r0
 1443 07c6 1A46     		mov	r2, r3
 1444 07c8 3B68     		ldr	r3, [r7, #0]
 1445 07ca DA70     		strb	r2, [r3, #3]
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1446              		.loc 1 1049 0
 1447 07cc 3B68     		ldr	r3, [r7, #0]
 1448 07ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1449 07d0 1846     		mov	r0, r3
 1450 07d2 00F067FF 		bl	RTC_Bcd2ToByte
 1451 07d6 0346     		mov	r3, r0
 1452 07d8 1A46     		mov	r2, r3
 1453 07da 3B68     		ldr	r3, [r7, #0]
 1454 07dc 5A70     		strb	r2, [r3, #1]
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1455              		.loc 1 1050 0
 1456 07de 3B68     		ldr	r3, [r7, #0]
 1457 07e0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1458 07e2 1846     		mov	r0, r3
 1459 07e4 00F05EFF 		bl	RTC_Bcd2ToByte
 1460 07e8 0346     		mov	r3, r0
 1461 07ea 1A46     		mov	r2, r3
 1462 07ec 3B68     		ldr	r3, [r7, #0]
 1463 07ee 9A70     		strb	r2, [r3, #2]
 1464              	.L89:
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1465              		.loc 1 1052 0
 1466 07f0 07F11007 		add	r7, r7, #16
 1467 07f4 BD46     		mov	sp, r7
 1468 07f6 80BD     		pop	{r7, pc}
 1469              	.L92:
 1470              		.align	2
 1471              	.L91:
 1472 07f8 00280040 		.word	1073752064
 1473              		.cfi_endproc
 1474              	.LFE125:
 1476              		.align	2
 1477              		.global	RTC_SetAlarm
 1478              		.thumb
 1479              		.thumb_func
 1481              	RTC_SetAlarm:
 1482              	.LFB126:
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1483              		.loc 1 1089 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 24
 1486              		@ frame_needed = 1, uses_anonymous_args = 0
 1487 07fc 90B5     		push	{r4, r7, lr}
 1488              	.LCFI47:
 1489              		.cfi_def_cfa_offset 12
 1490              		.cfi_offset 4, -12
 1491              		.cfi_offset 7, -8
 1492              		.cfi_offset 14, -4
 1493 07fe 87B0     		sub	sp, sp, #28
 1494              	.LCFI48:
 1495              		.cfi_def_cfa_offset 40
 1496 0800 00AF     		add	r7, sp, #0
 1497              	.LCFI49:
 1498              		.cfi_def_cfa_register 7
 1499 0802 F860     		str	r0, [r7, #12]
 1500 0804 B960     		str	r1, [r7, #8]
 1501 0806 7A60     		str	r2, [r7, #4]
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1502              		.loc 1 1090 0
 1503 0808 4FF00003 		mov	r3, #0
 1504 080c 7B61     		str	r3, [r7, #20]
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1505              		.loc 1 1098 0
 1506 080e FB68     		ldr	r3, [r7, #12]
 1507 0810 002B     		cmp	r3, #0
 1508 0812 0AD1     		bne	.L94
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1509              		.loc 1 1100 0
 1510 0814 4D4B     		ldr	r3, .L104
 1511 0816 9B68     		ldr	r3, [r3, #8]
 1512 0818 03F04003 		and	r3, r3, #64
 1513 081c 002B     		cmp	r3, #0
 1514 081e 29D1     		bne	.L96
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1515              		.loc 1 1107 0
 1516 0820 7B68     		ldr	r3, [r7, #4]
 1517 0822 4FF00002 		mov	r2, #0
 1518 0826 DA70     		strb	r2, [r3, #3]
 1519 0828 24E0     		b	.L96
 1520              	.L94:
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1521              		.loc 1 1124 0
 1522 082a 484B     		ldr	r3, .L104
 1523 082c 9B68     		ldr	r3, [r3, #8]
 1524 082e 03F04003 		and	r3, r3, #64
 1525 0832 002B     		cmp	r3, #0
 1526 0834 07D0     		beq	.L97
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1527              		.loc 1 1126 0
 1528 0836 7B68     		ldr	r3, [r7, #4]
 1529 0838 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1530 083a 1846     		mov	r0, r3
 1531 083c 00F032FF 		bl	RTC_Bcd2ToByte
 1532 0840 0346     		mov	r3, r0
 1533 0842 7B61     		str	r3, [r7, #20]
 1534 0844 03E0     		b	.L98
 1535              	.L97:
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1536              		.loc 1 1132 0
 1537 0846 7B68     		ldr	r3, [r7, #4]
 1538 0848 4FF00002 		mov	r2, #0
 1539 084c DA70     		strb	r2, [r3, #3]
 1540              	.L98:
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1541              		.loc 1 1139 0
 1542 084e 7B68     		ldr	r3, [r7, #4]
 1543 0850 9B68     		ldr	r3, [r3, #8]
 1544 0852 002B     		cmp	r3, #0
 1545 0854 07D1     		bne	.L99
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1546              		.loc 1 1141 0
 1547 0856 7B68     		ldr	r3, [r7, #4]
 1548 0858 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1549 085a 1846     		mov	r0, r3
 1550 085c 00F022FF 		bl	RTC_Bcd2ToByte
 1551 0860 0346     		mov	r3, r0
 1552 0862 7B61     		str	r3, [r7, #20]
 1553 0864 06E0     		b	.L96
 1554              	.L99:
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1555              		.loc 1 1146 0
 1556 0866 7B68     		ldr	r3, [r7, #4]
 1557 0868 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1558 086a 1846     		mov	r0, r3
 1559 086c 00F01AFF 		bl	RTC_Bcd2ToByte
 1560 0870 0346     		mov	r3, r0
 1561 0872 7B61     		str	r3, [r7, #20]
 1562              	.L96:
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1563              		.loc 1 1152 0
 1564 0874 FB68     		ldr	r3, [r7, #12]
 1565 0876 002B     		cmp	r3, #0
 1566 0878 1DD0     		beq	.L100
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1567              		.loc 1 1154 0
 1568 087a 7B68     		ldr	r3, [r7, #4]
 1569 087c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1570 087e 4FEA0342 		lsl	r2, r3, #16
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1571              		.loc 1 1155 0
 1572 0882 7B68     		ldr	r3, [r7, #4]
 1573 0884 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1574 0886 4FEA0323 		lsl	r3, r3, #8
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1575              		.loc 1 1154 0
 1576 088a 1A43     		orrs	r2, r2, r3
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1577              		.loc 1 1156 0
 1578 088c 7B68     		ldr	r3, [r7, #4]
 1579 088e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1580              		.loc 1 1155 0
 1581 0890 1A43     		orrs	r2, r2, r3
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1582              		.loc 1 1157 0
 1583 0892 7B68     		ldr	r3, [r7, #4]
 1584 0894 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1585 0896 4FEA0343 		lsl	r3, r3, #16
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1586              		.loc 1 1156 0
 1587 089a 1A43     		orrs	r2, r2, r3
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1588              		.loc 1 1158 0
 1589 089c 7B68     		ldr	r3, [r7, #4]
 1590 089e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1591 08a0 4FEA0363 		lsl	r3, r3, #24
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1592              		.loc 1 1157 0
 1593 08a4 1A43     		orrs	r2, r2, r3
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1594              		.loc 1 1159 0
 1595 08a6 7B68     		ldr	r3, [r7, #4]
 1596 08a8 9B68     		ldr	r3, [r3, #8]
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1597              		.loc 1 1158 0
 1598 08aa 1A43     		orrs	r2, r2, r3
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1599              		.loc 1 1160 0
 1600 08ac 7B68     		ldr	r3, [r7, #4]
 1601 08ae 5B68     		ldr	r3, [r3, #4]
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1602              		.loc 1 1154 0
 1603 08b0 1343     		orrs	r3, r3, r2
 1604 08b2 7B61     		str	r3, [r7, #20]
 1605 08b4 2FE0     		b	.L101
 1606              	.L100:
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1607              		.loc 1 1164 0
 1608 08b6 7B68     		ldr	r3, [r7, #4]
 1609 08b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1610 08ba 1846     		mov	r0, r3
 1611 08bc 00F0D0FE 		bl	RTC_ByteToBcd2
 1612 08c0 0346     		mov	r3, r0
 1613 08c2 4FEA0344 		lsl	r4, r3, #16
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1614              		.loc 1 1165 0
 1615 08c6 7B68     		ldr	r3, [r7, #4]
 1616 08c8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1617 08ca 1846     		mov	r0, r3
 1618 08cc 00F0C8FE 		bl	RTC_ByteToBcd2
 1619 08d0 0346     		mov	r3, r0
 1620 08d2 4FEA0323 		lsl	r3, r3, #8
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1621              		.loc 1 1164 0
 1622 08d6 1C43     		orrs	r4, r4, r3
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1623              		.loc 1 1166 0
 1624 08d8 7B68     		ldr	r3, [r7, #4]
 1625 08da 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1626 08dc 1846     		mov	r0, r3
 1627 08de 00F0BFFE 		bl	RTC_ByteToBcd2
 1628 08e2 0346     		mov	r3, r0
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1629              		.loc 1 1165 0
 1630 08e4 44EA0302 		orr	r2, r4, r3
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1631              		.loc 1 1167 0
 1632 08e8 7B68     		ldr	r3, [r7, #4]
 1633 08ea DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1634 08ec 4FEA0343 		lsl	r3, r3, #16
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1635              		.loc 1 1166 0
 1636 08f0 42EA0304 		orr	r4, r2, r3
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1637              		.loc 1 1168 0
 1638 08f4 7B68     		ldr	r3, [r7, #4]
 1639 08f6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1640 08f8 1846     		mov	r0, r3
 1641 08fa 00F0B1FE 		bl	RTC_ByteToBcd2
 1642 08fe 0346     		mov	r3, r0
 1643 0900 4FEA0363 		lsl	r3, r3, #24
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1644              		.loc 1 1167 0
 1645 0904 44EA0302 		orr	r2, r4, r3
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1646              		.loc 1 1169 0
 1647 0908 7B68     		ldr	r3, [r7, #4]
 1648 090a 9B68     		ldr	r3, [r3, #8]
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1649              		.loc 1 1168 0
 1650 090c 1A43     		orrs	r2, r2, r3
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1651              		.loc 1 1170 0
 1652 090e 7B68     		ldr	r3, [r7, #4]
 1653 0910 5B68     		ldr	r3, [r3, #4]
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1654              		.loc 1 1164 0
 1655 0912 1343     		orrs	r3, r3, r2
 1656 0914 7B61     		str	r3, [r7, #20]
 1657              	.L101:
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1658              		.loc 1 1174 0
 1659 0916 0D4B     		ldr	r3, .L104
 1660 0918 4FF0CA02 		mov	r2, #202
 1661 091c 5A62     		str	r2, [r3, #36]
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1662              		.loc 1 1175 0
 1663 091e 0B4B     		ldr	r3, .L104
 1664 0920 4FF05302 		mov	r2, #83
 1665 0924 5A62     		str	r2, [r3, #36]
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1666              		.loc 1 1178 0
 1667 0926 BB68     		ldr	r3, [r7, #8]
 1668 0928 B3F5807F 		cmp	r3, #256
 1669 092c 03D1     		bne	.L102
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1670              		.loc 1 1180 0
 1671 092e 074B     		ldr	r3, .L104
 1672 0930 7A69     		ldr	r2, [r7, #20]
 1673 0932 DA61     		str	r2, [r3, #28]
 1674 0934 02E0     		b	.L103
 1675              	.L102:
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1676              		.loc 1 1184 0
 1677 0936 054B     		ldr	r3, .L104
 1678 0938 7A69     		ldr	r2, [r7, #20]
 1679 093a 1A62     		str	r2, [r3, #32]
 1680              	.L103:
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1681              		.loc 1 1188 0
 1682 093c 034B     		ldr	r3, .L104
 1683 093e 4FF0FF02 		mov	r2, #255
 1684 0942 5A62     		str	r2, [r3, #36]
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1685              		.loc 1 1189 0
 1686 0944 07F11C07 		add	r7, r7, #28
 1687 0948 BD46     		mov	sp, r7
 1688 094a 90BD     		pop	{r4, r7, pc}
 1689              	.L105:
 1690              		.align	2
 1691              	.L104:
 1692 094c 00280040 		.word	1073752064
 1693              		.cfi_endproc
 1694              	.LFE126:
 1696              		.align	2
 1697              		.global	RTC_AlarmStructInit
 1698              		.thumb
 1699              		.thumb_func
 1701              	RTC_AlarmStructInit:
 1702              	.LFB127:
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1703              		.loc 1 1200 0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 8
 1706              		@ frame_needed = 1, uses_anonymous_args = 0
 1707              		@ link register save eliminated.
 1708 0950 80B4     		push	{r7}
 1709              	.LCFI50:
 1710              		.cfi_def_cfa_offset 4
 1711              		.cfi_offset 7, -4
 1712 0952 83B0     		sub	sp, sp, #12
 1713              	.LCFI51:
 1714              		.cfi_def_cfa_offset 16
 1715 0954 00AF     		add	r7, sp, #0
 1716              	.LCFI52:
 1717              		.cfi_def_cfa_register 7
 1718 0956 7860     		str	r0, [r7, #4]
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1719              		.loc 1 1202 0
 1720 0958 7B68     		ldr	r3, [r7, #4]
 1721 095a 4FF00002 		mov	r2, #0
 1722 095e DA70     		strb	r2, [r3, #3]
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1723              		.loc 1 1203 0
 1724 0960 7B68     		ldr	r3, [r7, #4]
 1725 0962 4FF00002 		mov	r2, #0
 1726 0966 1A70     		strb	r2, [r3, #0]
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1727              		.loc 1 1204 0
 1728 0968 7B68     		ldr	r3, [r7, #4]
 1729 096a 4FF00002 		mov	r2, #0
 1730 096e 5A70     		strb	r2, [r3, #1]
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1731              		.loc 1 1205 0
 1732 0970 7B68     		ldr	r3, [r7, #4]
 1733 0972 4FF00002 		mov	r2, #0
 1734 0976 9A70     		strb	r2, [r3, #2]
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1735              		.loc 1 1208 0
 1736 0978 7B68     		ldr	r3, [r7, #4]
 1737 097a 4FF00002 		mov	r2, #0
 1738 097e 9A60     		str	r2, [r3, #8]
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1739              		.loc 1 1209 0
 1740 0980 7B68     		ldr	r3, [r7, #4]
 1741 0982 4FF00102 		mov	r2, #1
 1742 0986 1A73     		strb	r2, [r3, #12]
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1743              		.loc 1 1212 0
 1744 0988 7B68     		ldr	r3, [r7, #4]
 1745 098a 4FF00002 		mov	r2, #0
 1746 098e 5A60     		str	r2, [r3, #4]
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1747              		.loc 1 1213 0
 1748 0990 07F10C07 		add	r7, r7, #12
 1749 0994 BD46     		mov	sp, r7
 1750 0996 80BC     		pop	{r7}
 1751 0998 7047     		bx	lr
 1752              		.cfi_endproc
 1753              	.LFE127:
 1755 099a 00BF     		.align	2
 1756              		.global	RTC_GetAlarm
 1757              		.thumb
 1758              		.thumb_func
 1760              	RTC_GetAlarm:
 1761              	.LFB128:
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1762              		.loc 1 1230 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 24
 1765              		@ frame_needed = 1, uses_anonymous_args = 0
 1766 099c 80B5     		push	{r7, lr}
 1767              	.LCFI53:
 1768              		.cfi_def_cfa_offset 8
 1769              		.cfi_offset 7, -8
 1770              		.cfi_offset 14, -4
 1771 099e 86B0     		sub	sp, sp, #24
 1772              	.LCFI54:
 1773              		.cfi_def_cfa_offset 32
 1774 09a0 00AF     		add	r7, sp, #0
 1775              	.LCFI55:
 1776              		.cfi_def_cfa_register 7
 1777 09a2 F860     		str	r0, [r7, #12]
 1778 09a4 B960     		str	r1, [r7, #8]
 1779 09a6 7A60     		str	r2, [r7, #4]
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1780              		.loc 1 1231 0
 1781 09a8 4FF00003 		mov	r3, #0
 1782 09ac 7B61     		str	r3, [r7, #20]
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1783              		.loc 1 1238 0
 1784 09ae BB68     		ldr	r3, [r7, #8]
 1785 09b0 B3F5807F 		cmp	r3, #256
 1786 09b4 03D1     		bne	.L108
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1787              		.loc 1 1240 0
 1788 09b6 314B     		ldr	r3, .L111
 1789 09b8 DB69     		ldr	r3, [r3, #28]
 1790 09ba 7B61     		str	r3, [r7, #20]
 1791 09bc 02E0     		b	.L109
 1792              	.L108:
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1793              		.loc 1 1244 0
 1794 09be 2F4B     		ldr	r3, .L111
 1795 09c0 1B6A     		ldr	r3, [r3, #32]
 1796 09c2 7B61     		str	r3, [r7, #20]
 1797              	.L109:
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1798              		.loc 1 1248 0
 1799 09c4 7B69     		ldr	r3, [r7, #20]
 1800 09c6 03F47C13 		and	r3, r3, #4128768
 1801 09ca 4FEA1343 		lsr	r3, r3, #16
 1802 09ce DAB2     		uxtb	r2, r3
 1803 09d0 7B68     		ldr	r3, [r7, #4]
 1804 09d2 1A70     		strb	r2, [r3, #0]
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1805              		.loc 1 1250 0
 1806 09d4 7B69     		ldr	r3, [r7, #20]
 1807 09d6 03F4FE43 		and	r3, r3, #32512
 1808 09da 4FEA1323 		lsr	r3, r3, #8
 1809 09de DAB2     		uxtb	r2, r3
 1810 09e0 7B68     		ldr	r3, [r7, #4]
 1811 09e2 5A70     		strb	r2, [r3, #1]
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1812              		.loc 1 1252 0
 1813 09e4 7B69     		ldr	r3, [r7, #20]
 1814 09e6 DBB2     		uxtb	r3, r3
 1815 09e8 03F07F03 		and	r3, r3, #127
 1816 09ec DAB2     		uxtb	r2, r3
 1817 09ee 7B68     		ldr	r3, [r7, #4]
 1818 09f0 9A70     		strb	r2, [r3, #2]
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1819              		.loc 1 1254 0
 1820 09f2 7B69     		ldr	r3, [r7, #20]
 1821 09f4 03F48003 		and	r3, r3, #4194304
 1822 09f8 4FEA1343 		lsr	r3, r3, #16
 1823 09fc DAB2     		uxtb	r2, r3
 1824 09fe 7B68     		ldr	r3, [r7, #4]
 1825 0a00 DA70     		strb	r2, [r3, #3]
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1826              		.loc 1 1255 0
 1827 0a02 7B69     		ldr	r3, [r7, #20]
 1828 0a04 03F07C53 		and	r3, r3, #1056964608
 1829 0a08 4FEA1363 		lsr	r3, r3, #24
 1830 0a0c DAB2     		uxtb	r2, r3
 1831 0a0e 7B68     		ldr	r3, [r7, #4]
 1832 0a10 1A73     		strb	r2, [r3, #12]
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1833              		.loc 1 1256 0
 1834 0a12 7B69     		ldr	r3, [r7, #20]
 1835 0a14 03F08042 		and	r2, r3, #1073741824
 1836 0a18 7B68     		ldr	r3, [r7, #4]
 1837 0a1a 9A60     		str	r2, [r3, #8]
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1838              		.loc 1 1257 0
 1839 0a1c 7B69     		ldr	r3, [r7, #20]
 1840 0a1e 03F08032 		and	r2, r3, #-2139062144
 1841 0a22 7B68     		ldr	r3, [r7, #4]
 1842 0a24 5A60     		str	r2, [r3, #4]
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1843              		.loc 1 1259 0
 1844 0a26 FB68     		ldr	r3, [r7, #12]
 1845 0a28 002B     		cmp	r3, #0
 1846 0a2a 23D1     		bne	.L107
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1847              		.loc 1 1261 0
 1848 0a2c 7B68     		ldr	r3, [r7, #4]
 1849 0a2e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1850 0a30 1846     		mov	r0, r3
 1851 0a32 00F037FE 		bl	RTC_Bcd2ToByte
 1852 0a36 0346     		mov	r3, r0
 1853 0a38 1A46     		mov	r2, r3
 1854 0a3a 7B68     		ldr	r3, [r7, #4]
 1855 0a3c 1A70     		strb	r2, [r3, #0]
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1856              		.loc 1 1263 0
 1857 0a3e 7B68     		ldr	r3, [r7, #4]
 1858 0a40 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1859 0a42 1846     		mov	r0, r3
 1860 0a44 00F02EFE 		bl	RTC_Bcd2ToByte
 1861 0a48 0346     		mov	r3, r0
 1862 0a4a 1A46     		mov	r2, r3
 1863 0a4c 7B68     		ldr	r3, [r7, #4]
 1864 0a4e 5A70     		strb	r2, [r3, #1]
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1865              		.loc 1 1265 0
 1866 0a50 7B68     		ldr	r3, [r7, #4]
 1867 0a52 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1868 0a54 1846     		mov	r0, r3
 1869 0a56 00F025FE 		bl	RTC_Bcd2ToByte
 1870 0a5a 0346     		mov	r3, r0
 1871 0a5c 1A46     		mov	r2, r3
 1872 0a5e 7B68     		ldr	r3, [r7, #4]
 1873 0a60 9A70     		strb	r2, [r3, #2]
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1874              		.loc 1 1267 0
 1875 0a62 7B68     		ldr	r3, [r7, #4]
 1876 0a64 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1877 0a66 1846     		mov	r0, r3
 1878 0a68 00F01CFE 		bl	RTC_Bcd2ToByte
 1879 0a6c 0346     		mov	r3, r0
 1880 0a6e 1A46     		mov	r2, r3
 1881 0a70 7B68     		ldr	r3, [r7, #4]
 1882 0a72 1A73     		strb	r2, [r3, #12]
 1883              	.L107:
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1884              		.loc 1 1269 0
 1885 0a74 07F11807 		add	r7, r7, #24
 1886 0a78 BD46     		mov	sp, r7
 1887 0a7a 80BD     		pop	{r7, pc}
 1888              	.L112:
 1889              		.align	2
 1890              	.L111:
 1891 0a7c 00280040 		.word	1073752064
 1892              		.cfi_endproc
 1893              	.LFE128:
 1895              		.align	2
 1896              		.global	RTC_AlarmCmd
 1897              		.thumb
 1898              		.thumb_func
 1900              	RTC_AlarmCmd:
 1901              	.LFB129:
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1902              		.loc 1 1284 0
 1903              		.cfi_startproc
 1904              		@ args = 0, pretend = 0, frame = 24
 1905              		@ frame_needed = 1, uses_anonymous_args = 0
 1906              		@ link register save eliminated.
 1907 0a80 80B4     		push	{r7}
 1908              	.LCFI56:
 1909              		.cfi_def_cfa_offset 4
 1910              		.cfi_offset 7, -4
 1911 0a82 87B0     		sub	sp, sp, #28
 1912              	.LCFI57:
 1913              		.cfi_def_cfa_offset 32
 1914 0a84 00AF     		add	r7, sp, #0
 1915              	.LCFI58:
 1916              		.cfi_def_cfa_register 7
 1917 0a86 7860     		str	r0, [r7, #4]
 1918 0a88 0B46     		mov	r3, r1
 1919 0a8a FB70     		strb	r3, [r7, #3]
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1920              		.loc 1 1285 0
 1921 0a8c 4FF00003 		mov	r3, #0
 1922 0a90 FB60     		str	r3, [r7, #12]
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1923              		.loc 1 1286 0
 1924 0a92 4FF00003 		mov	r3, #0
 1925 0a96 3B61     		str	r3, [r7, #16]
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1926              		.loc 1 1287 0
 1927 0a98 4FF00003 		mov	r3, #0
 1928 0a9c FB75     		strb	r3, [r7, #23]
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1929              		.loc 1 1294 0
 1930 0a9e 244B     		ldr	r3, .L120
 1931 0aa0 4FF0CA02 		mov	r2, #202
 1932 0aa4 5A62     		str	r2, [r3, #36]
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1933              		.loc 1 1295 0
 1934 0aa6 224B     		ldr	r3, .L120
 1935 0aa8 4FF05302 		mov	r2, #83
 1936 0aac 5A62     		str	r2, [r3, #36]
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1937              		.loc 1 1298 0
 1938 0aae FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1939 0ab0 002B     		cmp	r3, #0
 1940 0ab2 09D0     		beq	.L114
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1941              		.loc 1 1300 0
 1942 0ab4 1E4B     		ldr	r3, .L120
 1943 0ab6 1E4A     		ldr	r2, .L120
 1944 0ab8 9168     		ldr	r1, [r2, #8]
 1945 0aba 7A68     		ldr	r2, [r7, #4]
 1946 0abc 0A43     		orrs	r2, r2, r1
 1947 0abe 9A60     		str	r2, [r3, #8]
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1948              		.loc 1 1302 0
 1949 0ac0 4FF00103 		mov	r3, #1
 1950 0ac4 FB75     		strb	r3, [r7, #23]
 1951 0ac6 28E0     		b	.L115
 1952              	.L114:
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1953              		.loc 1 1307 0
 1954 0ac8 194B     		ldr	r3, .L120
 1955 0aca 194A     		ldr	r2, .L120
 1956 0acc 9168     		ldr	r1, [r2, #8]
 1957 0ace 7A68     		ldr	r2, [r7, #4]
 1958 0ad0 6FEA0202 		mvn	r2, r2
 1959 0ad4 0A40     		ands	r2, r2, r1
 1960 0ad6 9A60     		str	r2, [r3, #8]
 1961              	.L117:
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1962              		.loc 1 1312 0 discriminator 1
 1963 0ad8 154B     		ldr	r3, .L120
 1964 0ada DA68     		ldr	r2, [r3, #12]
 1965 0adc 7B68     		ldr	r3, [r7, #4]
 1966 0ade 4FEA1323 		lsr	r3, r3, #8
 1967 0ae2 1340     		ands	r3, r3, r2
 1968 0ae4 3B61     		str	r3, [r7, #16]
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1969              		.loc 1 1313 0 discriminator 1
 1970 0ae6 FB68     		ldr	r3, [r7, #12]
 1971 0ae8 03F10103 		add	r3, r3, #1
 1972 0aec FB60     		str	r3, [r7, #12]
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1973              		.loc 1 1314 0 discriminator 1
 1974 0aee FB68     		ldr	r3, [r7, #12]
 1975 0af0 B3F5803F 		cmp	r3, #65536
 1976 0af4 02D0     		beq	.L116
 1977 0af6 3B69     		ldr	r3, [r7, #16]
 1978 0af8 002B     		cmp	r3, #0
 1979 0afa EDD0     		beq	.L117
 1980              	.L116:
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 1981              		.loc 1 1316 0
 1982 0afc 0C4B     		ldr	r3, .L120
 1983 0afe DA68     		ldr	r2, [r3, #12]
 1984 0b00 7B68     		ldr	r3, [r7, #4]
 1985 0b02 4FEA1323 		lsr	r3, r3, #8
 1986 0b06 1340     		ands	r3, r3, r2
 1987 0b08 002B     		cmp	r3, #0
 1988 0b0a 03D1     		bne	.L118
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1989              		.loc 1 1318 0
 1990 0b0c 4FF00003 		mov	r3, #0
 1991 0b10 FB75     		strb	r3, [r7, #23]
 1992 0b12 02E0     		b	.L115
 1993              	.L118:
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1994              		.loc 1 1322 0
 1995 0b14 4FF00103 		mov	r3, #1
 1996 0b18 FB75     		strb	r3, [r7, #23]
 1997              	.L115:
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1998              		.loc 1 1327 0
 1999 0b1a 054B     		ldr	r3, .L120
 2000 0b1c 4FF0FF02 		mov	r2, #255
 2001 0b20 5A62     		str	r2, [r3, #36]
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2002              		.loc 1 1329 0
 2003 0b22 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2004              		.loc 1 1330 0
 2005 0b24 1846     		mov	r0, r3
 2006 0b26 07F11C07 		add	r7, r7, #28
 2007 0b2a BD46     		mov	sp, r7
 2008 0b2c 80BC     		pop	{r7}
 2009 0b2e 7047     		bx	lr
 2010              	.L121:
 2011              		.align	2
 2012              	.L120:
 2013 0b30 00280040 		.word	1073752064
 2014              		.cfi_endproc
 2015              	.LFE129:
 2017              		.align	2
 2018              		.global	RTC_AlarmSubSecondConfig
 2019              		.thumb
 2020              		.thumb_func
 2022              	RTC_AlarmSubSecondConfig:
 2023              	.LFB130:
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2024              		.loc 1 1378 0
 2025              		.cfi_startproc
 2026              		@ args = 0, pretend = 0, frame = 24
 2027              		@ frame_needed = 1, uses_anonymous_args = 0
 2028              		@ link register save eliminated.
 2029 0b34 80B4     		push	{r7}
 2030              	.LCFI59:
 2031              		.cfi_def_cfa_offset 4
 2032              		.cfi_offset 7, -4
 2033 0b36 87B0     		sub	sp, sp, #28
 2034              	.LCFI60:
 2035              		.cfi_def_cfa_offset 32
 2036 0b38 00AF     		add	r7, sp, #0
 2037              	.LCFI61:
 2038              		.cfi_def_cfa_register 7
 2039 0b3a F860     		str	r0, [r7, #12]
 2040 0b3c B960     		str	r1, [r7, #8]
 2041 0b3e 7A60     		str	r2, [r7, #4]
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2042              		.loc 1 1379 0
 2043 0b40 4FF00003 		mov	r3, #0
 2044 0b44 7B61     		str	r3, [r7, #20]
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2045              		.loc 1 1387 0
 2046 0b46 104B     		ldr	r3, .L125
 2047 0b48 4FF0CA02 		mov	r2, #202
 2048 0b4c 5A62     		str	r2, [r3, #36]
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2049              		.loc 1 1388 0
 2050 0b4e 0E4B     		ldr	r3, .L125
 2051 0b50 4FF05302 		mov	r2, #83
 2052 0b54 5A62     		str	r2, [r3, #36]
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2053              		.loc 1 1391 0
 2054 0b56 BA68     		ldr	r2, [r7, #8]
 2055 0b58 7B68     		ldr	r3, [r7, #4]
 2056 0b5a 1343     		orrs	r3, r3, r2
 2057 0b5c 7B61     		str	r3, [r7, #20]
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2058              		.loc 1 1393 0
 2059 0b5e FB68     		ldr	r3, [r7, #12]
 2060 0b60 B3F5807F 		cmp	r3, #256
 2061 0b64 03D1     		bne	.L123
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2062              		.loc 1 1396 0
 2063 0b66 084B     		ldr	r3, .L125
 2064 0b68 7A69     		ldr	r2, [r7, #20]
 2065 0b6a 5A64     		str	r2, [r3, #68]
 2066 0b6c 02E0     		b	.L124
 2067              	.L123:
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2068              		.loc 1 1401 0
 2069 0b6e 064B     		ldr	r3, .L125
 2070 0b70 7A69     		ldr	r2, [r7, #20]
 2071 0b72 9A64     		str	r2, [r3, #72]
 2072              	.L124:
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2073              		.loc 1 1405 0
 2074 0b74 044B     		ldr	r3, .L125
 2075 0b76 4FF0FF02 		mov	r2, #255
 2076 0b7a 5A62     		str	r2, [r3, #36]
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2077              		.loc 1 1407 0
 2078 0b7c 07F11C07 		add	r7, r7, #28
 2079 0b80 BD46     		mov	sp, r7
 2080 0b82 80BC     		pop	{r7}
 2081 0b84 7047     		bx	lr
 2082              	.L126:
 2083 0b86 00BF     		.align	2
 2084              	.L125:
 2085 0b88 00280040 		.word	1073752064
 2086              		.cfi_endproc
 2087              	.LFE130:
 2089              		.align	2
 2090              		.global	RTC_GetAlarmSubSecond
 2091              		.thumb
 2092              		.thumb_func
 2094              	RTC_GetAlarmSubSecond:
 2095              	.LFB131:
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2096              		.loc 1 1419 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 16
 2099              		@ frame_needed = 1, uses_anonymous_args = 0
 2100              		@ link register save eliminated.
 2101 0b8c 80B4     		push	{r7}
 2102              	.LCFI62:
 2103              		.cfi_def_cfa_offset 4
 2104              		.cfi_offset 7, -4
 2105 0b8e 85B0     		sub	sp, sp, #20
 2106              	.LCFI63:
 2107              		.cfi_def_cfa_offset 24
 2108 0b90 00AF     		add	r7, sp, #0
 2109              	.LCFI64:
 2110              		.cfi_def_cfa_register 7
 2111 0b92 7860     		str	r0, [r7, #4]
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2112              		.loc 1 1420 0
 2113 0b94 4FF00003 		mov	r3, #0
 2114 0b98 FB60     		str	r3, [r7, #12]
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2115              		.loc 1 1423 0
 2116 0b9a 7B68     		ldr	r3, [r7, #4]
 2117 0b9c B3F5807F 		cmp	r3, #256
 2118 0ba0 07D1     		bne	.L128
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2119              		.loc 1 1425 0
 2120 0ba2 0B4B     		ldr	r3, .L131
 2121 0ba4 5B6C     		ldr	r3, [r3, #68]
 2122 0ba6 4FEA4343 		lsl	r3, r3, #17
 2123 0baa 4FEA5343 		lsr	r3, r3, #17
 2124 0bae FB60     		str	r3, [r7, #12]
 2125 0bb0 06E0     		b	.L129
 2126              	.L128:
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2127              		.loc 1 1429 0
 2128 0bb2 074B     		ldr	r3, .L131
 2129 0bb4 9B6C     		ldr	r3, [r3, #72]
 2130 0bb6 4FEA4343 		lsl	r3, r3, #17
 2131 0bba 4FEA5343 		lsr	r3, r3, #17
 2132 0bbe FB60     		str	r3, [r7, #12]
 2133              	.L129:
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2134              		.loc 1 1432 0
 2135 0bc0 FB68     		ldr	r3, [r7, #12]
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2136              		.loc 1 1433 0
 2137 0bc2 1846     		mov	r0, r3
 2138 0bc4 07F11407 		add	r7, r7, #20
 2139 0bc8 BD46     		mov	sp, r7
 2140 0bca 80BC     		pop	{r7}
 2141 0bcc 7047     		bx	lr
 2142              	.L132:
 2143 0bce 00BF     		.align	2
 2144              	.L131:
 2145 0bd0 00280040 		.word	1073752064
 2146              		.cfi_endproc
 2147              	.LFE131:
 2149              		.align	2
 2150              		.global	RTC_WakeUpClockConfig
 2151              		.thumb
 2152              		.thumb_func
 2154              	RTC_WakeUpClockConfig:
 2155              	.LFB132:
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2156              		.loc 1 1468 0
 2157              		.cfi_startproc
 2158              		@ args = 0, pretend = 0, frame = 8
 2159              		@ frame_needed = 1, uses_anonymous_args = 0
 2160              		@ link register save eliminated.
 2161 0bd4 80B4     		push	{r7}
 2162              	.LCFI65:
 2163              		.cfi_def_cfa_offset 4
 2164              		.cfi_offset 7, -4
 2165 0bd6 83B0     		sub	sp, sp, #12
 2166              	.LCFI66:
 2167              		.cfi_def_cfa_offset 16
 2168 0bd8 00AF     		add	r7, sp, #0
 2169              	.LCFI67:
 2170              		.cfi_def_cfa_register 7
 2171 0bda 7860     		str	r0, [r7, #4]
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2172              		.loc 1 1473 0
 2173 0bdc 0E4B     		ldr	r3, .L134
 2174 0bde 4FF0CA02 		mov	r2, #202
 2175 0be2 5A62     		str	r2, [r3, #36]
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2176              		.loc 1 1474 0
 2177 0be4 0C4B     		ldr	r3, .L134
 2178 0be6 4FF05302 		mov	r2, #83
 2179 0bea 5A62     		str	r2, [r3, #36]
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2180              		.loc 1 1477 0
 2181 0bec 0A4B     		ldr	r3, .L134
 2182 0bee 0A4A     		ldr	r2, .L134
 2183 0bf0 9268     		ldr	r2, [r2, #8]
 2184 0bf2 22F00702 		bic	r2, r2, #7
 2185 0bf6 9A60     		str	r2, [r3, #8]
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2186              		.loc 1 1480 0
 2187 0bf8 074B     		ldr	r3, .L134
 2188 0bfa 074A     		ldr	r2, .L134
 2189 0bfc 9168     		ldr	r1, [r2, #8]
 2190 0bfe 7A68     		ldr	r2, [r7, #4]
 2191 0c00 0A43     		orrs	r2, r2, r1
 2192 0c02 9A60     		str	r2, [r3, #8]
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2193              		.loc 1 1483 0
 2194 0c04 044B     		ldr	r3, .L134
 2195 0c06 4FF0FF02 		mov	r2, #255
 2196 0c0a 5A62     		str	r2, [r3, #36]
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2197              		.loc 1 1484 0
 2198 0c0c 07F10C07 		add	r7, r7, #12
 2199 0c10 BD46     		mov	sp, r7
 2200 0c12 80BC     		pop	{r7}
 2201 0c14 7047     		bx	lr
 2202              	.L135:
 2203 0c16 00BF     		.align	2
 2204              	.L134:
 2205 0c18 00280040 		.word	1073752064
 2206              		.cfi_endproc
 2207              	.LFE132:
 2209              		.align	2
 2210              		.global	RTC_SetWakeUpCounter
 2211              		.thumb
 2212              		.thumb_func
 2214              	RTC_SetWakeUpCounter:
 2215              	.LFB133:
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2216              		.loc 1 1495 0
 2217              		.cfi_startproc
 2218              		@ args = 0, pretend = 0, frame = 8
 2219              		@ frame_needed = 1, uses_anonymous_args = 0
 2220              		@ link register save eliminated.
 2221 0c1c 80B4     		push	{r7}
 2222              	.LCFI68:
 2223              		.cfi_def_cfa_offset 4
 2224              		.cfi_offset 7, -4
 2225 0c1e 83B0     		sub	sp, sp, #12
 2226              	.LCFI69:
 2227              		.cfi_def_cfa_offset 16
 2228 0c20 00AF     		add	r7, sp, #0
 2229              	.LCFI70:
 2230              		.cfi_def_cfa_register 7
 2231 0c22 7860     		str	r0, [r7, #4]
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2232              		.loc 1 1500 0
 2233 0c24 094B     		ldr	r3, .L137
 2234 0c26 4FF0CA02 		mov	r2, #202
 2235 0c2a 5A62     		str	r2, [r3, #36]
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2236              		.loc 1 1501 0
 2237 0c2c 074B     		ldr	r3, .L137
 2238 0c2e 4FF05302 		mov	r2, #83
 2239 0c32 5A62     		str	r2, [r3, #36]
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2240              		.loc 1 1504 0
 2241 0c34 054B     		ldr	r3, .L137
 2242 0c36 7A68     		ldr	r2, [r7, #4]
 2243 0c38 5A61     		str	r2, [r3, #20]
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2244              		.loc 1 1507 0
 2245 0c3a 044B     		ldr	r3, .L137
 2246 0c3c 4FF0FF02 		mov	r2, #255
 2247 0c40 5A62     		str	r2, [r3, #36]
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2248              		.loc 1 1508 0
 2249 0c42 07F10C07 		add	r7, r7, #12
 2250 0c46 BD46     		mov	sp, r7
 2251 0c48 80BC     		pop	{r7}
 2252 0c4a 7047     		bx	lr
 2253              	.L138:
 2254              		.align	2
 2255              	.L137:
 2256 0c4c 00280040 		.word	1073752064
 2257              		.cfi_endproc
 2258              	.LFE133:
 2260              		.align	2
 2261              		.global	RTC_GetWakeUpCounter
 2262              		.thumb
 2263              		.thumb_func
 2265              	RTC_GetWakeUpCounter:
 2266              	.LFB134:
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2267              		.loc 1 1516 0
 2268              		.cfi_startproc
 2269              		@ args = 0, pretend = 0, frame = 0
 2270              		@ frame_needed = 1, uses_anonymous_args = 0
 2271              		@ link register save eliminated.
 2272 0c50 80B4     		push	{r7}
 2273              	.LCFI71:
 2274              		.cfi_def_cfa_offset 4
 2275              		.cfi_offset 7, -4
 2276 0c52 00AF     		add	r7, sp, #0
 2277              	.LCFI72:
 2278              		.cfi_def_cfa_register 7
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2279              		.loc 1 1518 0
 2280 0c54 044B     		ldr	r3, .L141
 2281 0c56 5B69     		ldr	r3, [r3, #20]
 2282 0c58 4FEA0343 		lsl	r3, r3, #16
 2283 0c5c 4FEA1343 		lsr	r3, r3, #16
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2284              		.loc 1 1519 0
 2285 0c60 1846     		mov	r0, r3
 2286 0c62 BD46     		mov	sp, r7
 2287 0c64 80BC     		pop	{r7}
 2288 0c66 7047     		bx	lr
 2289              	.L142:
 2290              		.align	2
 2291              	.L141:
 2292 0c68 00280040 		.word	1073752064
 2293              		.cfi_endproc
 2294              	.LFE134:
 2296              		.align	2
 2297              		.global	RTC_WakeUpCmd
 2298              		.thumb
 2299              		.thumb_func
 2301              	RTC_WakeUpCmd:
 2302              	.LFB135:
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2303              		.loc 1 1528 0
 2304              		.cfi_startproc
 2305              		@ args = 0, pretend = 0, frame = 24
 2306              		@ frame_needed = 1, uses_anonymous_args = 0
 2307              		@ link register save eliminated.
 2308 0c6c 80B4     		push	{r7}
 2309              	.LCFI73:
 2310              		.cfi_def_cfa_offset 4
 2311              		.cfi_offset 7, -4
 2312 0c6e 87B0     		sub	sp, sp, #28
 2313              	.LCFI74:
 2314              		.cfi_def_cfa_offset 32
 2315 0c70 00AF     		add	r7, sp, #0
 2316              	.LCFI75:
 2317              		.cfi_def_cfa_register 7
 2318 0c72 0346     		mov	r3, r0
 2319 0c74 FB71     		strb	r3, [r7, #7]
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2320              		.loc 1 1529 0
 2321 0c76 4FF00003 		mov	r3, #0
 2322 0c7a FB60     		str	r3, [r7, #12]
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2323              		.loc 1 1530 0
 2324 0c7c 4FF00003 		mov	r3, #0
 2325 0c80 3B61     		str	r3, [r7, #16]
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2326              		.loc 1 1531 0
 2327 0c82 4FF00003 		mov	r3, #0
 2328 0c86 FB75     		strb	r3, [r7, #23]
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2329              		.loc 1 1537 0
 2330 0c88 214B     		ldr	r3, .L150
 2331 0c8a 4FF0CA02 		mov	r2, #202
 2332 0c8e 5A62     		str	r2, [r3, #36]
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2333              		.loc 1 1538 0
 2334 0c90 1F4B     		ldr	r3, .L150
 2335 0c92 4FF05302 		mov	r2, #83
 2336 0c96 5A62     		str	r2, [r3, #36]
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2337              		.loc 1 1540 0
 2338 0c98 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2339 0c9a 002B     		cmp	r3, #0
 2340 0c9c 09D0     		beq	.L144
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2341              		.loc 1 1543 0
 2342 0c9e 1C4B     		ldr	r3, .L150
 2343 0ca0 1B4A     		ldr	r2, .L150
 2344 0ca2 9268     		ldr	r2, [r2, #8]
 2345 0ca4 42F48062 		orr	r2, r2, #1024
 2346 0ca8 9A60     		str	r2, [r3, #8]
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2347              		.loc 1 1544 0
 2348 0caa 4FF00103 		mov	r3, #1
 2349 0cae FB75     		strb	r3, [r7, #23]
 2350 0cb0 22E0     		b	.L145
 2351              	.L144:
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2352              		.loc 1 1549 0
 2353 0cb2 174B     		ldr	r3, .L150
 2354 0cb4 164A     		ldr	r2, .L150
 2355 0cb6 9268     		ldr	r2, [r2, #8]
 2356 0cb8 22F48062 		bic	r2, r2, #1024
 2357 0cbc 9A60     		str	r2, [r3, #8]
 2358              	.L147:
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2359              		.loc 1 1553 0 discriminator 1
 2360 0cbe 144B     		ldr	r3, .L150
 2361 0cc0 DB68     		ldr	r3, [r3, #12]
 2362 0cc2 03F00403 		and	r3, r3, #4
 2363 0cc6 3B61     		str	r3, [r7, #16]
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2364              		.loc 1 1554 0 discriminator 1
 2365 0cc8 FB68     		ldr	r3, [r7, #12]
 2366 0cca 03F10103 		add	r3, r3, #1
 2367 0cce FB60     		str	r3, [r7, #12]
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2368              		.loc 1 1555 0 discriminator 1
 2369 0cd0 FB68     		ldr	r3, [r7, #12]
 2370 0cd2 B3F5803F 		cmp	r3, #65536
 2371 0cd6 02D0     		beq	.L146
 2372 0cd8 3B69     		ldr	r3, [r7, #16]
 2373 0cda 002B     		cmp	r3, #0
 2374 0cdc EFD0     		beq	.L147
 2375              	.L146:
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2376              		.loc 1 1557 0
 2377 0cde 0C4B     		ldr	r3, .L150
 2378 0ce0 DB68     		ldr	r3, [r3, #12]
 2379 0ce2 03F00403 		and	r3, r3, #4
 2380 0ce6 002B     		cmp	r3, #0
 2381 0ce8 03D1     		bne	.L148
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2382              		.loc 1 1559 0
 2383 0cea 4FF00003 		mov	r3, #0
 2384 0cee FB75     		strb	r3, [r7, #23]
 2385 0cf0 02E0     		b	.L145
 2386              	.L148:
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2387              		.loc 1 1563 0
 2388 0cf2 4FF00103 		mov	r3, #1
 2389 0cf6 FB75     		strb	r3, [r7, #23]
 2390              	.L145:
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2391              		.loc 1 1568 0
 2392 0cf8 054B     		ldr	r3, .L150
 2393 0cfa 4FF0FF02 		mov	r2, #255
 2394 0cfe 5A62     		str	r2, [r3, #36]
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2395              		.loc 1 1570 0
 2396 0d00 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2397              		.loc 1 1571 0
 2398 0d02 1846     		mov	r0, r3
 2399 0d04 07F11C07 		add	r7, r7, #28
 2400 0d08 BD46     		mov	sp, r7
 2401 0d0a 80BC     		pop	{r7}
 2402 0d0c 7047     		bx	lr
 2403              	.L151:
 2404 0d0e 00BF     		.align	2
 2405              	.L150:
 2406 0d10 00280040 		.word	1073752064
 2407              		.cfi_endproc
 2408              	.LFE135:
 2410              		.align	2
 2411              		.global	RTC_DayLightSavingConfig
 2412              		.thumb
 2413              		.thumb_func
 2415              	RTC_DayLightSavingConfig:
 2416              	.LFB136:
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2417              		.loc 1 1605 0
 2418              		.cfi_startproc
 2419              		@ args = 0, pretend = 0, frame = 8
 2420              		@ frame_needed = 1, uses_anonymous_args = 0
 2421              		@ link register save eliminated.
 2422 0d14 80B4     		push	{r7}
 2423              	.LCFI76:
 2424              		.cfi_def_cfa_offset 4
 2425              		.cfi_offset 7, -4
 2426 0d16 83B0     		sub	sp, sp, #12
 2427              	.LCFI77:
 2428              		.cfi_def_cfa_offset 16
 2429 0d18 00AF     		add	r7, sp, #0
 2430              	.LCFI78:
 2431              		.cfi_def_cfa_register 7
 2432 0d1a 7860     		str	r0, [r7, #4]
 2433 0d1c 3960     		str	r1, [r7, #0]
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2434              		.loc 1 1611 0
 2435 0d1e 0F4B     		ldr	r3, .L153
 2436 0d20 4FF0CA02 		mov	r2, #202
 2437 0d24 5A62     		str	r2, [r3, #36]
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2438              		.loc 1 1612 0
 2439 0d26 0D4B     		ldr	r3, .L153
 2440 0d28 4FF05302 		mov	r2, #83
 2441 0d2c 5A62     		str	r2, [r3, #36]
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2442              		.loc 1 1615 0
 2443 0d2e 0B4B     		ldr	r3, .L153
 2444 0d30 0A4A     		ldr	r2, .L153
 2445 0d32 9268     		ldr	r2, [r2, #8]
 2446 0d34 22F48022 		bic	r2, r2, #262144
 2447 0d38 9A60     		str	r2, [r3, #8]
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2448              		.loc 1 1618 0
 2449 0d3a 084B     		ldr	r3, .L153
 2450 0d3c 074A     		ldr	r2, .L153
 2451 0d3e 9168     		ldr	r1, [r2, #8]
 2452 0d40 7868     		ldr	r0, [r7, #4]
 2453 0d42 3A68     		ldr	r2, [r7, #0]
 2454 0d44 0243     		orrs	r2, r2, r0
 2455 0d46 0A43     		orrs	r2, r2, r1
 2456 0d48 9A60     		str	r2, [r3, #8]
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2457              		.loc 1 1621 0
 2458 0d4a 044B     		ldr	r3, .L153
 2459 0d4c 4FF0FF02 		mov	r2, #255
 2460 0d50 5A62     		str	r2, [r3, #36]
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2461              		.loc 1 1622 0
 2462 0d52 07F10C07 		add	r7, r7, #12
 2463 0d56 BD46     		mov	sp, r7
 2464 0d58 80BC     		pop	{r7}
 2465 0d5a 7047     		bx	lr
 2466              	.L154:
 2467              		.align	2
 2468              	.L153:
 2469 0d5c 00280040 		.word	1073752064
 2470              		.cfi_endproc
 2471              	.LFE136:
 2473              		.align	2
 2474              		.global	RTC_GetStoreOperation
 2475              		.thumb
 2476              		.thumb_func
 2478              	RTC_GetStoreOperation:
 2479              	.LFB137:
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2480              		.loc 1 1632 0
 2481              		.cfi_startproc
 2482              		@ args = 0, pretend = 0, frame = 0
 2483              		@ frame_needed = 1, uses_anonymous_args = 0
 2484              		@ link register save eliminated.
 2485 0d60 80B4     		push	{r7}
 2486              	.LCFI79:
 2487              		.cfi_def_cfa_offset 4
 2488              		.cfi_offset 7, -4
 2489 0d62 00AF     		add	r7, sp, #0
 2490              	.LCFI80:
 2491              		.cfi_def_cfa_register 7
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2492              		.loc 1 1633 0
 2493 0d64 034B     		ldr	r3, .L157
 2494 0d66 9B68     		ldr	r3, [r3, #8]
 2495 0d68 03F48023 		and	r3, r3, #262144
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2496              		.loc 1 1634 0
 2497 0d6c 1846     		mov	r0, r3
 2498 0d6e BD46     		mov	sp, r7
 2499 0d70 80BC     		pop	{r7}
 2500 0d72 7047     		bx	lr
 2501              	.L158:
 2502              		.align	2
 2503              	.L157:
 2504 0d74 00280040 		.word	1073752064
 2505              		.cfi_endproc
 2506              	.LFE137:
 2508              		.align	2
 2509              		.global	RTC_OutputConfig
 2510              		.thumb
 2511              		.thumb_func
 2513              	RTC_OutputConfig:
 2514              	.LFB138:
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2515              		.loc 1 1671 0
 2516              		.cfi_startproc
 2517              		@ args = 0, pretend = 0, frame = 8
 2518              		@ frame_needed = 1, uses_anonymous_args = 0
 2519              		@ link register save eliminated.
 2520 0d78 80B4     		push	{r7}
 2521              	.LCFI81:
 2522              		.cfi_def_cfa_offset 4
 2523              		.cfi_offset 7, -4
 2524 0d7a 83B0     		sub	sp, sp, #12
 2525              	.LCFI82:
 2526              		.cfi_def_cfa_offset 16
 2527 0d7c 00AF     		add	r7, sp, #0
 2528              	.LCFI83:
 2529              		.cfi_def_cfa_register 7
 2530 0d7e 7860     		str	r0, [r7, #4]
 2531 0d80 3960     		str	r1, [r7, #0]
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2532              		.loc 1 1677 0
 2533 0d82 0F4B     		ldr	r3, .L160
 2534 0d84 4FF0CA02 		mov	r2, #202
 2535 0d88 5A62     		str	r2, [r3, #36]
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2536              		.loc 1 1678 0
 2537 0d8a 0D4B     		ldr	r3, .L160
 2538 0d8c 4FF05302 		mov	r2, #83
 2539 0d90 5A62     		str	r2, [r3, #36]
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2540              		.loc 1 1681 0
 2541 0d92 0B4B     		ldr	r3, .L160
 2542 0d94 0A4A     		ldr	r2, .L160
 2543 0d96 9268     		ldr	r2, [r2, #8]
 2544 0d98 22F4E002 		bic	r2, r2, #7340032
 2545 0d9c 9A60     		str	r2, [r3, #8]
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2546              		.loc 1 1684 0
 2547 0d9e 084B     		ldr	r3, .L160
 2548 0da0 074A     		ldr	r2, .L160
 2549 0da2 9168     		ldr	r1, [r2, #8]
 2550 0da4 7868     		ldr	r0, [r7, #4]
 2551 0da6 3A68     		ldr	r2, [r7, #0]
 2552 0da8 0243     		orrs	r2, r2, r0
 2553 0daa 0A43     		orrs	r2, r2, r1
 2554 0dac 9A60     		str	r2, [r3, #8]
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2555              		.loc 1 1687 0
 2556 0dae 044B     		ldr	r3, .L160
 2557 0db0 4FF0FF02 		mov	r2, #255
 2558 0db4 5A62     		str	r2, [r3, #36]
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2559              		.loc 1 1688 0
 2560 0db6 07F10C07 		add	r7, r7, #12
 2561 0dba BD46     		mov	sp, r7
 2562 0dbc 80BC     		pop	{r7}
 2563 0dbe 7047     		bx	lr
 2564              	.L161:
 2565              		.align	2
 2566              	.L160:
 2567 0dc0 00280040 		.word	1073752064
 2568              		.cfi_endproc
 2569              	.LFE138:
 2571              		.align	2
 2572              		.global	RTC_CoarseCalibConfig
 2573              		.thumb
 2574              		.thumb_func
 2576              	RTC_CoarseCalibConfig:
 2577              	.LFB139:
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2578              		.loc 1 1725 0
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 16
 2581              		@ frame_needed = 1, uses_anonymous_args = 0
 2582 0dc4 80B5     		push	{r7, lr}
 2583              	.LCFI84:
 2584              		.cfi_def_cfa_offset 8
 2585              		.cfi_offset 7, -8
 2586              		.cfi_offset 14, -4
 2587 0dc6 84B0     		sub	sp, sp, #16
 2588              	.LCFI85:
 2589              		.cfi_def_cfa_offset 24
 2590 0dc8 00AF     		add	r7, sp, #0
 2591              	.LCFI86:
 2592              		.cfi_def_cfa_register 7
 2593 0dca 7860     		str	r0, [r7, #4]
 2594 0dcc 3960     		str	r1, [r7, #0]
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2595              		.loc 1 1726 0
 2596 0dce 4FF00003 		mov	r3, #0
 2597 0dd2 FB73     		strb	r3, [r7, #15]
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2598              		.loc 1 1733 0
 2599 0dd4 124B     		ldr	r3, .L166
 2600 0dd6 4FF0CA02 		mov	r2, #202
 2601 0dda 5A62     		str	r2, [r3, #36]
1734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2602              		.loc 1 1734 0
 2603 0ddc 104B     		ldr	r3, .L166
 2604 0dde 4FF05302 		mov	r2, #83
 2605 0de2 5A62     		str	r2, [r3, #36]
1735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2606              		.loc 1 1737 0
 2607 0de4 FFF7FEFF 		bl	RTC_EnterInitMode
 2608 0de8 0346     		mov	r3, r0
 2609 0dea 002B     		cmp	r3, #0
 2610 0dec 03D1     		bne	.L163
1738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2611              		.loc 1 1739 0
 2612 0dee 4FF00003 		mov	r3, #0
 2613 0df2 FB73     		strb	r3, [r7, #15]
 2614 0df4 09E0     		b	.L164
 2615              	.L163:
1740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2616              		.loc 1 1744 0
 2617 0df6 0A4B     		ldr	r3, .L166
 2618 0df8 7968     		ldr	r1, [r7, #4]
 2619 0dfa 3A68     		ldr	r2, [r7, #0]
 2620 0dfc 0A43     		orrs	r2, r2, r1
 2621 0dfe 9A61     		str	r2, [r3, #24]
1745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2622              		.loc 1 1746 0
 2623 0e00 FFF7FEFF 		bl	RTC_ExitInitMode
1747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2624              		.loc 1 1748 0
 2625 0e04 4FF00103 		mov	r3, #1
 2626 0e08 FB73     		strb	r3, [r7, #15]
 2627              	.L164:
1749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2628              		.loc 1 1752 0
 2629 0e0a 054B     		ldr	r3, .L166
 2630 0e0c 4FF0FF02 		mov	r2, #255
 2631 0e10 5A62     		str	r2, [r3, #36]
1753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2632              		.loc 1 1754 0
 2633 0e12 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2634              		.loc 1 1755 0
 2635 0e14 1846     		mov	r0, r3
 2636 0e16 07F11007 		add	r7, r7, #16
 2637 0e1a BD46     		mov	sp, r7
 2638 0e1c 80BD     		pop	{r7, pc}
 2639              	.L167:
 2640 0e1e 00BF     		.align	2
 2641              	.L166:
 2642 0e20 00280040 		.word	1073752064
 2643              		.cfi_endproc
 2644              	.LFE139:
 2646              		.align	2
 2647              		.global	RTC_CoarseCalibCmd
 2648              		.thumb
 2649              		.thumb_func
 2651              	RTC_CoarseCalibCmd:
 2652              	.LFB140:
1756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2653              		.loc 1 1766 0
 2654              		.cfi_startproc
 2655              		@ args = 0, pretend = 0, frame = 16
 2656              		@ frame_needed = 1, uses_anonymous_args = 0
 2657 0e24 80B5     		push	{r7, lr}
 2658              	.LCFI87:
 2659              		.cfi_def_cfa_offset 8
 2660              		.cfi_offset 7, -8
 2661              		.cfi_offset 14, -4
 2662 0e26 84B0     		sub	sp, sp, #16
 2663              	.LCFI88:
 2664              		.cfi_def_cfa_offset 24
 2665 0e28 00AF     		add	r7, sp, #0
 2666              	.LCFI89:
 2667              		.cfi_def_cfa_register 7
 2668 0e2a 0346     		mov	r3, r0
 2669 0e2c FB71     		strb	r3, [r7, #7]
1767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2670              		.loc 1 1767 0
 2671 0e2e 4FF00003 		mov	r3, #0
 2672 0e32 FB73     		strb	r3, [r7, #15]
1768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2673              		.loc 1 1773 0
 2674 0e34 174B     		ldr	r3, .L174
 2675 0e36 4FF0CA02 		mov	r2, #202
 2676 0e3a 5A62     		str	r2, [r3, #36]
1774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2677              		.loc 1 1774 0
 2678 0e3c 154B     		ldr	r3, .L174
 2679 0e3e 4FF05302 		mov	r2, #83
 2680 0e42 5A62     		str	r2, [r3, #36]
1775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2681              		.loc 1 1777 0
 2682 0e44 FFF7FEFF 		bl	RTC_EnterInitMode
 2683 0e48 0346     		mov	r3, r0
 2684 0e4a 002B     		cmp	r3, #0
 2685 0e4c 03D1     		bne	.L169
1778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2686              		.loc 1 1779 0
 2687 0e4e 4FF00003 		mov	r3, #0
 2688 0e52 FB73     		strb	r3, [r7, #15]
 2689 0e54 14E0     		b	.L170
 2690              	.L169:
1780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2691              		.loc 1 1783 0
 2692 0e56 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2693 0e58 002B     		cmp	r3, #0
 2694 0e5a 06D0     		beq	.L171
1784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2695              		.loc 1 1786 0
 2696 0e5c 0D4B     		ldr	r3, .L174
 2697 0e5e 0D4A     		ldr	r2, .L174
 2698 0e60 9268     		ldr	r2, [r2, #8]
 2699 0e62 42F08002 		orr	r2, r2, #128
 2700 0e66 9A60     		str	r2, [r3, #8]
 2701 0e68 05E0     		b	.L172
 2702              	.L171:
1787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2703              		.loc 1 1791 0
 2704 0e6a 0A4B     		ldr	r3, .L174
 2705 0e6c 094A     		ldr	r2, .L174
 2706 0e6e 9268     		ldr	r2, [r2, #8]
 2707 0e70 22F08002 		bic	r2, r2, #128
 2708 0e74 9A60     		str	r2, [r3, #8]
 2709              	.L172:
1792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2710              		.loc 1 1794 0
 2711 0e76 FFF7FEFF 		bl	RTC_ExitInitMode
1795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2712              		.loc 1 1796 0
 2713 0e7a 4FF00103 		mov	r3, #1
 2714 0e7e FB73     		strb	r3, [r7, #15]
 2715              	.L170:
1797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2716              		.loc 1 1800 0
 2717 0e80 044B     		ldr	r3, .L174
 2718 0e82 4FF0FF02 		mov	r2, #255
 2719 0e86 5A62     		str	r2, [r3, #36]
1801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2720              		.loc 1 1802 0
 2721 0e88 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2722              		.loc 1 1803 0
 2723 0e8a 1846     		mov	r0, r3
 2724 0e8c 07F11007 		add	r7, r7, #16
 2725 0e90 BD46     		mov	sp, r7
 2726 0e92 80BD     		pop	{r7, pc}
 2727              	.L175:
 2728              		.align	2
 2729              	.L174:
 2730 0e94 00280040 		.word	1073752064
 2731              		.cfi_endproc
 2732              	.LFE140:
 2734              		.align	2
 2735              		.global	RTC_CalibOutputCmd
 2736              		.thumb
 2737              		.thumb_func
 2739              	RTC_CalibOutputCmd:
 2740              	.LFB141:
1804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2741              		.loc 1 1812 0
 2742              		.cfi_startproc
 2743              		@ args = 0, pretend = 0, frame = 8
 2744              		@ frame_needed = 1, uses_anonymous_args = 0
 2745              		@ link register save eliminated.
 2746 0e98 80B4     		push	{r7}
 2747              	.LCFI90:
 2748              		.cfi_def_cfa_offset 4
 2749              		.cfi_offset 7, -4
 2750 0e9a 83B0     		sub	sp, sp, #12
 2751              	.LCFI91:
 2752              		.cfi_def_cfa_offset 16
 2753 0e9c 00AF     		add	r7, sp, #0
 2754              	.LCFI92:
 2755              		.cfi_def_cfa_register 7
 2756 0e9e 0346     		mov	r3, r0
 2757 0ea0 FB71     		strb	r3, [r7, #7]
1813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2758              		.loc 1 1817 0
 2759 0ea2 104B     		ldr	r3, .L179
 2760 0ea4 4FF0CA02 		mov	r2, #202
 2761 0ea8 5A62     		str	r2, [r3, #36]
1818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2762              		.loc 1 1818 0
 2763 0eaa 0E4B     		ldr	r3, .L179
 2764 0eac 4FF05302 		mov	r2, #83
 2765 0eb0 5A62     		str	r2, [r3, #36]
1819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2766              		.loc 1 1820 0
 2767 0eb2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2768 0eb4 002B     		cmp	r3, #0
 2769 0eb6 06D0     		beq	.L177
1821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2770              		.loc 1 1823 0
 2771 0eb8 0A4B     		ldr	r3, .L179
 2772 0eba 0A4A     		ldr	r2, .L179
 2773 0ebc 9268     		ldr	r2, [r2, #8]
 2774 0ebe 42F40002 		orr	r2, r2, #8388608
 2775 0ec2 9A60     		str	r2, [r3, #8]
 2776 0ec4 05E0     		b	.L178
 2777              	.L177:
1824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2778              		.loc 1 1828 0
 2779 0ec6 074B     		ldr	r3, .L179
 2780 0ec8 064A     		ldr	r2, .L179
 2781 0eca 9268     		ldr	r2, [r2, #8]
 2782 0ecc 22F40002 		bic	r2, r2, #8388608
 2783 0ed0 9A60     		str	r2, [r3, #8]
 2784              	.L178:
1829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2785              		.loc 1 1832 0
 2786 0ed2 044B     		ldr	r3, .L179
 2787 0ed4 4FF0FF02 		mov	r2, #255
 2788 0ed8 5A62     		str	r2, [r3, #36]
1833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2789              		.loc 1 1833 0
 2790 0eda 07F10C07 		add	r7, r7, #12
 2791 0ede BD46     		mov	sp, r7
 2792 0ee0 80BC     		pop	{r7}
 2793 0ee2 7047     		bx	lr
 2794              	.L180:
 2795              		.align	2
 2796              	.L179:
 2797 0ee4 00280040 		.word	1073752064
 2798              		.cfi_endproc
 2799              	.LFE141:
 2801              		.align	2
 2802              		.global	RTC_CalibOutputConfig
 2803              		.thumb
 2804              		.thumb_func
 2806              	RTC_CalibOutputConfig:
 2807              	.LFB142:
1834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2808              		.loc 1 1844 0
 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 8
 2811              		@ frame_needed = 1, uses_anonymous_args = 0
 2812              		@ link register save eliminated.
 2813 0ee8 80B4     		push	{r7}
 2814              	.LCFI93:
 2815              		.cfi_def_cfa_offset 4
 2816              		.cfi_offset 7, -4
 2817 0eea 83B0     		sub	sp, sp, #12
 2818              	.LCFI94:
 2819              		.cfi_def_cfa_offset 16
 2820 0eec 00AF     		add	r7, sp, #0
 2821              	.LCFI95:
 2822              		.cfi_def_cfa_register 7
 2823 0eee 7860     		str	r0, [r7, #4]
1845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2824              		.loc 1 1849 0
 2825 0ef0 0E4B     		ldr	r3, .L182
 2826 0ef2 4FF0CA02 		mov	r2, #202
 2827 0ef6 5A62     		str	r2, [r3, #36]
1850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2828              		.loc 1 1850 0
 2829 0ef8 0C4B     		ldr	r3, .L182
 2830 0efa 4FF05302 		mov	r2, #83
 2831 0efe 5A62     		str	r2, [r3, #36]
1851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2832              		.loc 1 1853 0
 2833 0f00 0A4B     		ldr	r3, .L182
 2834 0f02 0A4A     		ldr	r2, .L182
 2835 0f04 9268     		ldr	r2, [r2, #8]
 2836 0f06 22F40022 		bic	r2, r2, #524288
 2837 0f0a 9A60     		str	r2, [r3, #8]
1854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2838              		.loc 1 1856 0
 2839 0f0c 074B     		ldr	r3, .L182
 2840 0f0e 074A     		ldr	r2, .L182
 2841 0f10 9168     		ldr	r1, [r2, #8]
 2842 0f12 7A68     		ldr	r2, [r7, #4]
 2843 0f14 0A43     		orrs	r2, r2, r1
 2844 0f16 9A60     		str	r2, [r3, #8]
1857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2845              		.loc 1 1859 0
 2846 0f18 044B     		ldr	r3, .L182
 2847 0f1a 4FF0FF02 		mov	r2, #255
 2848 0f1e 5A62     		str	r2, [r3, #36]
1860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2849              		.loc 1 1860 0
 2850 0f20 07F10C07 		add	r7, r7, #12
 2851 0f24 BD46     		mov	sp, r7
 2852 0f26 80BC     		pop	{r7}
 2853 0f28 7047     		bx	lr
 2854              	.L183:
 2855 0f2a 00BF     		.align	2
 2856              	.L182:
 2857 0f2c 00280040 		.word	1073752064
 2858              		.cfi_endproc
 2859              	.LFE142:
 2861              		.align	2
 2862              		.global	RTC_SmoothCalibConfig
 2863              		.thumb
 2864              		.thumb_func
 2866              	RTC_SmoothCalibConfig:
 2867              	.LFB143:
1861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2868              		.loc 1 1882 0
 2869              		.cfi_startproc
 2870              		@ args = 0, pretend = 0, frame = 24
 2871              		@ frame_needed = 1, uses_anonymous_args = 0
 2872              		@ link register save eliminated.
 2873 0f30 80B4     		push	{r7}
 2874              	.LCFI96:
 2875              		.cfi_def_cfa_offset 4
 2876              		.cfi_offset 7, -4
 2877 0f32 87B0     		sub	sp, sp, #28
 2878              	.LCFI97:
 2879              		.cfi_def_cfa_offset 32
 2880 0f34 00AF     		add	r7, sp, #0
 2881              	.LCFI98:
 2882              		.cfi_def_cfa_register 7
 2883 0f36 F860     		str	r0, [r7, #12]
 2884 0f38 B960     		str	r1, [r7, #8]
 2885 0f3a 7A60     		str	r2, [r7, #4]
1883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2886              		.loc 1 1883 0
 2887 0f3c 4FF00003 		mov	r3, #0
 2888 0f40 FB75     		strb	r3, [r7, #23]
1884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2889              		.loc 1 1884 0
 2890 0f42 4FF00003 		mov	r3, #0
 2891 0f46 3B61     		str	r3, [r7, #16]
1885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2892              		.loc 1 1892 0
 2893 0f48 1D4B     		ldr	r3, .L191
 2894 0f4a 4FF0CA02 		mov	r2, #202
 2895 0f4e 5A62     		str	r2, [r3, #36]
1893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2896              		.loc 1 1893 0
 2897 0f50 1B4B     		ldr	r3, .L191
 2898 0f52 4FF05302 		mov	r2, #83
 2899 0f56 5A62     		str	r2, [r3, #36]
1894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2900              		.loc 1 1896 0
 2901 0f58 194B     		ldr	r3, .L191
 2902 0f5a DB68     		ldr	r3, [r3, #12]
 2903 0f5c 03F48033 		and	r3, r3, #65536
 2904 0f60 002B     		cmp	r3, #0
 2905 0f62 0ED0     		beq	.L185
1897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2906              		.loc 1 1899 0
 2907 0f64 03E0     		b	.L186
 2908              	.L187:
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2909              		.loc 1 1901 0
 2910 0f66 3B69     		ldr	r3, [r7, #16]
 2911 0f68 03F10103 		add	r3, r3, #1
 2912 0f6c 3B61     		str	r3, [r7, #16]
 2913              	.L186:
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2914              		.loc 1 1899 0 discriminator 1
 2915 0f6e 144B     		ldr	r3, .L191
 2916 0f70 DB68     		ldr	r3, [r3, #12]
 2917 0f72 03F48033 		and	r3, r3, #65536
 2918 0f76 002B     		cmp	r3, #0
 2919 0f78 03D0     		beq	.L185
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2920              		.loc 1 1899 0 is_stmt 0 discriminator 2
 2921 0f7a 3B69     		ldr	r3, [r7, #16]
 2922 0f7c B3F5003F 		cmp	r3, #131072
 2923 0f80 F1D1     		bne	.L187
 2924              	.L185:
1902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2925              		.loc 1 1906 0 is_stmt 1
 2926 0f82 0F4B     		ldr	r3, .L191
 2927 0f84 DB68     		ldr	r3, [r3, #12]
 2928 0f86 03F48033 		and	r3, r3, #65536
 2929 0f8a 002B     		cmp	r3, #0
 2930 0f8c 0AD1     		bne	.L188
1907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2931              		.loc 1 1909 0
 2932 0f8e 0C4B     		ldr	r3, .L191
 2933 0f90 F968     		ldr	r1, [r7, #12]
 2934 0f92 BA68     		ldr	r2, [r7, #8]
 2935 0f94 1143     		orrs	r1, r1, r2
 2936 0f96 7A68     		ldr	r2, [r7, #4]
 2937 0f98 0A43     		orrs	r2, r2, r1
 2938 0f9a DA63     		str	r2, [r3, #60]
1910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2939              		.loc 1 1911 0
 2940 0f9c 4FF00103 		mov	r3, #1
 2941 0fa0 FB75     		strb	r3, [r7, #23]
 2942 0fa2 02E0     		b	.L189
 2943              	.L188:
1912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2944              		.loc 1 1915 0
 2945 0fa4 4FF00003 		mov	r3, #0
 2946 0fa8 FB75     		strb	r3, [r7, #23]
 2947              	.L189:
1916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2948              		.loc 1 1919 0
 2949 0faa 054B     		ldr	r3, .L191
 2950 0fac 4FF0FF02 		mov	r2, #255
 2951 0fb0 5A62     		str	r2, [r3, #36]
1920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 2952              		.loc 1 1921 0
 2953 0fb2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2954              		.loc 1 1922 0
 2955 0fb4 1846     		mov	r0, r3
 2956 0fb6 07F11C07 		add	r7, r7, #28
 2957 0fba BD46     		mov	sp, r7
 2958 0fbc 80BC     		pop	{r7}
 2959 0fbe 7047     		bx	lr
 2960              	.L192:
 2961              		.align	2
 2962              	.L191:
 2963 0fc0 00280040 		.word	1073752064
 2964              		.cfi_endproc
 2965              	.LFE143:
 2967              		.align	2
 2968              		.global	RTC_TimeStampCmd
 2969              		.thumb
 2970              		.thumb_func
 2972              	RTC_TimeStampCmd:
 2973              	.LFB144:
1923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2974              		.loc 1 1956 0
 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 16
 2977              		@ frame_needed = 1, uses_anonymous_args = 0
 2978              		@ link register save eliminated.
 2979 0fc4 80B4     		push	{r7}
 2980              	.LCFI99:
 2981              		.cfi_def_cfa_offset 4
 2982              		.cfi_offset 7, -4
 2983 0fc6 85B0     		sub	sp, sp, #20
 2984              	.LCFI100:
 2985              		.cfi_def_cfa_offset 24
 2986 0fc8 00AF     		add	r7, sp, #0
 2987              	.LCFI101:
 2988              		.cfi_def_cfa_register 7
 2989 0fca 7860     		str	r0, [r7, #4]
 2990 0fcc 0B46     		mov	r3, r1
 2991 0fce FB70     		strb	r3, [r7, #3]
1957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2992              		.loc 1 1957 0
 2993 0fd0 4FF00003 		mov	r3, #0
 2994 0fd4 FB60     		str	r3, [r7, #12]
1958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 2995              		.loc 1 1964 0
 2996 0fd6 144B     		ldr	r3, .L196
 2997 0fd8 9B68     		ldr	r3, [r3, #8]
 2998 0fda 23F40063 		bic	r3, r3, #2048
 2999 0fde 23F00803 		bic	r3, r3, #8
 3000 0fe2 FB60     		str	r3, [r7, #12]
1965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3001              		.loc 1 1967 0
 3002 0fe4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3003 0fe6 002B     		cmp	r3, #0
 3004 0fe8 06D0     		beq	.L194
1968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3005              		.loc 1 1969 0
 3006 0fea 7A68     		ldr	r2, [r7, #4]
 3007 0fec FB68     		ldr	r3, [r7, #12]
 3008 0fee 1343     		orrs	r3, r3, r2
 3009 0ff0 43F40063 		orr	r3, r3, #2048
 3010 0ff4 FB60     		str	r3, [r7, #12]
 3011 0ff6 03E0     		b	.L195
 3012              	.L194:
1970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3013              		.loc 1 1973 0
 3014 0ff8 FA68     		ldr	r2, [r7, #12]
 3015 0ffa 7B68     		ldr	r3, [r7, #4]
 3016 0ffc 1343     		orrs	r3, r3, r2
 3017 0ffe FB60     		str	r3, [r7, #12]
 3018              	.L195:
1974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3019              		.loc 1 1977 0
 3020 1000 094B     		ldr	r3, .L196
 3021 1002 4FF0CA02 		mov	r2, #202
 3022 1006 5A62     		str	r2, [r3, #36]
1978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3023              		.loc 1 1978 0
 3024 1008 074B     		ldr	r3, .L196
 3025 100a 4FF05302 		mov	r2, #83
 3026 100e 5A62     		str	r2, [r3, #36]
1979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3027              		.loc 1 1981 0
 3028 1010 054B     		ldr	r3, .L196
 3029 1012 FA68     		ldr	r2, [r7, #12]
 3030 1014 9A60     		str	r2, [r3, #8]
1982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3031              		.loc 1 1984 0
 3032 1016 044B     		ldr	r3, .L196
 3033 1018 4FF0FF02 		mov	r2, #255
 3034 101c 5A62     		str	r2, [r3, #36]
1985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3035              		.loc 1 1985 0
 3036 101e 07F11407 		add	r7, r7, #20
 3037 1022 BD46     		mov	sp, r7
 3038 1024 80BC     		pop	{r7}
 3039 1026 7047     		bx	lr
 3040              	.L197:
 3041              		.align	2
 3042              	.L196:
 3043 1028 00280040 		.word	1073752064
 3044              		.cfi_endproc
 3045              	.LFE144:
 3047              		.align	2
 3048              		.global	RTC_GetTimeStamp
 3049              		.thumb
 3050              		.thumb_func
 3052              	RTC_GetTimeStamp:
 3053              	.LFB145:
1986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3054              		.loc 1 2001 0
 3055              		.cfi_startproc
 3056              		@ args = 0, pretend = 0, frame = 24
 3057              		@ frame_needed = 1, uses_anonymous_args = 0
 3058 102c 80B5     		push	{r7, lr}
 3059              	.LCFI102:
 3060              		.cfi_def_cfa_offset 8
 3061              		.cfi_offset 7, -8
 3062              		.cfi_offset 14, -4
 3063 102e 86B0     		sub	sp, sp, #24
 3064              	.LCFI103:
 3065              		.cfi_def_cfa_offset 32
 3066 1030 00AF     		add	r7, sp, #0
 3067              	.LCFI104:
 3068              		.cfi_def_cfa_register 7
 3069 1032 F860     		str	r0, [r7, #12]
 3070 1034 B960     		str	r1, [r7, #8]
 3071 1036 7A60     		str	r2, [r7, #4]
2002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3072              		.loc 1 2002 0
 3073 1038 4FF00003 		mov	r3, #0
 3074 103c 7B61     		str	r3, [r7, #20]
 3075 103e 4FF00003 		mov	r3, #0
 3076 1042 3B61     		str	r3, [r7, #16]
2003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3077              		.loc 1 2008 0
 3078 1044 424B     		ldr	r3, .L200
 3079 1046 1B6B     		ldr	r3, [r3, #48]
 3080 1048 03F07F33 		and	r3, r3, #2139062143
 3081 104c 23F0FE43 		bic	r3, r3, #2130706432
 3082 1050 7B61     		str	r3, [r7, #20]
2009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3083              		.loc 1 2009 0
 3084 1052 3F4B     		ldr	r3, .L200
 3085 1054 5B6B     		ldr	r3, [r3, #52]
 3086 1056 23F07F43 		bic	r3, r3, #-16777216
 3087 105a 23F0C003 		bic	r3, r3, #192
 3088 105e 3B61     		str	r3, [r7, #16]
2010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3089              		.loc 1 2012 0
 3090 1060 7B69     		ldr	r3, [r7, #20]
 3091 1062 03F47C13 		and	r3, r3, #4128768
 3092 1066 4FEA1343 		lsr	r3, r3, #16
 3093 106a DAB2     		uxtb	r2, r3
 3094 106c BB68     		ldr	r3, [r7, #8]
 3095 106e 1A70     		strb	r2, [r3, #0]
2013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3096              		.loc 1 2013 0
 3097 1070 7B69     		ldr	r3, [r7, #20]
 3098 1072 03F4FE43 		and	r3, r3, #32512
 3099 1076 4FEA1323 		lsr	r3, r3, #8
 3100 107a DAB2     		uxtb	r2, r3
 3101 107c BB68     		ldr	r3, [r7, #8]
 3102 107e 5A70     		strb	r2, [r3, #1]
2014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3103              		.loc 1 2014 0
 3104 1080 7B69     		ldr	r3, [r7, #20]
 3105 1082 DBB2     		uxtb	r3, r3
 3106 1084 03F07F03 		and	r3, r3, #127
 3107 1088 DAB2     		uxtb	r2, r3
 3108 108a BB68     		ldr	r3, [r7, #8]
 3109 108c 9A70     		strb	r2, [r3, #2]
2015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3110              		.loc 1 2015 0
 3111 108e 7B69     		ldr	r3, [r7, #20]
 3112 1090 03F48003 		and	r3, r3, #4194304
 3113 1094 4FEA1343 		lsr	r3, r3, #16
 3114 1098 DAB2     		uxtb	r2, r3
 3115 109a BB68     		ldr	r3, [r7, #8]
 3116 109c DA70     		strb	r2, [r3, #3]
2016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3117              		.loc 1 2018 0
 3118 109e 7B68     		ldr	r3, [r7, #4]
 3119 10a0 4FF00002 		mov	r2, #0
 3120 10a4 DA70     		strb	r2, [r3, #3]
2019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3121              		.loc 1 2019 0
 3122 10a6 3B69     		ldr	r3, [r7, #16]
 3123 10a8 03F4F853 		and	r3, r3, #7936
 3124 10ac 4FEA1323 		lsr	r3, r3, #8
 3125 10b0 DAB2     		uxtb	r2, r3
 3126 10b2 7B68     		ldr	r3, [r7, #4]
 3127 10b4 5A70     		strb	r2, [r3, #1]
2020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3128              		.loc 1 2020 0
 3129 10b6 3B69     		ldr	r3, [r7, #16]
 3130 10b8 DBB2     		uxtb	r3, r3
 3131 10ba 03F03F03 		and	r3, r3, #63
 3132 10be DAB2     		uxtb	r2, r3
 3133 10c0 7B68     		ldr	r3, [r7, #4]
 3134 10c2 9A70     		strb	r2, [r3, #2]
2021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3135              		.loc 1 2021 0
 3136 10c4 3B69     		ldr	r3, [r7, #16]
 3137 10c6 03F46043 		and	r3, r3, #57344
 3138 10ca 4FEA5333 		lsr	r3, r3, #13
 3139 10ce DAB2     		uxtb	r2, r3
 3140 10d0 7B68     		ldr	r3, [r7, #4]
 3141 10d2 1A70     		strb	r2, [r3, #0]
2022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3142              		.loc 1 2024 0
 3143 10d4 FB68     		ldr	r3, [r7, #12]
 3144 10d6 002B     		cmp	r3, #0
 3145 10d8 35D1     		bne	.L198
2025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3146              		.loc 1 2027 0
 3147 10da BB68     		ldr	r3, [r7, #8]
 3148 10dc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3149 10de 1846     		mov	r0, r3
 3150 10e0 00F0E0FA 		bl	RTC_Bcd2ToByte
 3151 10e4 0346     		mov	r3, r0
 3152 10e6 1A46     		mov	r2, r3
 3153 10e8 BB68     		ldr	r3, [r7, #8]
 3154 10ea 1A70     		strb	r2, [r3, #0]
2028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3155              		.loc 1 2028 0
 3156 10ec BB68     		ldr	r3, [r7, #8]
 3157 10ee 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3158 10f0 1846     		mov	r0, r3
 3159 10f2 00F0D7FA 		bl	RTC_Bcd2ToByte
 3160 10f6 0346     		mov	r3, r0
 3161 10f8 1A46     		mov	r2, r3
 3162 10fa BB68     		ldr	r3, [r7, #8]
 3163 10fc 5A70     		strb	r2, [r3, #1]
2029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3164              		.loc 1 2029 0
 3165 10fe BB68     		ldr	r3, [r7, #8]
 3166 1100 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3167 1102 1846     		mov	r0, r3
 3168 1104 00F0CEFA 		bl	RTC_Bcd2ToByte
 3169 1108 0346     		mov	r3, r0
 3170 110a 1A46     		mov	r2, r3
 3171 110c BB68     		ldr	r3, [r7, #8]
 3172 110e 9A70     		strb	r2, [r3, #2]
2030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3173              		.loc 1 2032 0
 3174 1110 7B68     		ldr	r3, [r7, #4]
 3175 1112 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3176 1114 1846     		mov	r0, r3
 3177 1116 00F0C5FA 		bl	RTC_Bcd2ToByte
 3178 111a 0346     		mov	r3, r0
 3179 111c 1A46     		mov	r2, r3
 3180 111e 7B68     		ldr	r3, [r7, #4]
 3181 1120 5A70     		strb	r2, [r3, #1]
2033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3182              		.loc 1 2033 0
 3183 1122 7B68     		ldr	r3, [r7, #4]
 3184 1124 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3185 1126 1846     		mov	r0, r3
 3186 1128 00F0BCFA 		bl	RTC_Bcd2ToByte
 3187 112c 0346     		mov	r3, r0
 3188 112e 1A46     		mov	r2, r3
 3189 1130 7B68     		ldr	r3, [r7, #4]
 3190 1132 9A70     		strb	r2, [r3, #2]
2034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3191              		.loc 1 2034 0
 3192 1134 7B68     		ldr	r3, [r7, #4]
 3193 1136 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3194 1138 1846     		mov	r0, r3
 3195 113a 00F0B3FA 		bl	RTC_Bcd2ToByte
 3196 113e 0346     		mov	r3, r0
 3197 1140 1A46     		mov	r2, r3
 3198 1142 7B68     		ldr	r3, [r7, #4]
 3199 1144 1A70     		strb	r2, [r3, #0]
 3200              	.L198:
2035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3201              		.loc 1 2036 0
 3202 1146 07F11807 		add	r7, r7, #24
 3203 114a BD46     		mov	sp, r7
 3204 114c 80BD     		pop	{r7, pc}
 3205              	.L201:
 3206 114e 00BF     		.align	2
 3207              	.L200:
 3208 1150 00280040 		.word	1073752064
 3209              		.cfi_endproc
 3210              	.LFE145:
 3212              		.align	2
 3213              		.global	RTC_GetTimeStampSubSecond
 3214              		.thumb
 3215              		.thumb_func
 3217              	RTC_GetTimeStampSubSecond:
 3218              	.LFB146:
2037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3219              		.loc 1 2044 0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 1, uses_anonymous_args = 0
 3223              		@ link register save eliminated.
 3224 1154 80B4     		push	{r7}
 3225              	.LCFI105:
 3226              		.cfi_def_cfa_offset 4
 3227              		.cfi_offset 7, -4
 3228 1156 00AF     		add	r7, sp, #0
 3229              	.LCFI106:
 3230              		.cfi_def_cfa_register 7
2045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3231              		.loc 1 2046 0
 3232 1158 024B     		ldr	r3, .L204
 3233 115a 9B6B     		ldr	r3, [r3, #56]
2047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3234              		.loc 1 2047 0
 3235 115c 1846     		mov	r0, r3
 3236 115e BD46     		mov	sp, r7
 3237 1160 80BC     		pop	{r7}
 3238 1162 7047     		bx	lr
 3239              	.L205:
 3240              		.align	2
 3241              	.L204:
 3242 1164 00280040 		.word	1073752064
 3243              		.cfi_endproc
 3244              	.LFE146:
 3246              		.align	2
 3247              		.global	RTC_TamperTriggerConfig
 3248              		.thumb
 3249              		.thumb_func
 3251              	RTC_TamperTriggerConfig:
 3252              	.LFB147:
2048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3253              		.loc 1 2079 0
 3254              		.cfi_startproc
 3255              		@ args = 0, pretend = 0, frame = 8
 3256              		@ frame_needed = 1, uses_anonymous_args = 0
 3257              		@ link register save eliminated.
 3258 1168 80B4     		push	{r7}
 3259              	.LCFI107:
 3260              		.cfi_def_cfa_offset 4
 3261              		.cfi_offset 7, -4
 3262 116a 83B0     		sub	sp, sp, #12
 3263              	.LCFI108:
 3264              		.cfi_def_cfa_offset 16
 3265 116c 00AF     		add	r7, sp, #0
 3266              	.LCFI109:
 3267              		.cfi_def_cfa_register 7
 3268 116e 7860     		str	r0, [r7, #4]
 3269 1170 3960     		str	r1, [r7, #0]
2080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3270              		.loc 1 2084 0
 3271 1172 3B68     		ldr	r3, [r7, #0]
 3272 1174 002B     		cmp	r3, #0
 3273 1176 0AD1     		bne	.L207
2085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3274              		.loc 1 2087 0
 3275 1178 0B4B     		ldr	r3, .L209
 3276 117a 0B4A     		ldr	r2, .L209
 3277 117c 116C     		ldr	r1, [r2, #64]
 3278 117e 7A68     		ldr	r2, [r7, #4]
 3279 1180 4FEA4202 		lsl	r2, r2, #1
 3280 1184 6FEA0202 		mvn	r2, r2
 3281 1188 0A40     		ands	r2, r2, r1
 3282 118a 1A64     		str	r2, [r3, #64]
 3283 118c 07E0     		b	.L206
 3284              	.L207:
2088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3285              		.loc 1 2092 0
 3286 118e 064B     		ldr	r3, .L209
 3287 1190 054A     		ldr	r2, .L209
 3288 1192 116C     		ldr	r1, [r2, #64]
 3289 1194 7A68     		ldr	r2, [r7, #4]
 3290 1196 4FEA4202 		lsl	r2, r2, #1
 3291 119a 0A43     		orrs	r2, r2, r1
 3292 119c 1A64     		str	r2, [r3, #64]
 3293              	.L206:
2093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3294              		.loc 1 2094 0
 3295 119e 07F10C07 		add	r7, r7, #12
 3296 11a2 BD46     		mov	sp, r7
 3297 11a4 80BC     		pop	{r7}
 3298 11a6 7047     		bx	lr
 3299              	.L210:
 3300              		.align	2
 3301              	.L209:
 3302 11a8 00280040 		.word	1073752064
 3303              		.cfi_endproc
 3304              	.LFE147:
 3306              		.align	2
 3307              		.global	RTC_TamperCmd
 3308              		.thumb
 3309              		.thumb_func
 3311              	RTC_TamperCmd:
 3312              	.LFB148:
2095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3313              		.loc 1 2105 0
 3314              		.cfi_startproc
 3315              		@ args = 0, pretend = 0, frame = 8
 3316              		@ frame_needed = 1, uses_anonymous_args = 0
 3317              		@ link register save eliminated.
 3318 11ac 80B4     		push	{r7}
 3319              	.LCFI110:
 3320              		.cfi_def_cfa_offset 4
 3321              		.cfi_offset 7, -4
 3322 11ae 83B0     		sub	sp, sp, #12
 3323              	.LCFI111:
 3324              		.cfi_def_cfa_offset 16
 3325 11b0 00AF     		add	r7, sp, #0
 3326              	.LCFI112:
 3327              		.cfi_def_cfa_register 7
 3328 11b2 7860     		str	r0, [r7, #4]
 3329 11b4 0B46     		mov	r3, r1
 3330 11b6 FB70     		strb	r3, [r7, #3]
2106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3331              		.loc 1 2110 0
 3332 11b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3333 11ba 002B     		cmp	r3, #0
 3334 11bc 06D0     		beq	.L212
2111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3335              		.loc 1 2113 0
 3336 11be 0A4B     		ldr	r3, .L214
 3337 11c0 094A     		ldr	r2, .L214
 3338 11c2 116C     		ldr	r1, [r2, #64]
 3339 11c4 7A68     		ldr	r2, [r7, #4]
 3340 11c6 0A43     		orrs	r2, r2, r1
 3341 11c8 1A64     		str	r2, [r3, #64]
 3342 11ca 07E0     		b	.L211
 3343              	.L212:
2114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3344              		.loc 1 2118 0
 3345 11cc 064B     		ldr	r3, .L214
 3346 11ce 064A     		ldr	r2, .L214
 3347 11d0 116C     		ldr	r1, [r2, #64]
 3348 11d2 7A68     		ldr	r2, [r7, #4]
 3349 11d4 6FEA0202 		mvn	r2, r2
 3350 11d8 0A40     		ands	r2, r2, r1
 3351 11da 1A64     		str	r2, [r3, #64]
 3352              	.L211:
2119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3353              		.loc 1 2120 0
 3354 11dc 07F10C07 		add	r7, r7, #12
 3355 11e0 BD46     		mov	sp, r7
 3356 11e2 80BC     		pop	{r7}
 3357 11e4 7047     		bx	lr
 3358              	.L215:
 3359 11e6 00BF     		.align	2
 3360              	.L214:
 3361 11e8 00280040 		.word	1073752064
 3362              		.cfi_endproc
 3363              	.LFE148:
 3365              		.align	2
 3366              		.global	RTC_TamperFilterConfig
 3367              		.thumb
 3368              		.thumb_func
 3370              	RTC_TamperFilterConfig:
 3371              	.LFB149:
2121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3372              		.loc 1 2136 0
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 8
 3375              		@ frame_needed = 1, uses_anonymous_args = 0
 3376              		@ link register save eliminated.
 3377 11ec 80B4     		push	{r7}
 3378              	.LCFI113:
 3379              		.cfi_def_cfa_offset 4
 3380              		.cfi_offset 7, -4
 3381 11ee 83B0     		sub	sp, sp, #12
 3382              	.LCFI114:
 3383              		.cfi_def_cfa_offset 16
 3384 11f0 00AF     		add	r7, sp, #0
 3385              	.LCFI115:
 3386              		.cfi_def_cfa_register 7
 3387 11f2 7860     		str	r0, [r7, #4]
2137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3388              		.loc 1 2141 0
 3389 11f4 084B     		ldr	r3, .L217
 3390 11f6 084A     		ldr	r2, .L217
 3391 11f8 126C     		ldr	r2, [r2, #64]
 3392 11fa 22F4C052 		bic	r2, r2, #6144
 3393 11fe 1A64     		str	r2, [r3, #64]
2142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3394              		.loc 1 2144 0
 3395 1200 054B     		ldr	r3, .L217
 3396 1202 054A     		ldr	r2, .L217
 3397 1204 116C     		ldr	r1, [r2, #64]
 3398 1206 7A68     		ldr	r2, [r7, #4]
 3399 1208 0A43     		orrs	r2, r2, r1
 3400 120a 1A64     		str	r2, [r3, #64]
2145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3401              		.loc 1 2145 0
 3402 120c 07F10C07 		add	r7, r7, #12
 3403 1210 BD46     		mov	sp, r7
 3404 1212 80BC     		pop	{r7}
 3405 1214 7047     		bx	lr
 3406              	.L218:
 3407 1216 00BF     		.align	2
 3408              	.L217:
 3409 1218 00280040 		.word	1073752064
 3410              		.cfi_endproc
 3411              	.LFE149:
 3413              		.align	2
 3414              		.global	RTC_TamperSamplingFreqConfig
 3415              		.thumb
 3416              		.thumb_func
 3418              	RTC_TamperSamplingFreqConfig:
 3419              	.LFB150:
2146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3420              		.loc 1 2170 0
 3421              		.cfi_startproc
 3422              		@ args = 0, pretend = 0, frame = 8
 3423              		@ frame_needed = 1, uses_anonymous_args = 0
 3424              		@ link register save eliminated.
 3425 121c 80B4     		push	{r7}
 3426              	.LCFI116:
 3427              		.cfi_def_cfa_offset 4
 3428              		.cfi_offset 7, -4
 3429 121e 83B0     		sub	sp, sp, #12
 3430              	.LCFI117:
 3431              		.cfi_def_cfa_offset 16
 3432 1220 00AF     		add	r7, sp, #0
 3433              	.LCFI118:
 3434              		.cfi_def_cfa_register 7
 3435 1222 7860     		str	r0, [r7, #4]
2171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3436              		.loc 1 2175 0
 3437 1224 084B     		ldr	r3, .L220
 3438 1226 084A     		ldr	r2, .L220
 3439 1228 126C     		ldr	r2, [r2, #64]
 3440 122a 22F4E062 		bic	r2, r2, #1792
 3441 122e 1A64     		str	r2, [r3, #64]
2176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3442              		.loc 1 2178 0
 3443 1230 054B     		ldr	r3, .L220
 3444 1232 054A     		ldr	r2, .L220
 3445 1234 116C     		ldr	r1, [r2, #64]
 3446 1236 7A68     		ldr	r2, [r7, #4]
 3447 1238 0A43     		orrs	r2, r2, r1
 3448 123a 1A64     		str	r2, [r3, #64]
2179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3449              		.loc 1 2179 0
 3450 123c 07F10C07 		add	r7, r7, #12
 3451 1240 BD46     		mov	sp, r7
 3452 1242 80BC     		pop	{r7}
 3453 1244 7047     		bx	lr
 3454              	.L221:
 3455 1246 00BF     		.align	2
 3456              	.L220:
 3457 1248 00280040 		.word	1073752064
 3458              		.cfi_endproc
 3459              	.LFE150:
 3461              		.align	2
 3462              		.global	RTC_TamperPinsPrechargeDuration
 3463              		.thumb
 3464              		.thumb_func
 3466              	RTC_TamperPinsPrechargeDuration:
 3467              	.LFB151:
2180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3468              		.loc 1 2193 0
 3469              		.cfi_startproc
 3470              		@ args = 0, pretend = 0, frame = 8
 3471              		@ frame_needed = 1, uses_anonymous_args = 0
 3472              		@ link register save eliminated.
 3473 124c 80B4     		push	{r7}
 3474              	.LCFI119:
 3475              		.cfi_def_cfa_offset 4
 3476              		.cfi_offset 7, -4
 3477 124e 83B0     		sub	sp, sp, #12
 3478              	.LCFI120:
 3479              		.cfi_def_cfa_offset 16
 3480 1250 00AF     		add	r7, sp, #0
 3481              	.LCFI121:
 3482              		.cfi_def_cfa_register 7
 3483 1252 7860     		str	r0, [r7, #4]
2194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3484              		.loc 1 2198 0
 3485 1254 084B     		ldr	r3, .L223
 3486 1256 084A     		ldr	r2, .L223
 3487 1258 126C     		ldr	r2, [r2, #64]
 3488 125a 22F4C042 		bic	r2, r2, #24576
 3489 125e 1A64     		str	r2, [r3, #64]
2199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3490              		.loc 1 2201 0
 3491 1260 054B     		ldr	r3, .L223
 3492 1262 054A     		ldr	r2, .L223
 3493 1264 116C     		ldr	r1, [r2, #64]
 3494 1266 7A68     		ldr	r2, [r7, #4]
 3495 1268 0A43     		orrs	r2, r2, r1
 3496 126a 1A64     		str	r2, [r3, #64]
2202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3497              		.loc 1 2202 0
 3498 126c 07F10C07 		add	r7, r7, #12
 3499 1270 BD46     		mov	sp, r7
 3500 1272 80BC     		pop	{r7}
 3501 1274 7047     		bx	lr
 3502              	.L224:
 3503 1276 00BF     		.align	2
 3504              	.L223:
 3505 1278 00280040 		.word	1073752064
 3506              		.cfi_endproc
 3507              	.LFE151:
 3509              		.align	2
 3510              		.global	RTC_TimeStampOnTamperDetectionCmd
 3511              		.thumb
 3512              		.thumb_func
 3514              	RTC_TimeStampOnTamperDetectionCmd:
 3515              	.LFB152:
2203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3516              		.loc 1 2213 0
 3517              		.cfi_startproc
 3518              		@ args = 0, pretend = 0, frame = 8
 3519              		@ frame_needed = 1, uses_anonymous_args = 0
 3520              		@ link register save eliminated.
 3521 127c 80B4     		push	{r7}
 3522              	.LCFI122:
 3523              		.cfi_def_cfa_offset 4
 3524              		.cfi_offset 7, -4
 3525 127e 83B0     		sub	sp, sp, #12
 3526              	.LCFI123:
 3527              		.cfi_def_cfa_offset 16
 3528 1280 00AF     		add	r7, sp, #0
 3529              	.LCFI124:
 3530              		.cfi_def_cfa_register 7
 3531 1282 0346     		mov	r3, r0
 3532 1284 FB71     		strb	r3, [r7, #7]
2214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3533              		.loc 1 2217 0
 3534 1286 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3535 1288 002B     		cmp	r3, #0
 3536 128a 06D0     		beq	.L226
2218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3537              		.loc 1 2220 0
 3538 128c 084B     		ldr	r3, .L228
 3539 128e 084A     		ldr	r2, .L228
 3540 1290 126C     		ldr	r2, [r2, #64]
 3541 1292 42F08002 		orr	r2, r2, #128
 3542 1296 1A64     		str	r2, [r3, #64]
 3543 1298 05E0     		b	.L225
 3544              	.L226:
2221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3545              		.loc 1 2225 0
 3546 129a 054B     		ldr	r3, .L228
 3547 129c 044A     		ldr	r2, .L228
 3548 129e 126C     		ldr	r2, [r2, #64]
 3549 12a0 22F08002 		bic	r2, r2, #128
 3550 12a4 1A64     		str	r2, [r3, #64]
 3551              	.L225:
2226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3552              		.loc 1 2227 0
 3553 12a6 07F10C07 		add	r7, r7, #12
 3554 12aa BD46     		mov	sp, r7
 3555 12ac 80BC     		pop	{r7}
 3556 12ae 7047     		bx	lr
 3557              	.L229:
 3558              		.align	2
 3559              	.L228:
 3560 12b0 00280040 		.word	1073752064
 3561              		.cfi_endproc
 3562              	.LFE152:
 3564              		.align	2
 3565              		.global	RTC_TamperPullUpCmd
 3566              		.thumb
 3567              		.thumb_func
 3569              	RTC_TamperPullUpCmd:
 3570              	.LFB153:
2228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3571              		.loc 1 2236 0
 3572              		.cfi_startproc
 3573              		@ args = 0, pretend = 0, frame = 8
 3574              		@ frame_needed = 1, uses_anonymous_args = 0
 3575              		@ link register save eliminated.
 3576 12b4 80B4     		push	{r7}
 3577              	.LCFI125:
 3578              		.cfi_def_cfa_offset 4
 3579              		.cfi_offset 7, -4
 3580 12b6 83B0     		sub	sp, sp, #12
 3581              	.LCFI126:
 3582              		.cfi_def_cfa_offset 16
 3583 12b8 00AF     		add	r7, sp, #0
 3584              	.LCFI127:
 3585              		.cfi_def_cfa_register 7
 3586 12ba 0346     		mov	r3, r0
 3587 12bc FB71     		strb	r3, [r7, #7]
2237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3588              		.loc 1 2240 0
 3589 12be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3590 12c0 002B     		cmp	r3, #0
 3591 12c2 06D0     		beq	.L231
2241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3592              		.loc 1 2243 0
 3593 12c4 084B     		ldr	r3, .L233
 3594 12c6 084A     		ldr	r2, .L233
 3595 12c8 126C     		ldr	r2, [r2, #64]
 3596 12ca 22F40042 		bic	r2, r2, #32768
 3597 12ce 1A64     		str	r2, [r3, #64]
 3598 12d0 05E0     		b	.L230
 3599              	.L231:
2244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3600              		.loc 1 2248 0
 3601 12d2 054B     		ldr	r3, .L233
 3602 12d4 044A     		ldr	r2, .L233
 3603 12d6 126C     		ldr	r2, [r2, #64]
 3604 12d8 42F40042 		orr	r2, r2, #32768
 3605 12dc 1A64     		str	r2, [r3, #64]
 3606              	.L230:
2249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3607              		.loc 1 2250 0
 3608 12de 07F10C07 		add	r7, r7, #12
 3609 12e2 BD46     		mov	sp, r7
 3610 12e4 80BC     		pop	{r7}
 3611 12e6 7047     		bx	lr
 3612              	.L234:
 3613              		.align	2
 3614              	.L233:
 3615 12e8 00280040 		.word	1073752064
 3616              		.cfi_endproc
 3617              	.LFE153:
 3619              		.align	2
 3620              		.global	RTC_WriteBackupRegister
 3621              		.thumb
 3622              		.thumb_func
 3624              	RTC_WriteBackupRegister:
 3625              	.LFB154:
2251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3626              		.loc 1 2277 0
 3627              		.cfi_startproc
 3628              		@ args = 0, pretend = 0, frame = 16
 3629              		@ frame_needed = 1, uses_anonymous_args = 0
 3630              		@ link register save eliminated.
 3631 12ec 80B4     		push	{r7}
 3632              	.LCFI128:
 3633              		.cfi_def_cfa_offset 4
 3634              		.cfi_offset 7, -4
 3635 12ee 85B0     		sub	sp, sp, #20
 3636              	.LCFI129:
 3637              		.cfi_def_cfa_offset 24
 3638 12f0 00AF     		add	r7, sp, #0
 3639              	.LCFI130:
 3640              		.cfi_def_cfa_register 7
 3641 12f2 7860     		str	r0, [r7, #4]
 3642 12f4 3960     		str	r1, [r7, #0]
2278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3643              		.loc 1 2278 0
 3644 12f6 4FF00003 		mov	r3, #0
 3645 12fa FB60     		str	r3, [r7, #12]
2279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3646              		.loc 1 2283 0
 3647 12fc 074B     		ldr	r3, .L236
 3648 12fe FB60     		str	r3, [r7, #12]
2284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3649              		.loc 1 2284 0
 3650 1300 7B68     		ldr	r3, [r7, #4]
 3651 1302 4FEA8302 		lsl	r2, r3, #2
 3652 1306 FB68     		ldr	r3, [r7, #12]
 3653 1308 D318     		adds	r3, r2, r3
 3654 130a FB60     		str	r3, [r7, #12]
2285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3655              		.loc 1 2287 0
 3656 130c FB68     		ldr	r3, [r7, #12]
 3657 130e 3A68     		ldr	r2, [r7, #0]
 3658 1310 1A60     		str	r2, [r3, #0]
2288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3659              		.loc 1 2288 0
 3660 1312 07F11407 		add	r7, r7, #20
 3661 1316 BD46     		mov	sp, r7
 3662 1318 80BC     		pop	{r7}
 3663 131a 7047     		bx	lr
 3664              	.L237:
 3665              		.align	2
 3666              	.L236:
 3667 131c 50280040 		.word	1073752144
 3668              		.cfi_endproc
 3669              	.LFE154:
 3671              		.align	2
 3672              		.global	RTC_ReadBackupRegister
 3673              		.thumb
 3674              		.thumb_func
 3676              	RTC_ReadBackupRegister:
 3677              	.LFB155:
2289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3678              		.loc 1 2298 0
 3679              		.cfi_startproc
 3680              		@ args = 0, pretend = 0, frame = 16
 3681              		@ frame_needed = 1, uses_anonymous_args = 0
 3682              		@ link register save eliminated.
 3683 1320 80B4     		push	{r7}
 3684              	.LCFI131:
 3685              		.cfi_def_cfa_offset 4
 3686              		.cfi_offset 7, -4
 3687 1322 85B0     		sub	sp, sp, #20
 3688              	.LCFI132:
 3689              		.cfi_def_cfa_offset 24
 3690 1324 00AF     		add	r7, sp, #0
 3691              	.LCFI133:
 3692              		.cfi_def_cfa_register 7
 3693 1326 7860     		str	r0, [r7, #4]
2299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3694              		.loc 1 2299 0
 3695 1328 4FF00003 		mov	r3, #0
 3696 132c FB60     		str	r3, [r7, #12]
2300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3697              		.loc 1 2304 0
 3698 132e 084B     		ldr	r3, .L240
 3699 1330 FB60     		str	r3, [r7, #12]
2305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3700              		.loc 1 2305 0
 3701 1332 7B68     		ldr	r3, [r7, #4]
 3702 1334 4FEA8302 		lsl	r2, r3, #2
 3703 1338 FB68     		ldr	r3, [r7, #12]
 3704 133a D318     		adds	r3, r2, r3
 3705 133c FB60     		str	r3, [r7, #12]
2306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3706              		.loc 1 2308 0
 3707 133e FB68     		ldr	r3, [r7, #12]
 3708 1340 1B68     		ldr	r3, [r3, #0]
2309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3709              		.loc 1 2309 0
 3710 1342 1846     		mov	r0, r3
 3711 1344 07F11407 		add	r7, r7, #20
 3712 1348 BD46     		mov	sp, r7
 3713 134a 80BC     		pop	{r7}
 3714 134c 7047     		bx	lr
 3715              	.L241:
 3716 134e 00BF     		.align	2
 3717              	.L240:
 3718 1350 50280040 		.word	1073752144
 3719              		.cfi_endproc
 3720              	.LFE155:
 3722              		.align	2
 3723              		.global	RTC_TamperPinSelection
 3724              		.thumb
 3725              		.thumb_func
 3727              	RTC_TamperPinSelection:
 3728              	.LFB156:
2310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3729              		.loc 1 2338 0
 3730              		.cfi_startproc
 3731              		@ args = 0, pretend = 0, frame = 8
 3732              		@ frame_needed = 1, uses_anonymous_args = 0
 3733              		@ link register save eliminated.
 3734 1354 80B4     		push	{r7}
 3735              	.LCFI134:
 3736              		.cfi_def_cfa_offset 4
 3737              		.cfi_offset 7, -4
 3738 1356 83B0     		sub	sp, sp, #12
 3739              	.LCFI135:
 3740              		.cfi_def_cfa_offset 16
 3741 1358 00AF     		add	r7, sp, #0
 3742              	.LCFI136:
 3743              		.cfi_def_cfa_register 7
 3744 135a 7860     		str	r0, [r7, #4]
2339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3745              		.loc 1 2342 0
 3746 135c 084B     		ldr	r3, .L243
 3747 135e 084A     		ldr	r2, .L243
 3748 1360 126C     		ldr	r2, [r2, #64]
 3749 1362 22F48032 		bic	r2, r2, #65536
 3750 1366 1A64     		str	r2, [r3, #64]
2343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3751              		.loc 1 2343 0
 3752 1368 054B     		ldr	r3, .L243
 3753 136a 054A     		ldr	r2, .L243
 3754 136c 116C     		ldr	r1, [r2, #64]
 3755 136e 7A68     		ldr	r2, [r7, #4]
 3756 1370 0A43     		orrs	r2, r2, r1
 3757 1372 1A64     		str	r2, [r3, #64]
2344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3758              		.loc 1 2344 0
 3759 1374 07F10C07 		add	r7, r7, #12
 3760 1378 BD46     		mov	sp, r7
 3761 137a 80BC     		pop	{r7}
 3762 137c 7047     		bx	lr
 3763              	.L244:
 3764 137e 00BF     		.align	2
 3765              	.L243:
 3766 1380 00280040 		.word	1073752064
 3767              		.cfi_endproc
 3768              	.LFE156:
 3770              		.align	2
 3771              		.global	RTC_TimeStampPinSelection
 3772              		.thumb
 3773              		.thumb_func
 3775              	RTC_TimeStampPinSelection:
 3776              	.LFB157:
2345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3777              		.loc 1 2355 0
 3778              		.cfi_startproc
 3779              		@ args = 0, pretend = 0, frame = 8
 3780              		@ frame_needed = 1, uses_anonymous_args = 0
 3781              		@ link register save eliminated.
 3782 1384 80B4     		push	{r7}
 3783              	.LCFI137:
 3784              		.cfi_def_cfa_offset 4
 3785              		.cfi_offset 7, -4
 3786 1386 83B0     		sub	sp, sp, #12
 3787              	.LCFI138:
 3788              		.cfi_def_cfa_offset 16
 3789 1388 00AF     		add	r7, sp, #0
 3790              	.LCFI139:
 3791              		.cfi_def_cfa_register 7
 3792 138a 7860     		str	r0, [r7, #4]
2356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3793              		.loc 1 2359 0
 3794 138c 084B     		ldr	r3, .L246
 3795 138e 084A     		ldr	r2, .L246
 3796 1390 126C     		ldr	r2, [r2, #64]
 3797 1392 22F40032 		bic	r2, r2, #131072
 3798 1396 1A64     		str	r2, [r3, #64]
2360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3799              		.loc 1 2360 0
 3800 1398 054B     		ldr	r3, .L246
 3801 139a 054A     		ldr	r2, .L246
 3802 139c 116C     		ldr	r1, [r2, #64]
 3803 139e 7A68     		ldr	r2, [r7, #4]
 3804 13a0 0A43     		orrs	r2, r2, r1
 3805 13a2 1A64     		str	r2, [r3, #64]
2361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3806              		.loc 1 2361 0
 3807 13a4 07F10C07 		add	r7, r7, #12
 3808 13a8 BD46     		mov	sp, r7
 3809 13aa 80BC     		pop	{r7}
 3810 13ac 7047     		bx	lr
 3811              	.L247:
 3812 13ae 00BF     		.align	2
 3813              	.L246:
 3814 13b0 00280040 		.word	1073752064
 3815              		.cfi_endproc
 3816              	.LFE157:
 3818              		.align	2
 3819              		.global	RTC_OutputTypeConfig
 3820              		.thumb
 3821              		.thumb_func
 3823              	RTC_OutputTypeConfig:
 3824              	.LFB158:
2362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3825              		.loc 1 2374 0
 3826              		.cfi_startproc
 3827              		@ args = 0, pretend = 0, frame = 8
 3828              		@ frame_needed = 1, uses_anonymous_args = 0
 3829              		@ link register save eliminated.
 3830 13b4 80B4     		push	{r7}
 3831              	.LCFI140:
 3832              		.cfi_def_cfa_offset 4
 3833              		.cfi_offset 7, -4
 3834 13b6 83B0     		sub	sp, sp, #12
 3835              	.LCFI141:
 3836              		.cfi_def_cfa_offset 16
 3837 13b8 00AF     		add	r7, sp, #0
 3838              	.LCFI142:
 3839              		.cfi_def_cfa_register 7
 3840 13ba 7860     		str	r0, [r7, #4]
2375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3841              		.loc 1 2378 0
 3842 13bc 084B     		ldr	r3, .L249
 3843 13be 084A     		ldr	r2, .L249
 3844 13c0 126C     		ldr	r2, [r2, #64]
 3845 13c2 22F48022 		bic	r2, r2, #262144
 3846 13c6 1A64     		str	r2, [r3, #64]
2379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3847              		.loc 1 2379 0
 3848 13c8 054B     		ldr	r3, .L249
 3849 13ca 054A     		ldr	r2, .L249
 3850 13cc 116C     		ldr	r1, [r2, #64]
 3851 13ce 7A68     		ldr	r2, [r7, #4]
 3852 13d0 0A43     		orrs	r2, r2, r1
 3853 13d2 1A64     		str	r2, [r3, #64]
2380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3854              		.loc 1 2380 0
 3855 13d4 07F10C07 		add	r7, r7, #12
 3856 13d8 BD46     		mov	sp, r7
 3857 13da 80BC     		pop	{r7}
 3858 13dc 7047     		bx	lr
 3859              	.L250:
 3860 13de 00BF     		.align	2
 3861              	.L249:
 3862 13e0 00280040 		.word	1073752064
 3863              		.cfi_endproc
 3864              	.LFE158:
 3866              		.align	2
 3867              		.global	RTC_SynchroShiftConfig
 3868              		.thumb
 3869              		.thumb_func
 3871              	RTC_SynchroShiftConfig:
 3872              	.LFB159:
2381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3873              		.loc 1 2412 0
 3874              		.cfi_startproc
 3875              		@ args = 0, pretend = 0, frame = 16
 3876              		@ frame_needed = 1, uses_anonymous_args = 0
 3877 13e4 80B5     		push	{r7, lr}
 3878              	.LCFI143:
 3879              		.cfi_def_cfa_offset 8
 3880              		.cfi_offset 7, -8
 3881              		.cfi_offset 14, -4
 3882 13e6 84B0     		sub	sp, sp, #16
 3883              	.LCFI144:
 3884              		.cfi_def_cfa_offset 24
 3885 13e8 00AF     		add	r7, sp, #0
 3886              	.LCFI145:
 3887              		.cfi_def_cfa_register 7
 3888 13ea 7860     		str	r0, [r7, #4]
 3889 13ec 3960     		str	r1, [r7, #0]
2413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3890              		.loc 1 2413 0
 3891 13ee 4FF00003 		mov	r3, #0
 3892 13f2 FB73     		strb	r3, [r7, #15]
2414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3893              		.loc 1 2414 0
 3894 13f4 4FF00003 		mov	r3, #0
 3895 13f8 BB60     		str	r3, [r7, #8]
2415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3896              		.loc 1 2421 0
 3897 13fa 264B     		ldr	r3, .L260
 3898 13fc 4FF0CA02 		mov	r2, #202
 3899 1400 5A62     		str	r2, [r3, #36]
2422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3900              		.loc 1 2422 0
 3901 1402 244B     		ldr	r3, .L260
 3902 1404 4FF05302 		mov	r2, #83
 3903 1408 5A62     		str	r2, [r3, #36]
2423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 3904              		.loc 1 2425 0
 3905 140a 224B     		ldr	r3, .L260
 3906 140c DB68     		ldr	r3, [r3, #12]
 3907 140e 03F00803 		and	r3, r3, #8
 3908 1412 002B     		cmp	r3, #0
 3909 1414 0ED0     		beq	.L252
2426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3910              		.loc 1 2428 0
 3911 1416 03E0     		b	.L253
 3912              	.L254:
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 3913              		.loc 1 2430 0
 3914 1418 BB68     		ldr	r3, [r7, #8]
 3915 141a 03F10103 		add	r3, r3, #1
 3916 141e BB60     		str	r3, [r7, #8]
 3917              	.L253:
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3918              		.loc 1 2428 0 discriminator 1
 3919 1420 1C4B     		ldr	r3, .L260
 3920 1422 DB68     		ldr	r3, [r3, #12]
 3921 1424 03F00803 		and	r3, r3, #8
 3922 1428 002B     		cmp	r3, #0
 3923 142a 03D0     		beq	.L252
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3924              		.loc 1 2428 0 is_stmt 0 discriminator 2
 3925 142c BB68     		ldr	r3, [r7, #8]
 3926 142e B3F5805F 		cmp	r3, #4096
 3927 1432 F1D1     		bne	.L254
 3928              	.L252:
2431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 3929              		.loc 1 2435 0 is_stmt 1
 3930 1434 174B     		ldr	r3, .L260
 3931 1436 DB68     		ldr	r3, [r3, #12]
 3932 1438 03F00803 		and	r3, r3, #8
 3933 143c 002B     		cmp	r3, #0
 3934 143e 1BD1     		bne	.L255
2436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 3935              		.loc 1 2438 0
 3936 1440 144B     		ldr	r3, .L260
 3937 1442 9B68     		ldr	r3, [r3, #8]
 3938 1444 03F01003 		and	r3, r3, #16
 3939 1448 002B     		cmp	r3, #0
 3940 144a 11D1     		bne	.L256
2439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 3941              		.loc 1 2441 0
 3942 144c 114B     		ldr	r3, .L260
 3943 144e 3968     		ldr	r1, [r7, #0]
 3944 1450 7A68     		ldr	r2, [r7, #4]
 3945 1452 0A43     		orrs	r2, r2, r1
 3946 1454 DA62     		str	r2, [r3, #44]
2442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 3947              		.loc 1 2443 0
 3948 1456 FFF7FEFF 		bl	RTC_WaitForSynchro
 3949 145a 0346     		mov	r3, r0
 3950 145c 002B     		cmp	r3, #0
 3951 145e 03D1     		bne	.L257
2444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 3952              		.loc 1 2445 0
 3953 1460 4FF00003 		mov	r3, #0
 3954 1464 FB73     		strb	r3, [r7, #15]
 3955 1466 0AE0     		b	.L258
 3956              	.L257:
2446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 3957              		.loc 1 2449 0
 3958 1468 4FF00103 		mov	r3, #1
 3959 146c FB73     		strb	r3, [r7, #15]
 3960 146e 06E0     		b	.L258
 3961              	.L256:
2450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 3962              		.loc 1 2454 0
 3963 1470 4FF00003 		mov	r3, #0
 3964 1474 FB73     		strb	r3, [r7, #15]
 3965 1476 02E0     		b	.L258
 3966              	.L255:
2455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3967              		.loc 1 2459 0
 3968 1478 4FF00003 		mov	r3, #0
 3969 147c FB73     		strb	r3, [r7, #15]
 3970              	.L258:
2460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3971              		.loc 1 2463 0
 3972 147e 054B     		ldr	r3, .L260
 3973 1480 4FF0FF02 		mov	r2, #255
 3974 1484 5A62     		str	r2, [r3, #36]
2464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3975              		.loc 1 2465 0
 3976 1486 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3977              		.loc 1 2466 0
 3978 1488 1846     		mov	r0, r3
 3979 148a 07F11007 		add	r7, r7, #16
 3980 148e BD46     		mov	sp, r7
 3981 1490 80BD     		pop	{r7, pc}
 3982              	.L261:
 3983 1492 00BF     		.align	2
 3984              	.L260:
 3985 1494 00280040 		.word	1073752064
 3986              		.cfi_endproc
 3987              	.LFE159:
 3989              		.align	2
 3990              		.global	RTC_ITConfig
 3991              		.thumb
 3992              		.thumb_func
 3994              	RTC_ITConfig:
 3995              	.LFB160:
2467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3996              		.loc 1 2531 0
 3997              		.cfi_startproc
 3998              		@ args = 0, pretend = 0, frame = 8
 3999              		@ frame_needed = 1, uses_anonymous_args = 0
 4000              		@ link register save eliminated.
 4001 1498 80B4     		push	{r7}
 4002              	.LCFI146:
 4003              		.cfi_def_cfa_offset 4
 4004              		.cfi_offset 7, -4
 4005 149a 83B0     		sub	sp, sp, #12
 4006              	.LCFI147:
 4007              		.cfi_def_cfa_offset 16
 4008 149c 00AF     		add	r7, sp, #0
 4009              	.LCFI148:
 4010              		.cfi_def_cfa_register 7
 4011 149e 7860     		str	r0, [r7, #4]
 4012 14a0 0B46     		mov	r3, r1
 4013 14a2 FB70     		strb	r3, [r7, #3]
2532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4014              		.loc 1 2537 0
 4015 14a4 1C4B     		ldr	r3, .L265
 4016 14a6 4FF0CA02 		mov	r2, #202
 4017 14aa 5A62     		str	r2, [r3, #36]
2538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4018              		.loc 1 2538 0
 4019 14ac 1A4B     		ldr	r3, .L265
 4020 14ae 4FF05302 		mov	r2, #83
 4021 14b2 5A62     		str	r2, [r3, #36]
2539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4022              		.loc 1 2540 0
 4023 14b4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4024 14b6 002B     		cmp	r3, #0
 4025 14b8 10D0     		beq	.L263
2541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4026              		.loc 1 2543 0
 4027 14ba 174B     		ldr	r3, .L265
 4028 14bc 164A     		ldr	r2, .L265
 4029 14be 9168     		ldr	r1, [r2, #8]
 4030 14c0 7A68     		ldr	r2, [r7, #4]
 4031 14c2 22F00402 		bic	r2, r2, #4
 4032 14c6 0A43     		orrs	r2, r2, r1
 4033 14c8 9A60     		str	r2, [r3, #8]
2544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4034              		.loc 1 2545 0
 4035 14ca 134B     		ldr	r3, .L265
 4036 14cc 124A     		ldr	r2, .L265
 4037 14ce 116C     		ldr	r1, [r2, #64]
 4038 14d0 7A68     		ldr	r2, [r7, #4]
 4039 14d2 02F00402 		and	r2, r2, #4
 4040 14d6 0A43     		orrs	r2, r2, r1
 4041 14d8 1A64     		str	r2, [r3, #64]
 4042 14da 13E0     		b	.L264
 4043              	.L263:
2546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4044              		.loc 1 2550 0
 4045 14dc 0E4B     		ldr	r3, .L265
 4046 14de 0E4A     		ldr	r2, .L265
 4047 14e0 9168     		ldr	r1, [r2, #8]
 4048 14e2 7A68     		ldr	r2, [r7, #4]
 4049 14e4 22F00402 		bic	r2, r2, #4
 4050 14e8 6FEA0202 		mvn	r2, r2
 4051 14ec 0A40     		ands	r2, r2, r1
 4052 14ee 9A60     		str	r2, [r3, #8]
2551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4053              		.loc 1 2552 0
 4054 14f0 094B     		ldr	r3, .L265
 4055 14f2 094A     		ldr	r2, .L265
 4056 14f4 116C     		ldr	r1, [r2, #64]
 4057 14f6 7A68     		ldr	r2, [r7, #4]
 4058 14f8 02F00402 		and	r2, r2, #4
 4059 14fc 6FEA0202 		mvn	r2, r2
 4060 1500 0A40     		ands	r2, r2, r1
 4061 1502 1A64     		str	r2, [r3, #64]
 4062              	.L264:
2553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4063              		.loc 1 2555 0
 4064 1504 044B     		ldr	r3, .L265
 4065 1506 4FF0FF02 		mov	r2, #255
 4066 150a 5A62     		str	r2, [r3, #36]
2556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4067              		.loc 1 2556 0
 4068 150c 07F10C07 		add	r7, r7, #12
 4069 1510 BD46     		mov	sp, r7
 4070 1512 80BC     		pop	{r7}
 4071 1514 7047     		bx	lr
 4072              	.L266:
 4073 1516 00BF     		.align	2
 4074              	.L265:
 4075 1518 00280040 		.word	1073752064
 4076              		.cfi_endproc
 4077              	.LFE160:
 4079              		.align	2
 4080              		.global	RTC_GetFlagStatus
 4081              		.thumb
 4082              		.thumb_func
 4084              	RTC_GetFlagStatus:
 4085              	.LFB161:
2557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4086              		.loc 1 2577 0
 4087              		.cfi_startproc
 4088              		@ args = 0, pretend = 0, frame = 16
 4089              		@ frame_needed = 1, uses_anonymous_args = 0
 4090              		@ link register save eliminated.
 4091 151c 80B4     		push	{r7}
 4092              	.LCFI149:
 4093              		.cfi_def_cfa_offset 4
 4094              		.cfi_offset 7, -4
 4095 151e 85B0     		sub	sp, sp, #20
 4096              	.LCFI150:
 4097              		.cfi_def_cfa_offset 24
 4098 1520 00AF     		add	r7, sp, #0
 4099              	.LCFI151:
 4100              		.cfi_def_cfa_register 7
 4101 1522 7860     		str	r0, [r7, #4]
2578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4102              		.loc 1 2578 0
 4103 1524 4FF00003 		mov	r3, #0
 4104 1528 FB73     		strb	r3, [r7, #15]
2579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4105              		.loc 1 2579 0
 4106 152a 4FF00003 		mov	r3, #0
 4107 152e BB60     		str	r3, [r7, #8]
2580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4108              		.loc 1 2585 0
 4109 1530 0C4B     		ldr	r3, .L271
 4110 1532 DA68     		ldr	r2, [r3, #12]
 4111 1534 43F67773 		movw	r3, #16247
 4112 1538 1340     		ands	r3, r3, r2
 4113 153a BB60     		str	r3, [r7, #8]
2586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4114              		.loc 1 2588 0
 4115 153c BA68     		ldr	r2, [r7, #8]
 4116 153e 7B68     		ldr	r3, [r7, #4]
 4117 1540 1340     		ands	r3, r3, r2
 4118 1542 002B     		cmp	r3, #0
 4119 1544 03D0     		beq	.L268
2589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4120              		.loc 1 2590 0
 4121 1546 4FF00103 		mov	r3, #1
 4122 154a FB73     		strb	r3, [r7, #15]
 4123 154c 02E0     		b	.L269
 4124              	.L268:
2591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4125              		.loc 1 2594 0
 4126 154e 4FF00003 		mov	r3, #0
 4127 1552 FB73     		strb	r3, [r7, #15]
 4128              	.L269:
2595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4129              		.loc 1 2596 0
 4130 1554 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4131              		.loc 1 2597 0
 4132 1556 1846     		mov	r0, r3
 4133 1558 07F11407 		add	r7, r7, #20
 4134 155c BD46     		mov	sp, r7
 4135 155e 80BC     		pop	{r7}
 4136 1560 7047     		bx	lr
 4137              	.L272:
 4138 1562 00BF     		.align	2
 4139              	.L271:
 4140 1564 00280040 		.word	1073752064
 4141              		.cfi_endproc
 4142              	.LFE161:
 4144              		.align	2
 4145              		.global	RTC_ClearFlag
 4146              		.thumb
 4147              		.thumb_func
 4149              	RTC_ClearFlag:
 4150              	.LFB162:
2598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4151              		.loc 1 2613 0
 4152              		.cfi_startproc
 4153              		@ args = 0, pretend = 0, frame = 8
 4154              		@ frame_needed = 1, uses_anonymous_args = 0
 4155              		@ link register save eliminated.
 4156 1568 80B4     		push	{r7}
 4157              	.LCFI152:
 4158              		.cfi_def_cfa_offset 4
 4159              		.cfi_offset 7, -4
 4160 156a 83B0     		sub	sp, sp, #12
 4161              	.LCFI153:
 4162              		.cfi_def_cfa_offset 16
 4163 156c 00AF     		add	r7, sp, #0
 4164              	.LCFI154:
 4165              		.cfi_def_cfa_register 7
 4166 156e 7860     		str	r0, [r7, #4]
2614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4167              		.loc 1 2618 0
 4168 1570 0A4A     		ldr	r2, .L274
 4169 1572 7B68     		ldr	r3, [r7, #4]
 4170 1574 4FEA0343 		lsl	r3, r3, #16
 4171 1578 4FEA1343 		lsr	r3, r3, #16
 4172 157c 43F08003 		orr	r3, r3, #128
 4173 1580 6FEA0301 		mvn	r1, r3
 4174 1584 054B     		ldr	r3, .L274
 4175 1586 DB68     		ldr	r3, [r3, #12]
 4176 1588 03F08003 		and	r3, r3, #128
 4177 158c 0B43     		orrs	r3, r3, r1
 4178 158e D360     		str	r3, [r2, #12]
2619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4179              		.loc 1 2619 0
 4180 1590 07F10C07 		add	r7, r7, #12
 4181 1594 BD46     		mov	sp, r7
 4182 1596 80BC     		pop	{r7}
 4183 1598 7047     		bx	lr
 4184              	.L275:
 4185 159a 00BF     		.align	2
 4186              	.L274:
 4187 159c 00280040 		.word	1073752064
 4188              		.cfi_endproc
 4189              	.LFE162:
 4191              		.align	2
 4192              		.global	RTC_GetITStatus
 4193              		.thumb
 4194              		.thumb_func
 4196              	RTC_GetITStatus:
 4197              	.LFB163:
2620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4198              		.loc 1 2633 0
 4199              		.cfi_startproc
 4200              		@ args = 0, pretend = 0, frame = 24
 4201              		@ frame_needed = 1, uses_anonymous_args = 0
 4202              		@ link register save eliminated.
 4203 15a0 80B4     		push	{r7}
 4204              	.LCFI155:
 4205              		.cfi_def_cfa_offset 4
 4206              		.cfi_offset 7, -4
 4207 15a2 87B0     		sub	sp, sp, #28
 4208              	.LCFI156:
 4209              		.cfi_def_cfa_offset 32
 4210 15a4 00AF     		add	r7, sp, #0
 4211              	.LCFI157:
 4212              		.cfi_def_cfa_register 7
 4213 15a6 7860     		str	r0, [r7, #4]
2634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4214              		.loc 1 2634 0
 4215 15a8 4FF00003 		mov	r3, #0
 4216 15ac FB75     		strb	r3, [r7, #23]
2635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4217              		.loc 1 2635 0
 4218 15ae 4FF00003 		mov	r3, #0
 4219 15b2 3B61     		str	r3, [r7, #16]
 4220 15b4 4FF00003 		mov	r3, #0
 4221 15b8 FB60     		str	r3, [r7, #12]
2636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4222              		.loc 1 2641 0
 4223 15ba 174B     		ldr	r3, .L280
 4224 15bc 1B6C     		ldr	r3, [r3, #64]
 4225 15be 03F00403 		and	r3, r3, #4
 4226 15c2 3B61     		str	r3, [r7, #16]
2642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4227              		.loc 1 2644 0
 4228 15c4 144B     		ldr	r3, .L280
 4229 15c6 9A68     		ldr	r2, [r3, #8]
 4230 15c8 7B68     		ldr	r3, [r7, #4]
 4231 15ca 1A40     		ands	r2, r2, r3
 4232 15cc 7B68     		ldr	r3, [r7, #4]
 4233 15ce 4FEAD331 		lsr	r1, r3, #15
 4234 15d2 3B69     		ldr	r3, [r7, #16]
 4235 15d4 0B40     		ands	r3, r3, r1
 4236 15d6 1343     		orrs	r3, r3, r2
 4237 15d8 FB60     		str	r3, [r7, #12]
2645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4238              		.loc 1 2647 0
 4239 15da 0F4B     		ldr	r3, .L280
 4240 15dc DA68     		ldr	r2, [r3, #12]
 4241 15de 7B68     		ldr	r3, [r7, #4]
 4242 15e0 4FEA1313 		lsr	r3, r3, #4
 4243 15e4 1340     		ands	r3, r3, r2
 4244 15e6 3B61     		str	r3, [r7, #16]
2648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4245              		.loc 1 2650 0
 4246 15e8 FB68     		ldr	r3, [r7, #12]
 4247 15ea 002B     		cmp	r3, #0
 4248 15ec 0AD0     		beq	.L277
 4249              		.loc 1 2650 0 is_stmt 0 discriminator 1
 4250 15ee 3B69     		ldr	r3, [r7, #16]
 4251 15f0 4FEA0343 		lsl	r3, r3, #16
 4252 15f4 4FEA1343 		lsr	r3, r3, #16
 4253 15f8 002B     		cmp	r3, #0
 4254 15fa 03D0     		beq	.L277
2651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4255              		.loc 1 2652 0 is_stmt 1
 4256 15fc 4FF00103 		mov	r3, #1
 4257 1600 FB75     		strb	r3, [r7, #23]
 4258 1602 02E0     		b	.L278
 4259              	.L277:
2653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4260              		.loc 1 2656 0
 4261 1604 4FF00003 		mov	r3, #0
 4262 1608 FB75     		strb	r3, [r7, #23]
 4263              	.L278:
2657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4264              		.loc 1 2658 0
 4265 160a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4266              		.loc 1 2659 0
 4267 160c 1846     		mov	r0, r3
 4268 160e 07F11C07 		add	r7, r7, #28
 4269 1612 BD46     		mov	sp, r7
 4270 1614 80BC     		pop	{r7}
 4271 1616 7047     		bx	lr
 4272              	.L281:
 4273              		.align	2
 4274              	.L280:
 4275 1618 00280040 		.word	1073752064
 4276              		.cfi_endproc
 4277              	.LFE163:
 4279              		.align	2
 4280              		.global	RTC_ClearITPendingBit
 4281              		.thumb
 4282              		.thumb_func
 4284              	RTC_ClearITPendingBit:
 4285              	.LFB164:
2660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4286              		.loc 1 2673 0
 4287              		.cfi_startproc
 4288              		@ args = 0, pretend = 0, frame = 16
 4289              		@ frame_needed = 1, uses_anonymous_args = 0
 4290              		@ link register save eliminated.
 4291 161c 80B4     		push	{r7}
 4292              	.LCFI158:
 4293              		.cfi_def_cfa_offset 4
 4294              		.cfi_offset 7, -4
 4295 161e 85B0     		sub	sp, sp, #20
 4296              	.LCFI159:
 4297              		.cfi_def_cfa_offset 24
 4298 1620 00AF     		add	r7, sp, #0
 4299              	.LCFI160:
 4300              		.cfi_def_cfa_register 7
 4301 1622 7860     		str	r0, [r7, #4]
2674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4302              		.loc 1 2674 0
 4303 1624 4FF00003 		mov	r3, #0
 4304 1628 FB60     		str	r3, [r7, #12]
2675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4305              		.loc 1 2680 0
 4306 162a 7B68     		ldr	r3, [r7, #4]
 4307 162c 4FEA1313 		lsr	r3, r3, #4
 4308 1630 FB60     		str	r3, [r7, #12]
2681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4309              		.loc 1 2683 0
 4310 1632 0A4A     		ldr	r2, .L283
 4311 1634 FB68     		ldr	r3, [r7, #12]
 4312 1636 4FEA0343 		lsl	r3, r3, #16
 4313 163a 4FEA1343 		lsr	r3, r3, #16
 4314 163e 43F08003 		orr	r3, r3, #128
 4315 1642 6FEA0301 		mvn	r1, r3
 4316 1646 054B     		ldr	r3, .L283
 4317 1648 DB68     		ldr	r3, [r3, #12]
 4318 164a 03F08003 		and	r3, r3, #128
 4319 164e 0B43     		orrs	r3, r3, r1
 4320 1650 D360     		str	r3, [r2, #12]
2684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4321              		.loc 1 2684 0
 4322 1652 07F11407 		add	r7, r7, #20
 4323 1656 BD46     		mov	sp, r7
 4324 1658 80BC     		pop	{r7}
 4325 165a 7047     		bx	lr
 4326              	.L284:
 4327              		.align	2
 4328              	.L283:
 4329 165c 00280040 		.word	1073752064
 4330              		.cfi_endproc
 4331              	.LFE164:
 4333              		.align	2
 4334              		.thumb
 4335              		.thumb_func
 4337              	RTC_ByteToBcd2:
 4338              	.LFB165:
2685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4339              		.loc 1 2696 0
 4340              		.cfi_startproc
 4341              		@ args = 0, pretend = 0, frame = 16
 4342              		@ frame_needed = 1, uses_anonymous_args = 0
 4343              		@ link register save eliminated.
 4344 1660 80B4     		push	{r7}
 4345              	.LCFI161:
 4346              		.cfi_def_cfa_offset 4
 4347              		.cfi_offset 7, -4
 4348 1662 85B0     		sub	sp, sp, #20
 4349              	.LCFI162:
 4350              		.cfi_def_cfa_offset 24
 4351 1664 00AF     		add	r7, sp, #0
 4352              	.LCFI163:
 4353              		.cfi_def_cfa_register 7
 4354 1666 0346     		mov	r3, r0
 4355 1668 FB71     		strb	r3, [r7, #7]
2697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4356              		.loc 1 2697 0
 4357 166a 4FF00003 		mov	r3, #0
 4358 166e FB73     		strb	r3, [r7, #15]
2698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4359              		.loc 1 2699 0
 4360 1670 07E0     		b	.L286
 4361              	.L287:
2700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4362              		.loc 1 2701 0
 4363 1672 FB7B     		ldrb	r3, [r7, #15]
 4364 1674 03F10103 		add	r3, r3, #1
 4365 1678 FB73     		strb	r3, [r7, #15]
2702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4366              		.loc 1 2702 0
 4367 167a FB79     		ldrb	r3, [r7, #7]
 4368 167c A3F10A03 		sub	r3, r3, #10
 4369 1680 FB71     		strb	r3, [r7, #7]
 4370              	.L286:
2699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4371              		.loc 1 2699 0 discriminator 1
 4372 1682 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4373 1684 092B     		cmp	r3, #9
 4374 1686 F4D8     		bhi	.L287
2703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4375              		.loc 1 2705 0
 4376 1688 FB7B     		ldrb	r3, [r7, #15]
 4377 168a 4FEA0313 		lsl	r3, r3, #4
 4378 168e DAB2     		uxtb	r2, r3
 4379 1690 FB79     		ldrb	r3, [r7, #7]
 4380 1692 1343     		orrs	r3, r3, r2
 4381 1694 DBB2     		uxtb	r3, r3
2706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4382              		.loc 1 2706 0
 4383 1696 1846     		mov	r0, r3
 4384 1698 07F11407 		add	r7, r7, #20
 4385 169c BD46     		mov	sp, r7
 4386 169e 80BC     		pop	{r7}
 4387 16a0 7047     		bx	lr
 4388              		.cfi_endproc
 4389              	.LFE165:
 4391 16a2 00BF     		.align	2
 4392              		.thumb
 4393              		.thumb_func
 4395              	RTC_Bcd2ToByte:
 4396              	.LFB166:
2707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4397              		.loc 1 2714 0
 4398              		.cfi_startproc
 4399              		@ args = 0, pretend = 0, frame = 16
 4400              		@ frame_needed = 1, uses_anonymous_args = 0
 4401              		@ link register save eliminated.
 4402 16a4 80B4     		push	{r7}
 4403              	.LCFI164:
 4404              		.cfi_def_cfa_offset 4
 4405              		.cfi_offset 7, -4
 4406 16a6 85B0     		sub	sp, sp, #20
 4407              	.LCFI165:
 4408              		.cfi_def_cfa_offset 24
 4409 16a8 00AF     		add	r7, sp, #0
 4410              	.LCFI166:
 4411              		.cfi_def_cfa_register 7
 4412 16aa 0346     		mov	r3, r0
 4413 16ac FB71     		strb	r3, [r7, #7]
2715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4414              		.loc 1 2715 0
 4415 16ae 4FF00003 		mov	r3, #0
 4416 16b2 FB73     		strb	r3, [r7, #15]
2716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4417              		.loc 1 2716 0
 4418 16b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4419 16b6 4FEA1313 		lsr	r3, r3, #4
 4420 16ba DBB2     		uxtb	r3, r3
 4421 16bc 1A46     		mov	r2, r3
 4422 16be 4FEA8202 		lsl	r2, r2, #2
 4423 16c2 D318     		adds	r3, r2, r3
 4424 16c4 4FEA4303 		lsl	r3, r3, #1
 4425 16c8 FB73     		strb	r3, [r7, #15]
2717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4426              		.loc 1 2717 0
 4427 16ca FB79     		ldrb	r3, [r7, #7]
 4428 16cc 03F00F03 		and	r3, r3, #15
 4429 16d0 DAB2     		uxtb	r2, r3
 4430 16d2 FB7B     		ldrb	r3, [r7, #15]
 4431 16d4 D318     		adds	r3, r2, r3
 4432 16d6 DBB2     		uxtb	r3, r3
2718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4433              		.loc 1 2718 0
 4434 16d8 1846     		mov	r0, r3
 4435 16da 07F11407 		add	r7, r7, #20
 4436 16de BD46     		mov	sp, r7
 4437 16e0 80BC     		pop	{r7}
 4438 16e2 7047     		bx	lr
 4439              		.cfi_endproc
 4440              	.LFE166:
 4442              	.Letext0:
 4443              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 4444              		.file 3 "C:\\Users\\Gergo\\workspace\\estevan\\Libraries\\Device\\STM32F4xx\\Include/stm32f4xx.h"
 4445              		.file 4 "C:\\Users\\Gergo\\workspace\\estevan\\Libraries\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4x
 4446              		.file 5 "C:\\Users\\Gergo\\workspace\\estevan\\Libraries\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:18     .text:00000000 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:23     .text:00000000 RTC_DeInit
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:377    .text:000001ec RTC_EnterInitMode
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:507    .text:00000288 RTC_WaitForSynchro
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:173    .text:000000f8 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:178    .text:00000100 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:183    .text:00000100 RTC_Init
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:471    .text:0000026c RTC_ExitInitMode
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:270    .text:00000184 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:274    .text:00000188 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:279    .text:00000188 RTC_StructInit
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:322    .text:000001b4 RTC_WriteProtectionCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:368    .text:000001e8 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:372    .text:000001ec $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:462    .text:00000268 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:466    .text:0000026c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:498    .text:00000284 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:502    .text:00000288 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:595    .text:0000030c $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:599    .text:00000310 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:604    .text:00000310 RTC_RefClockCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:683    .text:00000380 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:687    .text:00000384 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:692    .text:00000384 RTC_BypassShadowCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:750    .text:000003d0 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:754    .text:000003d4 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:759    .text:000003d4 RTC_SetTime
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4395   .text:000016a4 RTC_Bcd2ToByte
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4337   .text:00001660 RTC_ByteToBcd2
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:935    .text:000004f4 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:939    .text:000004f8 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:944    .text:000004f8 RTC_TimeStructInit
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:991    .text:0000052c RTC_GetTime
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1086   .text:000005cc $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1090   .text:000005d0 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1095   .text:000005d0 RTC_GetSubSecond
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1133   .text:000005f4 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1137   .text:000005f8 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1142   .text:000005f8 RTC_SetDate
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1321   .text:00000720 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1325   .text:00000724 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1330   .text:00000724 RTC_DateStructInit
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1377   .text:00000758 RTC_GetDate
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1472   .text:000007f8 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1476   .text:000007fc $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1481   .text:000007fc RTC_SetAlarm
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1692   .text:0000094c $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1696   .text:00000950 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1701   .text:00000950 RTC_AlarmStructInit
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1760   .text:0000099c RTC_GetAlarm
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1891   .text:00000a7c $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1895   .text:00000a80 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:1900   .text:00000a80 RTC_AlarmCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2013   .text:00000b30 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2017   .text:00000b34 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2022   .text:00000b34 RTC_AlarmSubSecondConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2085   .text:00000b88 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2089   .text:00000b8c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2094   .text:00000b8c RTC_GetAlarmSubSecond
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2145   .text:00000bd0 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2149   .text:00000bd4 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2154   .text:00000bd4 RTC_WakeUpClockConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2205   .text:00000c18 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2209   .text:00000c1c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2214   .text:00000c1c RTC_SetWakeUpCounter
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2256   .text:00000c4c $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2260   .text:00000c50 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2265   .text:00000c50 RTC_GetWakeUpCounter
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2292   .text:00000c68 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2296   .text:00000c6c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2301   .text:00000c6c RTC_WakeUpCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2406   .text:00000d10 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2410   .text:00000d14 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2415   .text:00000d14 RTC_DayLightSavingConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2469   .text:00000d5c $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2473   .text:00000d60 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2478   .text:00000d60 RTC_GetStoreOperation
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2504   .text:00000d74 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2508   .text:00000d78 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2513   .text:00000d78 RTC_OutputConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2567   .text:00000dc0 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2571   .text:00000dc4 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2576   .text:00000dc4 RTC_CoarseCalibConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2642   .text:00000e20 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2646   .text:00000e24 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2651   .text:00000e24 RTC_CoarseCalibCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2730   .text:00000e94 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2734   .text:00000e98 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2739   .text:00000e98 RTC_CalibOutputCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2797   .text:00000ee4 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2801   .text:00000ee8 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2806   .text:00000ee8 RTC_CalibOutputConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2857   .text:00000f2c $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2861   .text:00000f30 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2866   .text:00000f30 RTC_SmoothCalibConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2963   .text:00000fc0 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2967   .text:00000fc4 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:2972   .text:00000fc4 RTC_TimeStampCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3043   .text:00001028 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3047   .text:0000102c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3052   .text:0000102c RTC_GetTimeStamp
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3208   .text:00001150 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3212   .text:00001154 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3217   .text:00001154 RTC_GetTimeStampSubSecond
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3242   .text:00001164 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3246   .text:00001168 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3251   .text:00001168 RTC_TamperTriggerConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3302   .text:000011a8 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3306   .text:000011ac $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3311   .text:000011ac RTC_TamperCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3361   .text:000011e8 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3365   .text:000011ec $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3370   .text:000011ec RTC_TamperFilterConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3409   .text:00001218 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3413   .text:0000121c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3418   .text:0000121c RTC_TamperSamplingFreqConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3457   .text:00001248 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3461   .text:0000124c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3466   .text:0000124c RTC_TamperPinsPrechargeDuration
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3505   .text:00001278 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3509   .text:0000127c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3514   .text:0000127c RTC_TimeStampOnTamperDetectionCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3560   .text:000012b0 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3564   .text:000012b4 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3569   .text:000012b4 RTC_TamperPullUpCmd
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3615   .text:000012e8 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3619   .text:000012ec $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3624   .text:000012ec RTC_WriteBackupRegister
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3667   .text:0000131c $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3671   .text:00001320 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3676   .text:00001320 RTC_ReadBackupRegister
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3718   .text:00001350 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3722   .text:00001354 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3727   .text:00001354 RTC_TamperPinSelection
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3766   .text:00001380 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3770   .text:00001384 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3775   .text:00001384 RTC_TimeStampPinSelection
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3814   .text:000013b0 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3818   .text:000013b4 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3823   .text:000013b4 RTC_OutputTypeConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3862   .text:000013e0 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3866   .text:000013e4 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3871   .text:000013e4 RTC_SynchroShiftConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3985   .text:00001494 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3989   .text:00001498 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:3994   .text:00001498 RTC_ITConfig
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4075   .text:00001518 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4079   .text:0000151c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4084   .text:0000151c RTC_GetFlagStatus
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4140   .text:00001564 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4144   .text:00001568 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4149   .text:00001568 RTC_ClearFlag
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4187   .text:0000159c $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4191   .text:000015a0 $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4196   .text:000015a0 RTC_GetITStatus
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4275   .text:00001618 $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4279   .text:0000161c $t
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4284   .text:0000161c RTC_ClearITPendingBit
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4329   .text:0000165c $d
C:\Users\Gergo\AppData\Local\Temp\ccQuj2OP.s:4333   .text:00001660 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.fa6ddc8087252f7ec15b7f8b8133d3d8
                           .group:00000000 wm4.stm32f4xx.h.48.0b3cda0630bac1bf9be1255cab0e1f3b
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.283.d309488c8c88fbc6a572fb5ddb72ae02
                           .group:00000000 wm4.stm32f4xx_exti.h.54.435fdeac3da378720d6c1615172f0bf3
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6967.11efd59d6a7da8b33ccb47eb4d57a5b3
                           .group:00000000 wm4.stm32f4xx_rtc.h.127.d971ab18652a46b4e6f2fc10767eacb7

NO UNDEFINED SYMBOLS
